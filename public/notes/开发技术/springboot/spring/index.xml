<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/</link>
    <description>Recent content in Spring on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>@ComponentScan中使用filter</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/componentscan%E4%B8%AD%E4%BD%BF%E7%94%A8filter/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/componentscan%E4%B8%AD%E4%BD%BF%E7%94%A8filter/</guid>
        <description>我之所以多这个注解感兴趣，是因为最近开到SpringBootApplication这个注解继承的注解就配置了Filter。 我认为相关的知识我</description>
      </item>
      
      <item>
        <title>@Conditional注解实现条件注入</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/conditional%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/conditional%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5/</guid>
        <description>SpringBoot中，更多的是使用已经高度开发的一系列条件注解，第一次接触Spring的条件注解，没想到还需要写实现类。 1 2 3 4 5 6 7 8 9</description>
      </item>
      
      <item>
        <title>@ImportResource导入一个bean.xml文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/importresource%E5%AF%BC%E5%85%A5%E4%B8%80%E4%B8%AAbean.xml%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/importresource%E5%AF%BC%E5%85%A5%E4%B8%80%E4%B8%AAbean.xml%E6%96%87%E4%BB%B6/</guid>
        <description>@ImportResource多用在项目中存在老旧的Spring项目（我目前基本上没有遇到过这种情况） 1 2 3 @ImportResource(&amp;#34;classpath:beans.xml&amp;#34;) 我使用这两个注解的次数非常的少</description>
      </item>
      
      <item>
        <title>@Import与ImportSelector与ImportBeanDefinitionRegistar</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/import%E4%B8%8Eimportselector%E4%B8%8Eimportbeandefinitionregistar/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/import%E4%B8%8Eimportselector%E4%B8%8Eimportbeandefinitionregistar/</guid>
        <description>@Import创建出来的组件，组件的名称为其全类名。这个注解可以用在将第三方的Bean注册到Spring Context。这种方式导入相对于J</description>
      </item>
      
      <item>
        <title>@Profile注解的应用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/profile%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/profile%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>@Profile注解类型于@Conditional，但是它仅针对当前运行的环境，我觉得这个东西在生产开发中使用的频率非常的低，几乎没有使用的</description>
      </item>
      
      <item>
        <title>@PropertySouce注解需要注意的地方</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/propertysouce%E6%B3%A8%E8%A7%A3%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/propertysouce%E6%B3%A8%E8%A7%A3%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
        <description>@PropertySource有如下注意事项： @PropertySource目前也是支持yml文件的，我看网上说只支持properties文</description>
      </item>
      
      <item>
        <title>@Scope与@Lazy注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/scope%E4%B8%8Elazy%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/scope%E4%B8%8Elazy%E6%B3%A8%E8%A7%A3/</guid>
        <description>Scope可配置的值如下： 1 2 3 4 5 6 7 ConfigurableBeanFactory#SCOPE_PROTOTYPE：多实例 Configu</description>
      </item>
      
      <item>
        <title>BeanPostProcessor源码分析（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/beanpostprocessor%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/beanpostprocessor%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description>BeanPostProcessor是许多注解、Aware实现的最核心的技术，所以研究它的实现原理是非常有价值的，利于后面其他知识的学习。</description>
      </item>
      
      <item>
        <title>Spring获取操作系统信息</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/spring%E8%8E%B7%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/spring%E8%8E%B7%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</guid>
        <description>代码如下： 1 2 3 4 ConfigurableEnvironment environment = applicationContext.getEnvironment(); environment.getProperty(&amp;#34;os.name&amp;#34;); 冷知识，第一次接触。</description>
      </item>
      
      <item>
        <title>从xml配置文件到基于注解的配置文件的演进</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BB%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%B0%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%BC%94%E8%BF%9B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BB%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%B0%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%BC%94%E8%BF%9B/</guid>
        <description>代码如下（该代码未执行，未在编辑器中编辑，纯粹记录使用）： 1 2 3 4 5 6 7 // beans.xml ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&amp;#34;beans.xml&amp;#34;); // xxxConfiguration.class ApplicationContext applicationContext = new AnnotationConfigApplicationContext(xxxConfiguration.class)</description>
      </item>
      
      <item>
        <title>使用@Value赋值</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8value%E8%B5%8B%E5%80%BC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8value%E8%B5%8B%E5%80%BC/</guid>
        <description>@Value注解我们平时用于从application.yml中获取配置，给到类中的字段，我一直以为这是这个字段存在的价值，知道最近才知道，这</description>
      </item>
      
      <item>
        <title>使用FactoryBean注入Bean</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8factorybean%E6%B3%A8%E5%85%A5bean/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8factorybean%E6%B3%A8%E5%85%A5bean/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class MyFactoryBean implements FactoryBean { @Override public Object getObject() throws Exception { return null; } @Override public Class&amp;lt;?&amp;gt; getObjectType() { return null; } @Override public boolean isSingleton() { return false; } } getObject：方法返回</description>
      </item>
      
      <item>
        <title>四种方式管理Bean的生命周期</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
        <description>类似PostConstructor、PreDestroy等，我一直在代码中使用，但是我从来没有系统的去学习和调节它们，这次看到了，刚好一起整</description>
      </item>
      
      <item>
        <title>四种方式给Spring容器注入组件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%BB%99spring%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%85%A5%E7%BB%84%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%BB%99spring%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%85%A5%E7%BB%84%E4%BB%B6/</guid>
        <description>纯粹整理一下，感觉实战意义不大。 包扫描+组件标注注解（@Controller、@Service、@Repository等） @Bean导入第三</description>
      </item>
      
      <item>
        <title>注解、Aware及其实现类</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E6%B3%A8%E8%A7%A3aware%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E7%B1%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E6%B3%A8%E8%A7%A3aware%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E7%B1%BB/</guid>
        <description>我这里只是纯粹记录的，方便我查阅相关注解实现的源码。相应的知识积累多了，也有助于我寻找Spring的设计思路。 注解： @PreDestroy: InitDestroyAnnotationBeanPostProcessor @Autowired: AutowiredAnnotationBeanPostProcessor Aware： ApplicationContextAware: ApplicationContextAwareProcessor</description>
      </item>
      
      <item>
        <title>用于注入Bean的一些注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E7%94%A8%E4%BA%8E%E6%B3%A8%E5%85%A5bean%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E7%94%A8%E4%BA%8E%E6%B3%A8%E5%85%A5bean%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/</guid>
        <description>Autowired 虽然我们现在开发的时候基本用不上这个注解（我们基本用构造函数注入），但是有些东西还是需要了解一下的。 @Autowired默认按照类型去容器</description>
      </item>
      
    
  </channel>
</rss>