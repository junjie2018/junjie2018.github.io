<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/</link>
    <description>Recent content in TypeScript on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>import type</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/import-type/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/import-type/</guid>
        <description>TS带来了一个新特性：仅仅导入/导出声明。 为了能让我们导入类型，TS重用了JS的导入语法。 下面的案例中，我们确保JS的doThing以及TS</description>
      </item>
      
      <item>
        <title>TS中的接口</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/ts%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/ts%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3/</guid>
        <description>TS中的接口和java还是有出入的，TS中接口可以用于对对象的形状进行描述，还可以对类的一部分行为行为进行抽象。 接口继承类 常见的面向对象语言</description>
      </item>
      
      <item>
        <title>TS中的枚举</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/ts%E4%B8%AD%E7%9A%84%E6%9E%9A%E4%B8%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/ts%E4%B8%AD%E7%9A%84%E6%9E%9A%E4%B8%BE/</guid>
        <description>如下枚举定义： 1 2 3 4 5 enum Days { Sun, Mon, Tue, Wend, Thu, Fri, Sat } 会被编译为： 1 2 3 4 5 6 7 8 9 10 11 12 var Days; (function (Days) { Days[Days[&amp;#34;Sun&amp;#34;] = 0] = &amp;#34;Sun&amp;#34;; Days[Days[&amp;#34;Mon&amp;#34;] = 1] = &amp;#34;Mon&amp;#34;; Days[Days[&amp;#34;Tue&amp;#34;] = 2] = &amp;#34;Tue&amp;#34;; Days[Days[&amp;#34;Wed&amp;#34;] = 3] = &amp;#34;Wed&amp;#34;; Days[Days[&amp;#34;Thu&amp;#34;] = 4] =</description>
      </item>
      
      <item>
        <title>TypeScript的函数类型</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/typescript%E7%9A%84%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/typescript%E7%9A%84%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</guid>
        <description>JavaScript中有两种常见的定义函数的方式——函数声明、函数表达式。 1 2 3 4 5 6 7 8 9 10 11 // 函数声明（Function Declarat</description>
      </item>
      
      <item>
        <title>WebStorm配置右键直接运行ts文件</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/webstorm%E9%85%8D%E7%BD%AE%E5%8F%B3%E9%94%AE%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8Cts%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/webstorm%E9%85%8D%E7%BD%AE%E5%8F%B3%E9%94%AE%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8Cts%E6%96%87%E4%BB%B6/</guid>
        <description>这个技术生产上应该是没有啥意义的，但是学习ts基础知识时，还是蛮方便的： 安装ts-node 1 2 3 npm install -g ts-node 安装WebStorm插件 重启WebS</description>
      </item>
      
      <item>
        <title>元组越界的元素</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%85%83%E7%BB%84%E8%B6%8A%E7%95%8C%E7%9A%84%E5%85%83%E7%B4%A0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%85%83%E7%BB%84%E8%B6%8A%E7%95%8C%E7%9A%84%E5%85%83%E7%B4%A0/</guid>
        <description>当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型： 1 2 3 4 5 6 7 8 9 let tom:[string,number] = [&amp;#39;Tom&amp;#39;, 25]; tom.push(&amp;#39;male&amp;#39;); // 报错 tom.push(true); 我觉得元祖支持越界的元素，这个让元组非</description>
      </item>
      
      <item>
        <title>关于数组写法的思考</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E5%86%99%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E5%86%99%E6%B3%95%E7%9A%84%E6%80%9D%E8%80%83/</guid>
        <description>TS中数组貌似有三种写法：类型 + 方括号、数组泛型、用接口表示。 用接口表示的写法在类数组中是硬性要求，这个写法需要掌握 貌似数组项类型不一样的时</description>
      </item>
      
      <item>
        <title>可选属性和任意属性</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BB%BB%E6%84%8F%E5%B1%9E%E6%80%A7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BB%BB%E6%84%8F%E5%B1%9E%E6%80%A7/</guid>
        <description>默认情况下，定义的变量比接口少一些属性和多一些属性都是不允许的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 interface Person { name: string; age: number; } // 编译失败 let tom: Person = { name: &amp;#39;Tom&amp;#39;,</description>
      </item>
      
      <item>
        <title>声明文件</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6/</guid>
        <description>参考资料中的声明文件部分，我暂时不打算研究。 ~~ 在阅读TypeScript时，我看到了下面一段话：~~ ~~ &amp;gt; 有一些第三方库原生不支持TypeSc</description>
      </item>
      
      <item>
        <title>类型断言</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</guid>
        <description>类型断言有如下案例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 interface Cat { name: string; run(): void; } interface Fish { name: string; swim(): void; } function getName(animal: Cat | Fish): string { return animal.name; } function isFish(animal: Cat | Fish): boolean { // 我觉得这种写</description>
      </item>
      
      <item>
        <title>类数组</title>
        <link>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E7%B1%BB%E6%95%B0%E7%BB%84/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/node.js/typescript/%E7%B1%BB%E6%95%B0%E7%BB%84/</guid>
        <description>在阅读TypeScript时，遇到了有关类数组的知识点： 可以用接口表示数组，但是我们一般不会这么做，不过有一种情况特殊，那就是用它来表示类数</description>
      </item>
      
    
  </channel>
</rss>