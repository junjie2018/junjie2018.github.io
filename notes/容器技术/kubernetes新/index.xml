<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes（新） on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/</link>
    <description>Recent content in Kubernetes（新） on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Ingress</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/ingress/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/ingress/</guid>
        <description></description>
      </item>
      
      <item>
        <title>KT Connect</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/</guid>
        <description></description>
      </item>
      
      <item>
        <title>实验</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%AE%9E%E9%AA%8C/</guid>
        <description></description>
      </item>
      
      <item>
        <title>笔记</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%AC%94%E8%AE%B0/</guid>
        <description></description>
      </item>
      
      <item>
        <title>CentOS 7搭建Kubernetes（废弃）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/centos-7%E6%90%AD%E5%BB%BAkubernetes%E5%BA%9F%E5%BC%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/centos-7%E6%90%AD%E5%BB%BAkubernetes%E5%BA%9F%E5%BC%83/</guid>
        <description>上一次实验中，让我最难以忘怀的每次重新搭建Kubernetes集群时都需要漫长的等待，即使我用了国内的仓库，也需要不停的等待。单纯的搭建K8</description>
      </item>
      
      <item>
        <title>Docker进入容器内部</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/docker%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/docker%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8/</guid>
        <description>docker attach 容器ID 参考资料 进入容器</description>
      </item>
      
      <item>
        <title>Harbor配置代理缓存</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/harbor%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/harbor%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98/</guid>
        <description>目前这个方式适用的场景有点窄，只用为Docker Hub和同Harbor仓库进行代理缓存。先观望着吧。 参考资料 使用harbor代理缓存dock</description>
      </item>
      
      <item>
        <title>K8S推荐使用的标签及Helm常用的标签</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/k8s%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E5%8F%8Ahelm%E5%B8%B8%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/k8s%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E5%8F%8Ahelm%E5%B8%B8%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE/</guid>
        <description>Kubernetes推荐的标签 除了 kubectl 和 dashboard 之外，您可以使用其他工具来可视化和管理 Kubernetes 对象。一组通用的标签可以让多个工具之间相互操作，用所有工具都</description>
      </item>
      
      <item>
        <title>Kubectl执行时显示日志</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubectl%E6%89%A7%E8%A1%8C%E6%97%B6%E6%98%BE%E7%A4%BA%E6%97%A5%E5%BF%97/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubectl%E6%89%A7%E8%A1%8C%E6%97%B6%E6%98%BE%E7%A4%BA%E6%97%A5%E5%BF%97/</guid>
        <description>我使用的指令如下： kubectl -v=8 get pods 参考资料 kubectl get pod卡住的问题</description>
      </item>
      
      <item>
        <title>Kubernetes与灰度发布的一些思考</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubernetes%E4%B8%8E%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubernetes%E4%B8%8E%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
        <description>看资料时看到了一个Kubernetes原生支持灰度发布的案例，他是利用两个发布不同版本的镜像Deployment实现的。这个方案的特点在于两</description>
      </item>
      
      <item>
        <title>Kubernetes中搭建Nexus</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubernetes%E4%B8%AD%E6%90%AD%E5%BB%BAnexus/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubernetes%E4%B8%AD%E6%90%AD%E5%BB%BAnexus/</guid>
        <description>操作步骤 拉取代码，将Nexus运行起来： 1 2 3 4 5 6 7 8 9 10 11 git clone https://gitee.com/junjie2019/kubernetes.git cd kubernetes/Devops/Jenkins kubectl apply -f PersistentVolumeClaim.yml kubectl apply -f Nexus.yml kubectl create configmap setting.xml \ -- from-file=setting.xml \ -n devops 相关资料 Kubernetes部署</description>
      </item>
      
      <item>
        <title>Kubernetes解决NFS挂载报错的问题（CentOS版）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubernetes%E8%A7%A3%E5%86%B3nfs%E6%8C%82%E8%BD%BD%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98centos%E7%89%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kubernetes%E8%A7%A3%E5%86%B3nfs%E6%8C%82%E8%BD%BD%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98centos%E7%89%88/</guid>
        <description>报错如下： [root@node1 nfs]# kubectl describe pod nfs-client-provisioner-6f7bf77fd6-fbzhw -n nfs Name: nfs-client-provisioner-6f7bf77fd6-fbzhw Namespace: nfs Priority: 0 Node: node4/192.168.23.63 Start Time: Thu, 06 Jan 2022 03:50:28 -0500 Labels: app=nfs-client-provisioner pod-template-hash=6f7bf77fd6 Annotations: &amp;lt;none&amp;gt; Status: Pending IP: IPs: &amp;lt;none&amp;gt; Controlled By: ReplicaSet/nfs-client-provisioner-6f7bf77fd6 Containers: nfs-client-provisioner: Container ID: Image: quay.io/external_storage/nfs-client-provisioner:latest Image ID: Port: &amp;lt;none&amp;gt; Host Port: &amp;lt;none&amp;gt; State: Waiting Reason: ContainerCreating Ready: False Restart Count: 0 Environment: PROVISIONER_NAME: fuseim.pri/ifs NFS_SERVER: 192.168.23.60 NFS_PATH:</description>
      </item>
      
      <item>
        <title>Rancher的安装与导入K8S集群（废弃）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/rancher%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5k8s%E9%9B%86%E7%BE%A4%E5%BA%9F%E5%BC%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/rancher%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5k8s%E9%9B%86%E7%BE%A4%E5%BA%9F%E5%BC%83/</guid>
        <description>安装Rancher 执行如下指令 docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher:latest 导入集群 首先在Cluster选项卡下选择Add Cluster。因为我已经配置过了，这个按钮</description>
      </item>
      
      <item>
        <title>volumeClaimTemplates与PersistentVolumeClaim</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/volumeclaimtemplates%E4%B8%8Epersistentvolumeclaim/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/volumeclaimtemplates%E4%B8%8Epersistentvolumeclaim/</guid>
        <description>看资料时看到了一个volumeClaimTemplates字段的配置，代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
      </item>
      
      <item>
        <title>VS Code上K8S插件应用笔记</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/vs-code%E4%B8%8Ak8s%E6%8F%92%E4%BB%B6%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/vs-code%E4%B8%8Ak8s%E6%8F%92%E4%BB%B6%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>切换命名空间 我发现切换了命名空间后，我在CentOS系统上的Kubectl工具也会受到影响。</description>
      </item>
      
      <item>
        <title>一个关于InitContainer的小实验</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8Einitcontainer%E7%9A%84%E5%B0%8F%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8Einitcontainer%E7%9A%84%E5%B0%8F%E5%AE%9E%E9%AA%8C/</guid>
        <description>Pod的配置文件如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 apiVersion:v1kind:Podmetadata:name:init-demolabels:name:init-demospec:containers:- name:nginximage:nginxresources:limits:memory:&amp;#34;128Mi&amp;#34;cpu:&amp;#34;500m&amp;#34;ports:- containerPort:80volumeMounts:- name:workdirmountPath:/usr/share/nginx/htmlinitContainers:- name:installimage:busyboxcommand:- wget- &amp;#34;-O&amp;#34;- &amp;#34;/work-dir/index.html&amp;#34;- https://kuboard.cnvolumeMounts:- name:workdirmountPath:&amp;#34;/work-dir&amp;#34;dnsPolicy:Defaultvolumes:- name:workdiremptyDir:{} 该段配置中，Pod中初始</description>
      </item>
      
      <item>
        <title>一个蠢问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%B8%80%E4%B8%AA%E8%A0%A2%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%B8%80%E4%B8%AA%E8%A0%A2%E9%97%AE%E9%A2%98/</guid>
        <description>初始化K8S集群的时候，有如下报错： [root@node-template ~]# kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=172.20.11.201 [init] Using Kubernetes version: v1.21.1 [preflight] Running pre-flight checks [WARNING IsDockerSystemdCheck]: detected &amp;quot;cgroupfs&amp;quot; as the Docker cgroup driver. The recommended driver is &amp;quot;systemd&amp;quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/ [preflight] Pulling images required for setting up a Kubernetes cluster [preflight] This might take a minute or</description>
      </item>
      
      <item>
        <title>从传统RBAC的角度理解K8S的RBAC</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BB%8E%E4%BC%A0%E7%BB%9Frbac%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3k8s%E7%9A%84rbac/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BB%8E%E4%BC%A0%E7%BB%9Frbac%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3k8s%E7%9A%84rbac/</guid>
        <description>RBAC，一个用户可以有多个角色，一个角色可以有多个控制。 在K8S中，有（省略了部分配置）： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
      </item>
      
      <item>
        <title>使用Helm安装Rancher到K8S集群</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BD%BF%E7%94%A8helm%E5%AE%89%E8%A3%85rancher%E5%88%B0k8s%E9%9B%86%E7%BE%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BD%BF%E7%94%A8helm%E5%AE%89%E8%A3%85rancher%E5%88%B0k8s%E9%9B%86%E7%BE%A4/</guid>
        <description></description>
      </item>
      
      <item>
        <title>修复节点为NotReady的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BF%AE%E5%A4%8D%E8%8A%82%E7%82%B9%E4%B8%BAnotready%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BF%AE%E5%A4%8D%E8%8A%82%E7%82%B9%E4%B8%BAnotready%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>这个问题我之前从未遇到过，先说说我怎么发现这个问题的，我使用Helm安装chart时，发现Release一直处于Pending状态，所以我顺</description>
      </item>
      
      <item>
        <title>关于automountServiceAccountToken配置的实验</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Eautomountserviceaccounttoken%E9%85%8D%E7%BD%AE%E7%9A%84%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Eautomountserviceaccounttoken%E9%85%8D%E7%BD%AE%E7%9A%84%E5%AE%9E%E9%AA%8C/</guid>
        <description>在1.6以上版本中，您可以选择取消为ServiceAccount自动挂载API凭证，只需在ServiceAccount中设置automoun</description>
      </item>
      
      <item>
        <title>关于scoat的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Escoat%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Escoat%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 我们准备使用KT Connect，但是运维配置好了后，发现始终无法正常使用。我按照官方文档给的问题排查手册，发现最终报错为scoat，</description>
      </item>
      
      <item>
        <title>关于ServiceAccount的API Token、ImagePullSecret的实验</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Eserviceaccount%E7%9A%84api-tokenimagepullsecret%E7%9A%84%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Eserviceaccount%E7%9A%84api-tokenimagepullsecret%E7%9A%84%E5%AE%9E%E9%AA%8C/</guid>
        <description>手动创建ServiceAccount的API Token 如下配置创建资源： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVersion:v1kind:Namespacemetadata:name:practice01---apiVersion:v1kind:ServiceAccountmetadata:name:practice01namespace:practice01 查看各个资源 1 2 3 4 5 6 7 kubectl get sa -n practice01 kubectl get secrets -n practice01</description>
      </item>
      
      <item>
        <title>关于镜像源的一些方案</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8E%E9%95%9C%E5%83%8F%E6%BA%90%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%A1%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8E%E9%95%9C%E5%83%8F%E6%BA%90%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%A1%88/</guid>
        <description>Docker镜像源真的是非常让人头疼的东西，想将它们全部塞到自己的Harbor里，然后实现本地环境的高速拉取！！！ 让 K8S 在 GFW 内愉快的航行 doc</description>
      </item>
      
      <item>
        <title>启动Pod时因为flannel报错</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%90%AF%E5%8A%A8pod%E6%97%B6%E5%9B%A0%E4%B8%BAflannel%E6%8A%A5%E9%94%99/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%90%AF%E5%8A%A8pod%E6%97%B6%E5%9B%A0%E4%B8%BAflannel%E6%8A%A5%E9%94%99/</guid>
        <description>报错内容如下： open /run/flannel/subnet.env: no such file or directory 参考资料 open /run/flannel/subnet.env: no such file or directory</description>
      </item>
      
      <item>
        <title>在VS Code上配置K8S插件</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%9C%A8vs-code%E4%B8%8A%E9%85%8D%E7%BD%AEk8s%E6%8F%92%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%9C%A8vs-code%E4%B8%8A%E9%85%8D%E7%BD%AEk8s%E6%8F%92%E4%BB%B6/</guid>
        <description>我本来只是需要一个简简单单的K8S语法提示工具的，但是找到了Visual Studio Code Kubernetes Tools工具，所以就打算配置好试用一下。我没有完全按照教程走</description>
      </item>
      
      <item>
        <title>在实验机上安装Kubernetes</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%9C%A8%E5%AE%9E%E9%AA%8C%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85kubernetes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%9C%A8%E5%AE%9E%E9%AA%8C%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85kubernetes/</guid>
        <description>我为试验机设置了全新的网络环境，完全不必担心镜像下载速度过慢、镜像无法下载的问题。所以相应的教程也非常的清晰明了。 另外需要说明的是，我的所有</description>
      </item>
      
      <item>
        <title>报错：connect was refused</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%8A%A5%E9%94%99connect-was-refused/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%8A%A5%E9%94%99connect-was-refused/</guid>
        <description>报错如下： The connection to the server localhost:8080 was refused - did you specify the right host or port? 是因为我忘记执行如下代码： mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 参考资料 The connection to the server localhost:8080 was refused - did you specify the right host or port?</description>
      </item>
      
      <item>
        <title>排查初始化容器的错误</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%8E%92%E6%9F%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%B9%E5%99%A8%E7%9A%84%E9%94%99%E8%AF%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%8E%92%E6%9F%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AE%B9%E5%99%A8%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
        <description>先使用kubectl describe pod &amp;lt;pod-name&amp;gt;查看初始化容器的详情，主要查看initContainerStatuses字段。也可以</description>
      </item>
      
      <item>
        <title>暴力修改一个节点的hostname</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9A%B4%E5%8A%9B%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84hostname/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9A%B4%E5%8A%9B%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84hostname/</guid>
        <description>有更优雅的方案，我采用了如下方案： 1 2 3 4 5 6 7 8 9 10 11 12 13 # Master上执行 kubectl delete node OLD_NODE # Worker上执行 kubeadm reset # Master上执行 kubeadm token create --print-join-command</description>
      </item>
      
      <item>
        <title>暴力的将一个掉线的节点重新加入会集群</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9A%B4%E5%8A%9B%E7%9A%84%E5%B0%86%E4%B8%80%E4%B8%AA%E6%8E%89%E7%BA%BF%E7%9A%84%E8%8A%82%E7%82%B9%E9%87%8D%E6%96%B0%E5%8A%A0%E5%85%A5%E4%BC%9A%E9%9B%86%E7%BE%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9A%B4%E5%8A%9B%E7%9A%84%E5%B0%86%E4%B8%80%E4%B8%AA%E6%8E%89%E7%BA%BF%E7%9A%84%E8%8A%82%E7%82%B9%E9%87%8D%E6%96%B0%E5%8A%A0%E5%85%A5%E4%BC%9A%E9%9B%86%E7%BE%A4/</guid>
        <description>可能是我的操作失误了，导致我的两个节点掉线了（我可能重启了节点），稍微在网上搜索了下重新将节点加入回集群的方案，没有找到我满意的，所以我采用</description>
      </item>
      
      <item>
        <title>暴力的重新搭建K8S</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9A%B4%E5%8A%9B%E7%9A%84%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BAk8s/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9A%B4%E5%8A%9B%E7%9A%84%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BAk8s/</guid>
        <description>之前的K8S好久没有了，版本有点旧，所以想重新建个新的，执行的指令如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # K8S重置 kubeadm reset # 清除连接文件 rm</description>
      </item>
      
      <item>
        <title>服务发现不是使用环境变量方案实验</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%96%B9%E6%A1%88%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%96%B9%E6%A1%88%E5%AE%9E%E9%AA%8C/</guid>
        <description>出于如下原因，可能不想激活Service的环境变量发现机制： 可能与应用程序的环境变量冲突 太多的环境变量 只想使用DNS等 我目前出于第三个原因。</description>
      </item>
      
      <item>
        <title>权限的罗列方法（可以帮助学习RBAC）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9D%83%E9%99%90%E7%9A%84%E7%BD%97%E5%88%97%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%B8%AE%E5%8A%A9%E5%AD%A6%E4%B9%A0rbac/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9D%83%E9%99%90%E7%9A%84%E7%BD%97%E5%88%97%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%B8%AE%E5%8A%A9%E5%AD%A6%E4%B9%A0rbac/</guid>
        <description>看IngressNginx的文档时，发现了一种RBAC的权限罗列方式，如下： 以下权限授予一个名为ingress-nginx的ClusterR</description>
      </item>
      
      <item>
        <title>查看哪些Kubernetes对象在名称空间里，哪些不在</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9Bkubernetes%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E9%87%8C%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%9C%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9Bkubernetes%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E9%87%8C%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%9C%A8/</guid>
        <description>这个指令用的比较少，记录纯粹是因为好玩： # 在名称空间里 kubectl api-resources --namespaced=true # 不在名称空间里 kubectl api-resources --namespaced=false</description>
      </item>
      
      <item>
        <title>查看容器的metadata.ownerReferences</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E7%9A%84metadata.ownerreferences/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E7%9A%84metadata.ownerreferences/</guid>
        <description>由控制器生成的Pod都有一个metadata.ownerReferences ，该字段用于标识该Pod从属于哪一个ReplicaSet。 用如下</description>
      </item>
      
      <item>
        <title>理解kubectl config view指令的输出及相关的实验</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%90%86%E8%A7%A3kubectl-config-view%E6%8C%87%E4%BB%A4%E7%9A%84%E8%BE%93%E5%87%BA%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%90%86%E8%A7%A3kubectl-config-view%E6%8C%87%E4%BB%A4%E7%9A%84%E8%BE%93%E5%87%BA%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9E%E9%AA%8C/</guid>
        <description>在进行Kubernetes相关的实验时，使用到了该指令，该指令输出如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 apiVersion:v1clusters:- cluster:certificate-authority-data:DATA+OMITTEDserver:https://192.168.23.60:6443name:kubernetescontexts:- context:cluster:kubernetesuser:kubernetes-adminname:kubernetes-admin@kubernetescurrent-context:kubernetes-admin@kuberneteskind:Configpreferences:{}users:- name:kubernetes-adminuser:client-certificate-data:REDACTEDclient-key-data:REDACTED cl</description>
      </item>
      
      <item>
        <title>用于K8S集群的模板配置及对生成的虚拟机的调整</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%94%A8%E4%BA%8Ek8s%E9%9B%86%E7%BE%A4%E7%9A%84%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%AF%B9%E7%94%9F%E6%88%90%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%B0%83%E6%95%B4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%94%A8%E4%BA%8Ek8s%E9%9B%86%E7%BE%A4%E7%9A%84%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%AF%B9%E7%94%9F%E6%88%90%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%B0%83%E6%95%B4/</guid>
        <description>对模板的配置 我在模板上执行了如下指令（凭记忆回忆的）： 配置下网络环境（我在配置模板机时，网络环境还没有搭起来，所以只能走全局代理的方式了） #</description>
      </item>
      
      <item>
        <title>获取将Node加入到集群中的指令</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E8%8E%B7%E5%8F%96%E5%B0%86node%E5%8A%A0%E5%85%A5%E5%88%B0%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E8%8E%B7%E5%8F%96%E5%B0%86node%E5%8A%A0%E5%85%A5%E5%88%B0%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E6%8C%87%E4%BB%A4/</guid>
        <description>忘记了node添加到master时的指令，可以通过如下指令获取 1 2 3 kubeadm token create --print-join-command --ttl 0 20211228后续： 这个指令本来记录在某一篇笔记中，今天需</description>
      </item>
      
      <item>
        <title>记录一次超高速解决Istio问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%B6%85%E9%AB%98%E9%80%9F%E8%A7%A3%E5%86%B3istio%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%B6%85%E9%AB%98%E9%80%9F%E8%A7%A3%E5%86%B3istio%E9%97%AE%E9%A2%98/</guid>
        <description>问题是这样的，我们的项目需要使用到GRpc的9090端口，所以申请运维帮我们暴露一下该端口，等我们自己测试该端口时，发现该端口无法正常使用（</description>
      </item>
      
      <item>
        <title>错误设置kubectl的上下文，导致kubectl工具无法正常使用</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E9%94%99%E8%AF%AF%E8%AE%BE%E7%BD%AEkubectl%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AF%BC%E8%87%B4kubectl%E5%B7%A5%E5%85%B7%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E9%94%99%E8%AF%AF%E8%AE%BE%E7%BD%AEkubectl%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AF%BC%E8%87%B4kubectl%E5%B7%A5%E5%85%B7%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8/</guid>
        <description>我在进行kubectl的上下文相关的实验，在我将当前的上下文切换成我自己创建的上下文时，我执行kubectl get pdos时，会报如下错误： The connection</description>
      </item>
      
    
  </channel>
</rss>