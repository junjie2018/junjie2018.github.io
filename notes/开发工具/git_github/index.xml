<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git_GitHub on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/</link>
    <description>Recent content in Git_GitHub on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Git Hub Token的应用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/git-hub-token%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/git-hub-token%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>一代版本一代神，又得开始研究GitHub Token相关的技术了。 命令行使用 git clone https://github.com/username/repo.git Username: your_username Password: your_token 在CentOS系统上，这个东西是不会缓存的，非常的不</description>
      </item>
      
      <item>
        <title>GitHub生成Token</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%94%9F%E6%88%90token/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%94%9F%E6%88%90token/</guid>
        <description>过程比较简单，直接截图了：</description>
      </item>
      
      <item>
        <title>GitHub的Pull Requst</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%9A%84pull-requst/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%9A%84pull-requst/</guid>
        <description>我fork了一个仓库，做了一些自己的修改，然后发起一个Pull Request，希望该仓库的原作者看到我的修改，然后决定是否采用这些修改。这个</description>
      </item>
      
      <item>
        <title>workdir参数导致docker启动时无法找到脚本</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/workdir%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4docker%E5%90%AF%E5%8A%A8%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/workdir%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4docker%E5%90%AF%E5%8A%A8%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</guid>
        <description>我在本地测试Dockerfile时，习惯性的将ENTRYPOINT写成如下形式： 1 2 3 ENTRYPOINT [&amp;#34;./entrypoint.sh&amp;#34;] 但是如果这样写，在GitHub Actions中将会</description>
      </item>
      
      <item>
        <title>创建Docker Action</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E5%88%9B%E5%BB%BAdocker-action/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E5%88%9B%E5%BB%BAdocker-action/</guid>
        <description>我选择的是将自己创建的Actions和源码放在一起，因为这些Actions使用的复用性挺低的，放在一起避免了创建另一个仓库，非常舒服： 目录结</description>
      </item>
      
      <item>
        <title>简单使用GitHub Actions</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8github-actions/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8github-actions/</guid>
        <description>如下为实验目录及文件： 其中gihub-actions-demo.yml内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name:GitHub Actions Demoon:[push]jobs:Explore-GitHub-Actions:runs-on:ubuntu-lateststeps:- run:echo &amp;#34;🎉 The</description>
      </item>
      
      <item>
        <title>通过GitHub Actions实现博客自动化部署的方案</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E9%80%9A%E8%BF%87github-actions%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9A%84%E6%96%B9%E6%A1%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E9%80%9A%E8%BF%87github-actions%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
        <description>我核心想实现的是：自动的完成笔记源文件到Gitbook源文件到Gitbook编译后文件推送到github仓库的工作。 该工作如果手动完成，有如</description>
      </item>
      
    
  </channel>
</rss>