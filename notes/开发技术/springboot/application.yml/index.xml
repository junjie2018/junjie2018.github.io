<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>application.yml on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/</link>
    <description>Recent content in application.yml on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>@ConfigurationProperties注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3/</guid>
        <description>我整理这部分资料，仅仅是查漏补缺，补充一些我不太熟悉的知识。 Spirng的宽松绑定规则 实体中的hostName可以绑定如下配置： mail.hostName mail.hostname mail.host_name mail.host-name mail.HOSTNAME 三</description>
      </item>
      
      <item>
        <title>@ConfigurationProperties的一种写法（待验证）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E7%9A%84%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95%E5%BE%85%E9%AA%8C%E8%AF%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E7%9A%84%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95%E5%BE%85%E9%AA%8C%E8%AF%81/</guid>
        <description>如下代码： 1 2 3 4 5 6 7 8 9 @Bean @ConfigurationProperties(&amp;#34;spring.datasource&amp;#34;) public DataSource dataSource(){ return new DruidDataSource(); } 这种写法会让返回的DataSource Bean与spring.datasource下的配置一一</description>
      </item>
      
      <item>
        <title>application.yml中的一些语法细节</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/</guid>
        <description>我在开发代码生成工具时，大量使用了application.yml进行配置，这次看课程的时候，又看到了相关的知识点，发现有一些细节我自己之前也</description>
      </item>
      
      <item>
        <title>application.yml更优雅写法及遇到的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E6%9B%B4%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E6%9B%B4%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>我在重构我的代码生成工具，之前有如下代码： 1 2 3 4 5 6 tools:template-directory:&amp;#39;classpath:templates/&amp;#39;enum-comment-pattern:&amp;#39;^([A-Za-z\u4e00-\u9fa5 ]{1,})（(([A-Za-z0-9-]+：[\u4e00-\u9fa5A-Za-</description>
      </item>
      
      <item>
        <title>ConfigurationProperties注解在方法上</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3%E5%9C%A8%E6%96%B9%E6%B3%95%E4%B8%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3%E5%9C%A8%E6%96%B9%E6%B3%95%E4%B8%8A/</guid>
        <description>今天遇到如下需求：我需要将如下application.yml配置读取到相应的Properties配置文件中： 1 2 3 4 5 6 7 8 9 templates:- template:&amp;#34;${beanClass}.ftl&amp;#34;module:${project.modules.server}packet:${packages.service}packets-to-import:- ${packages.request}- ${packages.response} 这个非</description>
      </item>
      
      <item>
        <title>spring-boot-configuration-processor包与构建插件的配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring-boot-configuration-processor%E5%8C%85%E4%B8%8E%E6%9E%84%E5%BB%BA%E6%8F%92%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring-boot-configuration-processor%E5%8C%85%E4%B8%8E%E6%9E%84%E5%BB%BA%E6%8F%92%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
        <description>为了编写配置方便，我们引入了如下的jar包： 1 2 3 4 5 6 7 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; 如果进行如上配置，则该jar包会打入我们最终可运行的jar包中，这样会浪</description>
      </item>
      
      <item>
        <title>spring.main.allow-bean-definition-overriding配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring.main.allow-bean-definition-overriding%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring.main.allow-bean-definition-overriding%E9%85%8D%E7%BD%AE/</guid>
        <description>是这样的，我在合并分支的时候，删除了原来的源码，从Git上拉取了一份新的代码，然后再Idea导入该源码并启动该项目，结果再启动的过程中一致报</description>
      </item>
      
      <item>
        <title>开发自己的Convert，用在application.yml解析中</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84convert%E7%94%A8%E5%9C%A8application.yml%E8%A7%A3%E6%9E%90%E4%B8%AD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84convert%E7%94%A8%E5%9C%A8application.yml%E8%A7%A3%E6%9E%90%E4%B8%AD/</guid>
        <description>先直接呈现各种调试后的代码吧 application.yml 1 2 3 4 tmp2:weight:10kg Weight.java 1 2 3 4 5 6 7 8 @Data @AllArgsConstructor @NoArgsConstructor public class Weight { private Long weight; } WeightConvert.java 1 2 3 4 5 6 7 8 9 10 11 public class WeightConverter implements Converter&amp;lt;String, Weight&amp;gt; { @Override public Weight convert(String source) { if (source.endsWith(&amp;#34;kg&amp;#34;)) { return new</description>
      </item>
      
      <item>
        <title>解析yaml文件的时候维持文件中字段的顺序</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%A7%A3%E6%9E%90yaml%E6%96%87%E4%BB%B6%E7%9A%84%E6%97%B6%E5%80%99%E7%BB%B4%E6%8C%81%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AD%97%E6%AE%B5%E7%9A%84%E9%A1%BA%E5%BA%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%A7%A3%E6%9E%90yaml%E6%96%87%E4%BB%B6%E7%9A%84%E6%97%B6%E5%80%99%E7%BB%B4%E6%8C%81%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AD%97%E6%AE%B5%E7%9A%84%E9%A1%BA%E5%BA%8F/</guid>
        <description>之前开发一个功能时需要用到yaml文件记录配置信息，刚开始使用snakeyml，但是snakeyml有个小小的问题，就是它解析后得到的map</description>
      </item>
      
      <item>
        <title>读取application.yml的配置信息到Bean</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%AF%BB%E5%8F%96application.yml%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%88%B0bean/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%AF%BB%E5%8F%96application.yml%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%88%B0bean/</guid>
        <description>添加依赖： 1 2 3 4 5 6 7 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; 开发application.yml: 1 2 3 4 5 6 7 8 9 project-config:template-di</description>
      </item>
      
      <item>
        <title>配置文件中的classpath配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84classpath%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84classpath%E9%85%8D%E7%BD%AE/</guid>
        <description>我注意到MyBatis-Plus的配置文件中有如下配置： 1 2 3 4 mybatis-plus:mapper-locations:classpath:mapper/*Mapper.xml 我觉得在配置文件中使用classpath:表示当前项目的资源文件是一件非常</description>
      </item>
      
    
  </channel>
</rss>