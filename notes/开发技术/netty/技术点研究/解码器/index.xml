<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>解码器 on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/</link>
    <description>Recent content in 解码器 on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>实现ChannelOutboundHandlerAdapter需要注意的点</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E5%AE%9E%E7%8E%B0channeloutboundhandleradapter%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E5%AE%9E%E7%8E%B0channeloutboundhandleradapter%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</guid>
        <description>1 2 3 4 5 6 7 8 9 @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception { UnixTime m = (UnixTime) msg; ByteBuf encode = ctx.alloc().buffer(4); encode.writeInt((int) m.value); ctx.write(encode, promise); } 几点需要注意的地方： 调用ctx的write方法时需要将promise传</description>
      </item>
      
      <item>
        <title>研究ByteToMessageDecoder实现</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6bytetomessagedecoder%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6bytetomessagedecoder%E5%AE%9E%E7%8E%B0/</guid>
        <description>565行代码，感觉是一个大工程呀~ 首先是MERGE_CUMULATOR和COMPOSITE_CUMULATOR两个成员变量，按照JavaDo</description>
      </item>
      
      <item>
        <title>研究CodecOutputList实现</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6codecoutputlist%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6codecoutputlist%E5%AE%9E%E7%8E%B0/</guid>
        <description>先是一个什么都不做的CodecOutputListRecycler，代码如下： 1 2 3 4 5 6 7 8 private static final CodecOutputListRecycler NOOP_RECYCLER = new CodecOutputListRecycler() { @Override public void recycle(CodecOutputList object) { // drop on the floor and let the</description>
      </item>
      
    
  </channel>
</rss>