<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python学习手册 on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/</link>
    <description>Recent content in Python学习手册 on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    
        <atom:link href="http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>001.Python可以用来做什么</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/001.python%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/001.python%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88/</guid>
        <description>系统编程 图形用户界面（GUI） Internet脚本 组件继承 数据库编程 快速原型 数值计算和科学计算编程 更多内容：游戏、图像、数据挖掘、机器人、E</description>
      </item>
      
      <item>
        <title>002.第01章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/002.%E7%AC%AC01%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/002.%E7%AC%AC01%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>1.人们选择Python的6个主要原因是什么？ 软件质量、开发者效率、程序可移植性、组件集成和编码乐趣，其中软件质量和效率这两条是人们选择Py</description>
      </item>
      
      <item>
        <title>003.字节码编译</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/003.%E5%AD%97%E8%8A%82%E7%A0%81%E7%BC%96%E8%AF%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/003.%E5%AD%97%E8%8A%82%E7%A0%81%E7%BC%96%E8%AF%91/</guid>
        <description>如果Python进程在机器上拥有写入权限，那么它将把程序的字节码保存为一个以pyc为扩展名的文件（&amp;quot;.pyc&amp;quot;就是编译过</description>
      </item>
      
      <item>
        <title>004.第02章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/004.%E7%AC%AC02%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/004.%E7%AC%AC02%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>5.请列举两个或多个Python标准执行模型的变体的名字。 Psyco、Shed Skin以及冻结二进制文件都是执行模型的变体。CPython、</description>
      </item>
      
      <item>
        <title>005.简单理解Python中的模块</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/005.%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3python%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/005.%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3python%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
        <description>用简单的术语来讲，每一个以扩展名.py结尾的Python源代码文件都是一个模块。不需要任何特殊的代码或语法来使文件成为模块：任何何这样的文件</description>
      </item>
      
      <item>
        <title>006.Python的内置对象</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/006.python%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/006.python%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid>
        <description>数字 字符串 列表 字典 元祖 文件 集合 其他核心类型：类型、None、布尔型 程序单元类型：函数、模块、类 Python实现相关类型：已编译代码、调用栈跟</description>
      </item>
      
      <item>
        <title>007.第26章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/007.%E7%AC%AC26%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/007.%E7%AC%AC26%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>1.Python的POP的主要的意义是什么？ OOP是关于代码重用：通过分解代码、最小化代码的冗余以及对已有代码进行定制来编写程序，而不是原处</description>
      </item>
      
      <item>
        <title>008.第27章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/008.%E7%AC%AC27%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/008.%E7%AC%AC27%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>1.类和模块之间有什么联系？ 类总是位于模块中。类是模块对象的属性。类和模块都是命名空间，但类对应于语句（而不是整个文件），而且支持多个实例、</description>
      </item>
      
      <item>
        <title>009.__str__与__repr__</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/009.__str__%E4%B8%8E__repr__/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/009.__str__%E4%B8%8E__repr__/</guid>
        <description>从技术上来讲，__str__被print和str调用所青睐，而__repr__被当做__str__的一种退路以及在其他的上下文中。尽管两者被</description>
      </item>
      
      <item>
        <title>010.第28章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/010.%E7%AC%AC28%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/010.%E7%AC%AC28%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>1.当我们从shelve获取一个Manager对象并打印它的时候，显示格式逻辑来自何处？ 在类的最终版本中，Manager最终从另一个clas</description>
      </item>
      
      <item>
        <title>011.第29章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/011.%E7%AC%AC29%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/011.%E7%AC%AC29%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>1.什么是抽象父类？ 抽象类是调用了一个方法，但却没有继承或定义该方法的类。抽象类预期该方法由子类填补。在具体行为只有当一个特定子类被编写时才</description>
      </item>
      
      <item>
        <title>012.理解Python中迭代的一些知识</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/012.%E7%90%86%E8%A7%A3python%E4%B8%AD%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/012.%E7%90%86%E8%A7%A3python%E4%B8%AD%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</guid>
        <description>从技术角度来讲，迭代上下文是通过将一个可迭代对象传入内置函数iter，并尝试调用_iter_方法来实现的，而这种方法应该返回一个迭代器对象。</description>
      </item>
      
      <item>
        <title>013.初次接触生成器函数</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/013.%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/013.%E5%88%9D%E6%AC%A1%E6%8E%A5%E8%A7%A6%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0/</guid>
        <description>任何包含yield语句的函数都被转换成了一个生成器函数。当被调用时，它返回一个新的生成器对象，并自动记录局部作用域与代码位置。一个被自动创建</description>
      </item>
      
      <item>
        <title>014.第30章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/014.%E7%AC%AC30%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/014.%E7%AC%AC30%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>1.哪两种运算符重载方法可以支持类中的迭代？ __getitem__、__iter__ 2.哪两种运算符重载方法用于处理打印，并且分别在哪些场景</description>
      </item>
      
      <item>
        <title>015.第31章习题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/015.%E7%AC%AC31%E7%AB%A0%E4%B9%A0%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/015.%E7%AC%AC31%E7%AB%A0%E4%B9%A0%E9%A2%98/</guid>
        <description>1.什么是多继承？ 当类从一个以上的父类中继承时，就发生了多继承。把多个类代码的包混合在一起是十分有用的。在class语句头部的从左至右的顺序</description>
      </item>
      
      <item>
        <title>016.两端不是很理解的代码</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/016.%E4%B8%A4%E7%AB%AF%E4%B8%8D%E6%98%AF%E5%BE%88%E7%90%86%E8%A7%A3%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E7%AC%94%E8%AE%B0/python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/016.%E4%B8%A4%E7%AB%AF%E4%B8%8D%E6%98%AF%E5%BE%88%E7%90%86%E8%A7%A3%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
        <description>这两段代码都可以抑制警告，但是我不知道其中的原理。 1 2 3 4 5 6 7 8 9 10 import requests from requests.packages import urllib3 urllib3.disable_warnings() response = requests.get(&amp;#39;https://192.168.19.10:38080&amp;#39;, verify=False) print(response.text) 1 2 3 4 5 6 7 8 9 import requests, logging logging.captureWarnings(True) response = requests.get(&amp;#39;https://192.168.19.10:38080&amp;#39;, verify=False) print(response.text)</description>
      </item>
      
    
  </channel>
</rss>