<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小桀的开发笔记 on 小桀的笔记本</title>
    <link>http://junjie2018.github.io/</link>
    <description>Recent content in 小桀的开发笔记 on 小桀的笔记本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 26 Jan 2020 04:15:05 +0900</lastBuildDate>
    
        <atom:link href="http://junjie2018.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>00.本次实验想达成的目标</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/00.%E6%9C%AC%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%83%B3%E8%BE%BE%E6%88%90%E7%9A%84%E7%9B%AE%E6%A0%87/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/00.%E6%9C%AC%E6%AC%A1%E5%AE%9E%E9%AA%8C%E6%83%B3%E8%BE%BE%E6%88%90%E7%9A%84%E7%9B%AE%E6%A0%87/</guid>
        <description>按优先级整理： 实现UserMapper.java中定义的方法与UserMapper.xml中的sql实现间的相互跳转。 目前是无法实现这个效果</description>
      </item>
      
      <item>
        <title>01.配置MyBatis-Plus测试环境</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/01.%E9%85%8D%E7%BD%AEmybatis-plus%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/01.%E9%85%8D%E7%BD%AEmybatis-plus%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
        <description>本次实验我准备使用H2数据库，虽然我现在有足够多的脚本快速启动一个MySQL、PG，但是这毕竟会增加我下次启动该项目时的时间成本。H2数据库</description>
      </item>
      
      <item>
        <title>02.实现Mapper.java与Mapper.xml中方法的跳转</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/02.%E5%AE%9E%E7%8E%B0mapper.java%E4%B8%8Emapper.xml%E4%B8%AD%E6%96%B9%E6%B3%95%E7%9A%84%E8%B7%B3%E8%BD%AC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/02.%E5%AE%9E%E7%8E%B0mapper.java%E4%B8%8Emapper.xml%E4%B8%AD%E6%96%B9%E6%B3%95%E7%9A%84%E8%B7%B3%E8%BD%AC/</guid>
        <description>Idea安装Free MyBatis Plugin插件即可 参考资料 idea中生成mapper xml文件，快速从代码跳转到mapper及从mapper返回代码</description>
      </item>
      
      <item>
        <title>03.实现mapper.xml文件的格式化及去除黄色警告</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/03.%E5%AE%9E%E7%8E%B0mapper.xml%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8F%8A%E5%8E%BB%E9%99%A4%E9%BB%84%E8%89%B2%E8%AD%A6%E5%91%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%86%E6%88%90mybatis-plus%E5%88%B0springboot%E5%8F%8A%E5%AF%B9idea%E7%9A%84%E9%85%8D%E7%BD%AE/03.%E5%AE%9E%E7%8E%B0mapper.xml%E6%96%87%E4%BB%B6%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8F%8A%E5%8E%BB%E9%99%A4%E9%BB%84%E8%89%B2%E8%AD%A6%E5%91%8A/</guid>
        <description>如图打开数据源视图 如图添加一个H2数据源 直接将application.yml中的url填写到URL处，界面会发生变化，将用户名改为和appl</description>
      </item>
      
      <item>
        <title>@AutoConfigurationPackage注解的意义</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/autoconfigurationpackage%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%84%8F%E4%B9%89/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/autoconfigurationpackage%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%84%8F%E4%B9%89/</guid>
        <description>AutoConfigurationPackage注解代码如下： 1 2 3 4 @Import(AutoConfigurationPackages.Registrar.class) public @interface AutoConfigurationPackage {} 这个注解的功能是： 利用Register给容器导入一系列组件 将</description>
      </item>
      
      <item>
        <title>@Bean配置时一段经典的源码</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/bean%E9%85%8D%E7%BD%AE%E6%97%B6%E4%B8%80%E6%AE%B5%E7%BB%8F%E5%85%B8%E7%9A%84%E6%BA%90%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/bean%E9%85%8D%E7%BD%AE%E6%97%B6%E4%B8%80%E6%AE%B5%E7%BB%8F%E5%85%B8%E7%9A%84%E6%BA%90%E7%A0%81/</guid>
        <description>如下代码： 1 2 3 4 5 6 7 8 @Bean @ConditionalOnBean(MultipartResolver.class) @ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) public MultipartResolver multipartResolver(MultipartResolver resolver) { return resolver; } 这段配置的含义是这样的，如果容器中有dispatcherServlet的bean，容器中</description>
      </item>
      
      <item>
        <title>@ComponentScan中使用filter</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/componentscan%E4%B8%AD%E4%BD%BF%E7%94%A8filter/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/componentscan%E4%B8%AD%E4%BD%BF%E7%94%A8filter/</guid>
        <description>我之所以多这个注解感兴趣，是因为最近开到SpringBootApplication这个注解继承的注解就配置了Filter。 我认为相关的知识我</description>
      </item>
      
      <item>
        <title>@Conditional注解实现条件注入</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/conditional%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/conditional%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5/</guid>
        <description>SpringBoot中，更多的是使用已经高度开发的一系列条件注解，第一次接触Spring的条件注解，没想到还需要写实现类。 1 2 3 4 5 6 7 8 9</description>
      </item>
      
      <item>
        <title>@ConfigurationProperties注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3/</guid>
        <description>我整理这部分资料，仅仅是查漏补缺，补充一些我不太熟悉的知识。 Spirng的宽松绑定规则 实体中的hostName可以绑定如下配置： mail.hostName mail.hostname mail.host_name mail.host-name mail.HOSTNAME 三</description>
      </item>
      
      <item>
        <title>@ConfigurationProperties的一种写法（待验证）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E7%9A%84%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95%E5%BE%85%E9%AA%8C%E8%AF%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E7%9A%84%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95%E5%BE%85%E9%AA%8C%E8%AF%81/</guid>
        <description>如下代码： 1 2 3 4 5 6 7 8 9 @Bean @ConfigurationProperties(&amp;#34;spring.datasource&amp;#34;) public DataSource dataSource(){ return new DruidDataSource(); } 这种写法会让返回的DataSource Bean与spring.datasource下的配置一一</description>
      </item>
      
      <item>
        <title>@EnableFeignClients中没有配置backPackages，导致找不到客户端</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/enablefeignclients%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%85%8D%E7%BD%AEbackpackages%E5%AF%BC%E8%87%B4%E6%89%BE%E4%B8%8D%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/enablefeignclients%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%85%8D%E7%BD%AEbackpackages%E5%AF%BC%E8%87%B4%E6%89%BE%E4%B8%8D%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
        <description>我的客户端放在com.sdstc.auth.client下，我代码的包结构如下： 默认情况下，我需要将我的启动类放在com.sdstc下才能够</description>
      </item>
      
      <item>
        <title>@ImportResource导入一个bean.xml文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/importresource%E5%AF%BC%E5%85%A5%E4%B8%80%E4%B8%AAbean.xml%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/importresource%E5%AF%BC%E5%85%A5%E4%B8%80%E4%B8%AAbean.xml%E6%96%87%E4%BB%B6/</guid>
        <description>@ImportResource多用在项目中存在老旧的Spring项目（我目前基本上没有遇到过这种情况） 1 2 3 @ImportResource(&amp;#34;classpath:beans.xml&amp;#34;) 我使用这两个注解的次数非常的少</description>
      </item>
      
      <item>
        <title>@Import与ImportSelector与ImportBeanDefinitionRegistar</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/import%E4%B8%8Eimportselector%E4%B8%8Eimportbeandefinitionregistar/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/import%E4%B8%8Eimportselector%E4%B8%8Eimportbeandefinitionregistar/</guid>
        <description>@Import创建出来的组件，组件的名称为其全类名。这个注解可以用在将第三方的Bean注册到Spring Context。这种方式导入相对于J</description>
      </item>
      
      <item>
        <title>@Profile注解的应用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/profile%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/profile%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>@Profile注解类型于@Conditional，但是它仅针对当前运行的环境，我觉得这个东西在生产开发中使用的频率非常的低，几乎没有使用的</description>
      </item>
      
      <item>
        <title>@PropertySouce注解需要注意的地方</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/propertysouce%E6%B3%A8%E8%A7%A3%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/propertysouce%E6%B3%A8%E8%A7%A3%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
        <description>@PropertySource有如下注意事项： @PropertySource目前也是支持yml文件的，我看网上说只支持properties文</description>
      </item>
      
      <item>
        <title>@Repository和@Mapper的差别</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/repository%E5%92%8Cmapper%E7%9A%84%E5%B7%AE%E5%88%AB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/repository%E5%92%8Cmapper%E7%9A%84%E5%B7%AE%E5%88%AB/</guid>
        <description>我尝试使用@Repository代替@Mapper，结果发现应用根本就无法启动起来。这个问题我之前实验中貌似不存在，在我SpringBoot</description>
      </item>
      
      <item>
        <title>@Scope与@Lazy注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/scope%E4%B8%8Elazy%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/scope%E4%B8%8Elazy%E6%B3%A8%E8%A7%A3/</guid>
        <description>Scope可配置的值如下： 1 2 3 4 5 6 7 ConfigurableBeanFactory#SCOPE_PROTOTYPE：多实例 Configu</description>
      </item>
      
      <item>
        <title>@Select中特殊字符导致的错误</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/select%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/select%E4%B8%AD%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
        <description>该问题由同事定位并修复，我在一旁参观了整个过程。我们的代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @Select(&amp;#34;&amp;lt;script&amp;gt;&amp;#34; + &amp;#34; SELECT * FROM t_user where is_delete = 0&amp;#34; + &amp;#34;</description>
      </item>
      
      <item>
        <title>@Skip注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/skip%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/skip%E6%B3%A8%E8%A7%A3/</guid>
        <description>@Skip注释用在ChannelHandler的实现类的方法上，程序运行的过程中，如果某个handler实现中的方法被@Skip注释了，则此</description>
      </item>
      
      <item>
        <title>@TableField处理表中不存在的字段</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/tablefield%E5%A4%84%E7%90%86%E8%A1%A8%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E5%AD%97%E6%AE%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/tablefield%E5%A4%84%E7%90%86%E8%A1%A8%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E5%AD%97%E6%AE%B5/</guid>
        <description>代码如下： 1 2 3 @TableField(exist = false) 开发一些Demo时用到了这个技术，记录一下。 参考资料 mybatis怎么忽略映射字段</description>
      </item>
      
      <item>
        <title>@Valid与@Validation的区别</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/valid%E4%B8%8Evalidation%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/valid%E4%B8%8Evalidation%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>@Valid与@Validation的区别： @Validation支持分组功能，@Valid不支持分组功能 @Validated用于类型、方法</description>
      </item>
      
      <item>
        <title>Alpine Linux 3.11安装常用工具包</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/alpine/alpine-linux-3.11%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8C%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/alpine/alpine-linux-3.11%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8C%85/</guid>
        <description>先给条指令，用来查看当前系统的发行版本（这条蛮好用的，目前我的系统都能用这个）： cat /etc/issue 添加curl apk add curl 添加telnet apk add busybox-extras 参考资料 如何查看</description>
      </item>
      
      <item>
        <title>alt&#43;f快捷键不好使了</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/alt&#43;f%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8D%E5%A5%BD%E4%BD%BF%E4%BA%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/alt&#43;f%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%8D%E5%A5%BD%E4%BD%BF%E4%BA%86/</guid>
        <description>我公司和家里的电脑上同时配置了alt + f快捷键，用来快速打开文件在资源浏览器中的位置。在公司的电脑上我可以在任意打开的文件，或者目录树中任意</description>
      </item>
      
      <item>
        <title>application.yml中的一些语法细节</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/</guid>
        <description>我在开发代码生成工具时，大量使用了application.yml进行配置，这次看课程的时候，又看到了相关的知识点，发现有一些细节我自己之前也</description>
      </item>
      
      <item>
        <title>application.yml更优雅写法及遇到的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E6%9B%B4%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/application.yml%E6%9B%B4%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>我在重构我的代码生成工具，之前有如下代码： 1 2 3 4 5 6 tools:template-directory:&amp;#39;classpath:templates/&amp;#39;enum-comment-pattern:&amp;#39;^([A-Za-z\u4e00-\u9fa5 ]{1,})（(([A-Za-z0-9-]+：[\u4e00-\u9fa5A-Za-</description>
      </item>
      
      <item>
        <title>Array、Set、List互转的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/arraysetlist%E4%BA%92%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/arraysetlist%E4%BA%92%E8%BD%AC%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>打算下次再使用的时候系统整理一下这些知识，目前的话我总是在需要的时候才查找这些资料，查找后又没有整理，所以下次用的时候还需要查，非常的不方便</description>
      </item>
      
      <item>
        <title>B450M主板升级BIOS</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/physicalmachine/b450m%E4%B8%BB%E6%9D%BF%E5%8D%87%E7%BA%A7bios/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/physicalmachine/b450m%E4%B8%BB%E6%9D%BF%E5%8D%87%E7%BA%A7bios/</guid>
        <description>官网下载最新版BIOS https://cn.msi.com/Motherboard/support/B450M-MORTAR.html 格式化U盘为FAT32（很关键，已经踩过坑了），然后解压官网下载的压缩包，将压缩包内的2~3个文件拷贝到U盘的根目录</description>
      </item>
      
      <item>
        <title>B450M主板开启AMD-V</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/physicalmachine/b450m%E4%B8%BB%E6%9D%BF%E5%BC%80%E5%90%AFamd-v/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/physicalmachine/b450m%E4%B8%BB%E6%9D%BF%E5%BC%80%E5%90%AFamd-v/</guid>
        <description>BIOS系统中选择OverClocking（应该是这个吧，忘记了，是个大项），然后选择CPU配置，然后选择Svmmode，选择开启。 参考资料</description>
      </item>
      
      <item>
        <title>B450M主板线如何插</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/physicalmachine/b450m%E4%B8%BB%E6%9D%BF%E7%BA%BF%E5%A6%82%E4%BD%95%E6%8F%92/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/physicalmachine/b450m%E4%B8%BB%E6%9D%BF%E7%BA%BF%E5%A6%82%E4%BD%95%E6%8F%92/</guid>
        <description>参考资料 微星b450m迫击炮主板接线图解</description>
      </item>
      
      <item>
        <title>bat脚本后台启动程序</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/bat%E8%84%9A%E6%9C%AC%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/bat%E8%84%9A%E6%9C%AC%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/</guid>
        <description>我以为这个是一个比较简单的工作，像Linux中调用一下nohup就好了，但是没想到方案中有很多代码我都不太懂： 1 2 3 4 5 6 7 @echo off if &amp;#34;%1&amp;#34; == &amp;#34;h&amp;#34; goto begin</description>
      </item>
      
      <item>
        <title>Bean Validation</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/bean-validation/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/bean-validation/</guid>
        <description>最近研究基于注解的参数校验时接触了一些新的概念，整理一下。 Bean Validation Bean Validation是一整套关于数据验证的规范，JSR 303–Bean Val</description>
      </item>
      
      <item>
        <title>BeanPostProcessor源码分析（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/beanpostprocessor%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/beanpostprocessor%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description>BeanPostProcessor是许多注解、Aware实现的最核心的技术，所以研究它的实现原理是非常有价值的，利于后面其他知识的学习。</description>
      </item>
      
      <item>
        <title>bindFuture中的channel</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/bindfuture%E4%B8%AD%E7%9A%84channel/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/bindfuture%E4%B8%AD%E7%9A%84channel/</guid>
        <description>今天在看一个Netty框架的源码时，看到了如下的代码： 1 2 3 4 5 6 Channel channel = serverBootstrap.bind() .sync() .channel(); ALL_CHANNELS.add(serverChannel); ALL_CHANNELS变量的作用是收集所有的Channel</description>
      </item>
      
      <item>
        <title>BookMenuBoundle简单配置的实验</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/bookmenuboundle%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E7%9A%84%E5%AE%9E%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/bookmenuboundle%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E7%9A%84%E5%AE%9E%E9%AA%8C/</guid>
        <description>为了尽量还原我GitBook的界面风格，我决定使用Hugo Book主题，按照如下代码启动了Hugo，发现整体上还是蛮让人满意的，左侧为目录树</description>
      </item>
      
      <item>
        <title>Boostrap</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/boostrap/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/boostrap/</guid>
        <description>Bootstrap option方法：设置ChannelOption，其将被应用到每个新创建的Channel的ChannelConfig。这些选项将会通过bi</description>
      </item>
      
      <item>
        <title>Buffer、Channel与Selector</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/bufferchannel%E4%B8%8Eselector/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/bufferchannel%E4%B8%8Eselector/</guid>
        <description>理解同步不阻塞模型 Java NIO（同步不阻塞）：服务器实现模式为一个线程处理多个请求（链接），即客户端发送的连接请求会注册到多路复用器上，多路复用</description>
      </item>
      
      <item>
        <title>CAS相关资料整理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/cas/cas%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/cas/cas%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</guid>
        <description>官网</description>
      </item>
      
      <item>
        <title>CentOS 7搭建Kubernetes</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/centos-7%E6%90%AD%E5%BB%BAkubernetes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/centos-7%E6%90%AD%E5%BB%BAkubernetes/</guid>
        <description>上一次实验中，让我最难以忘怀的每次重新搭建Kubernetes集群时都需要漫长的等待，即使我用了国内的仓库，也需要不停的等待。单纯的搭建K8</description>
      </item>
      
      <item>
        <title>CentOS 8安装VirtualBox和Vagrant，并配置Vagrant</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E5%AE%89%E8%A3%85virtualbox%E5%92%8Cvagrant%E5%B9%B6%E9%85%8D%E7%BD%AEvagrant/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E5%AE%89%E8%A3%85virtualbox%E5%92%8Cvagrant%E5%B9%B6%E9%85%8D%E7%BD%AEvagrant/</guid>
        <description>安装VirtualBox和Vagrant VirutalBox和Vagrant安装方式有很多，我比较推荐的是下载rpm包的方式安装。这样的Vi</description>
      </item>
      
      <item>
        <title>CentOS 8常用软件代理设置</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</guid>
        <description>关于代理的问题，现在已经让我非常的头疼了，我计划还是研究一下软路由，尽量让我的工具机流量全部走外网。另外，我可能还需要升级一下我搭梯子的能力</description>
      </item>
      
      <item>
        <title>CentOS 8拨号上网</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91/</guid>
        <description>操作步骤 指令如下 nmcli conn add con-name pppoe-home type pppoe ifname enp2s0 username 13022052202D396 password 123456 nmcli conn up pppoe-home nmcli conn modify pppoe-home con-name pppoe nmcli conn add con-name enp5s0 ifname enp4s0 type ethernet 我以前一直没有注意到，使用拨号上网的时候，竟然会多出来个这么</description>
      </item>
      
      <item>
        <title>CentOS 8配置软件源</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E9%85%8D%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%BA%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-8%E9%85%8D%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%BA%90/</guid>
        <description>我一直以为CentOS在下载软件是会就近选择软件源，但是我今天更新软件时发现速度很慢，所以干脆一不做二不休，直接将软件源替换为国内的。 操作步</description>
      </item>
      
      <item>
        <title>CentOS yum设置代理</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-yum%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos-yum%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
        <description>vim /etc/yum.conf proxy=http://192.168.13.113:1080</description>
      </item>
      
      <item>
        <title>Centos7 YUM提示语法错误</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos7-yum%E6%8F%90%E7%A4%BA%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos7-yum%E6%8F%90%E7%A4%BA%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF/</guid>
        <description>其实就是因为我将python的软连接换成了python3.6，改回来就好了。 参考资料 解决 CentOS 7 使用 yum 命令提示语法错误</description>
      </item>
      
      <item>
        <title>CentOS7中安装pip</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/centos7%E4%B8%AD%E5%AE%89%E8%A3%85pip/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/centos7%E4%B8%AD%E5%AE%89%E8%A3%85pip/</guid>
        <description>使用yum install python-pip安装的pip甚至没有办法执行pip install --upgrade pip，这就导致这个版本的pip没有办法做任何事。最终找到下面的方案安</description>
      </item>
      
      <item>
        <title>CentOS修改主机名称</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%A7%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%A7%B0/</guid>
        <description>这个是我目前找到的最优雅的方式了，需要重启后生效（重启后命令提示符前的主机名也会改变）： hostnamectl set-hostname kerrydb 参考资料 Centos 7修改hostname浅析</description>
      </item>
      
      <item>
        <title>CentOS关闭防火墙</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/</guid>
        <description>这是一个非常简单的指令，但是我总是拼不对，干脆记下来算了。 systemctl stop firewalld systemctl disable firewalld 20210502后续： 我今天才知道firewalld和iptables</description>
      </item>
      
      <item>
        <title>CentOS升级内核到5.12</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%88%B05.12/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%88%B05.12/</guid>
        <description>操作步骤 常用指令 uanme -a # 查看当前内核版本 cat /etc/redhat-release # 查看当前系统版本 rpm -qa | grep kernel # 查看已安装的内核 yum repolist # 查看yum当前配置了哪些源 安装elrepo仓库</description>
      </item>
      
      <item>
        <title>CentOS和Window查看网卡是百兆还是千兆</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%92%8Cwindow%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%98%AF%E7%99%BE%E5%85%86%E8%BF%98%E6%98%AF%E5%8D%83%E5%85%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%92%8Cwindow%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E6%98%AF%E7%99%BE%E5%85%86%E8%BF%98%E6%98%AF%E5%8D%83%E5%85%86/</guid>
        <description>参考资料 Linux查看网卡是千兆还是万兆网卡 查看网卡是百兆还是千兆</description>
      </item>
      
      <item>
        <title>CentOS安装Python 3.x</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/centos%E5%AE%89%E8%A3%85python-3.x/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/centos%E5%AE%89%E8%A3%85python-3.x/</guid>
        <description>CentOS安装Python实际上有更简单的方法，就是通过yum安装，但是这种方法安装的版本和我win机器的版本不一致，所以我选择了用源码安</description>
      </item>
      
      <item>
        <title>CentOS快速配置多台机器为静态地址</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%BA%E9%9D%99%E6%80%81%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%BA%E9%9D%99%E6%80%81%E5%9C%B0%E5%9D%80/</guid>
        <description>指令如下，这是我目前找到的最优雅，最快速的方法： nmcli connection modify eth0 \ ipv4.addresses 192.168.27.139/24 \ ipv4.dns 192.168.27.22 \ ipv4.method manual \ ipv4.gateway 192.168.27.22 \ connection.autoconnect yes nmcli c up eth0 nmcli connection modify eth0 \ ipv4.addresses 192.168.27.139/24 \ ipv4.dns 192.168.20.21 \ ipv4.method manual \ ipv4.gateway 192.168.27.1 \ connection.autoconnect yes nmcli c up eth0</description>
      </item>
      
      <item>
        <title>CentOS添加默认路由</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E8%B7%AF%E7%94%B1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E6%B7%BB%E5%8A%A0%E9%BB%98%E8%AE%A4%E8%B7%AF%E7%94%B1/</guid>
        <description>事情的起因是这样的，我发现我Vagrant的虚拟机都会有两张网卡，经过分析我发现第一张网卡是用于nat，第二张网卡是用于我设置的host_o</description>
      </item>
      
      <item>
        <title>CentOS禁用网卡</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E7%A6%81%E7%94%A8%E7%BD%91%E5%8D%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E7%A6%81%E7%94%A8%E7%BD%91%E5%8D%A1/</guid>
        <description>我使用的是ip link set enp0s3 up，效果非常好。另外ifdown enp0s8指令不好使，文档里也说了，ifdown不支持以enp打头的网卡，这个坑被我</description>
      </item>
      
      <item>
        <title>CentOS编译R8125网卡驱动</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E7%BC%96%E8%AF%91r8125%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E7%BC%96%E8%AF%91r8125%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</guid>
        <description>我现在最后悔的事情就是买软路由的时候选了R8125 2.5G网卡，这个网卡是在是太折腾人了。CentOS、PVE上都需要手动的编译安装驱动，E</description>
      </item>
      
      <item>
        <title>CentOS设置时区</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/</guid>
        <description>我开发的点外卖提醒机器人，在半夜提醒点外卖了，我的定时脚本如下： 30,32,35 11 * * 1-6 /root/Software/launch/dist/launch 45,50 17 * * 1-6 /root/Software/launch/dist/launch 我定时任务肯定是没有任何问题的，所以感觉是服务器时间</description>
      </item>
      
      <item>
        <title>CentOS设置静态ip（已废弃）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%B7%B2%E5%BA%9F%E5%BC%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip%E5%B7%B2%E5%BA%9F%E5%BC%83/</guid>
        <description>CentOS 8版本 在/etc/sysconfig/network-scripts下，找到你需要配置的网卡配置文件，打开编辑： TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=static #修改：将dhcp</description>
      </item>
      
      <item>
        <title>CentOS设置默认启动项</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/</guid>
        <description>这个不整理了，照着教程做，什么问题都没有遇到。 参考资料 CentOS 8.x 和 RHEL 8.x 更改默认启动项</description>
      </item>
      
      <item>
        <title>CentOS踢掉一个用户</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%B8%A2%E6%8E%89%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/centos%E8%B8%A2%E6%8E%89%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7/</guid>
        <description>我之前管理VPS时也遇到这样的需求了，整理一下： pkill -kill -t pts/0 参考资料 linux下踢掉一个用户（心跳包解决ssh断开连接）</description>
      </item>
      
      <item>
        <title>ChannelHandlerAdapter与@Sharable</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/channelhandleradapter%E4%B8%8Esharable/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/channelhandleradapter%E4%B8%8Esharable/</guid>
        <description>Sharable的应用案例 先直观感受一下该注解的影响： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public static class Handler extends SimpleChannelInboundHandler&amp;lt;String&amp;gt; { @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception { System.out.println(msg); } } public static void</description>
      </item>
      
      <item>
        <title>ChannelHandler中不处理异常会发生什么</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/channelhandler%E4%B8%AD%E4%B8%8D%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/channelhandler%E4%B8%AD%E4%B8%8D%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</guid>
        <description>每个Channel都拥有一个与之相关联的ChannelPipeline，其持有一个channelHandler的实例链。在默认的情况下，Ch</description>
      </item>
      
      <item>
        <title>ChannelHanlerContext调用写方法消息的走向</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/channelhanlercontext%E8%B0%83%E7%94%A8%E5%86%99%E6%96%B9%E6%B3%95%E6%B6%88%E6%81%AF%E7%9A%84%E8%B5%B0%E5%90%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/channelhanlercontext%E8%B0%83%E7%94%A8%E5%86%99%E6%96%B9%E6%B3%95%E6%B6%88%E6%81%AF%E7%9A%84%E8%B5%B0%E5%90%91/</guid>
        <description>我在阅读Netty实战的时候有这样一段描述： 我觉得这段话和这张图描述的并不够严谨，因为在我的实验中，前后是要看是入站还是出站数据的，如果是入</description>
      </item>
      
      <item>
        <title>Channel和ChannelPipeline</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/channel%E5%92%8Cchannelpipeline/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/channel%E5%92%8Cchannelpipeline/</guid>
        <description>Channel的声明周期 Channel的生命周期分为如下状态： ChannelUnregistered：Channel被创建还未注册到Even</description>
      </item>
      
      <item>
        <title>Chrome导出Curl指令</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/chrome%E5%AF%BC%E5%87%BAcurl%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/chrome%E5%AF%BC%E5%87%BAcurl%E6%8C%87%E4%BB%A4/</guid>
        <description>这个功能和Postman的导入功能结合在一起使用，前端、后端、测试联调时，非常的方便，过程如截图： Copy All As Curl，会将当前Network中的</description>
      </item>
      
      <item>
        <title>Chrome查看密码的技巧</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/chrome%E6%9F%A5%E7%9C%8B%E5%AF%86%E7%A0%81%E7%9A%84%E6%8A%80%E5%B7%A7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/chrome%E6%9F%A5%E7%9C%8B%E5%AF%86%E7%A0%81%E7%9A%84%E6%8A%80%E5%B7%A7/</guid>
        <description>这个技巧不是在任何时间都好用的，相比于在密码管理器中查看密码，该方式最大的好处比较简单。 方法如下： 使用密码填充工具填充密码后，对这密码框右键</description>
      </item>
      
      <item>
        <title>Collections.newSetFromMap</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/collections.newsetfrommap/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/collections.newsetfrommap/</guid>
        <description>在看Netty源码时，遇到如下一段代码： 1 2 3 4 private final Set&amp;lt;ChannelHandlerContext&amp;gt; initMap = Collections.newSetFromMap( new ConcurrentHashMap&amp;lt;ChannelHandlerContext, Boolean&amp;gt;()); 扒了一下该方法底层源码看了一下，如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
      </item>
      
      <item>
        <title>CollectionUtils判断集合是否为空</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/collectionutils%E5%88%A4%E6%96%AD%E9%9B%86%E5%90%88%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/collectionutils%E5%88%A4%E6%96%AD%E9%9B%86%E5%90%88%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</guid>
        <description>这个算是写法的一种优化，之前的写法不太优雅： 1 2 3 4 5 6 7 8 9 CollectionUtils.isEmpty(null); // true CollectionUtils.isEmpty(new ArrayList()); // true CollectionUtils.isEmpty({a,b}); // false CollectionUtils.isNotEmpty(null); // false CollectionUtils.isNotEmpty(new ArrayList());// false CollectionUtils.isNotEmpty({a,b}); // true</description>
      </item>
      
      <item>
        <title>ConfigurationProperties注解在方法上</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3%E5%9C%A8%E6%96%B9%E6%B3%95%E4%B8%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/configurationproperties%E6%B3%A8%E8%A7%A3%E5%9C%A8%E6%96%B9%E6%B3%95%E4%B8%8A/</guid>
        <description>今天遇到如下需求：我需要将如下application.yml配置读取到相应的Properties配置文件中： 1 2 3 4 5 6 7 8 9 templates:- template:&amp;#34;${beanClass}.ftl&amp;#34;module:${project.modules.server}packet:${packages.service}packets-to-import:- ${packages.request}- ${packages.response} 这个非</description>
      </item>
      
      <item>
        <title>ConstraintValidator中调用addMessageParameter方法</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/constraintvalidator%E4%B8%AD%E8%B0%83%E7%94%A8addmessageparameter%E6%96%B9%E6%B3%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/constraintvalidator%E4%B8%AD%E8%B0%83%E7%94%A8addmessageparameter%E6%96%B9%E6%B3%95/</guid>
        <description>我目前的这套方案可以说是以Validation的思想实现我需要的需求。 已存在的校验技术及我的校验注解需求 搞了大半天的成果，虽然不能很优雅的实</description>
      </item>
      
      <item>
        <title>Converter与Formatter</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/converter%E4%B8%8Eformatter/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/converter%E4%B8%8Eformatter/</guid>
        <description>Converter是通用元件，可以将一种类型转换成另一种类型，可以在应用程序中的任意层使用。 Formatter只能将String转换成另一种</description>
      </item>
      
      <item>
        <title>cp将一个目录下的文件复制到另一个目录中</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/cp%E6%8C%87%E4%BB%A4/cp%E5%B0%86%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%AD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/cp%E6%8C%87%E4%BB%A4/cp%E5%B0%86%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%AD/</guid>
        <description>源目录为source，目标目录为target，则如果target不存在，可直接使用如下指令完成复制： 1 2 3 cp -r source target 如果target目录已经存</description>
      </item>
      
      <item>
        <title>Curl Not Found</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/curl-not-found/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/curl-not-found/</guid>
        <description>操作步骤 运行如下指令： apt install -y curl</description>
      </item>
      
      <item>
        <title>curl常用指令</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/curl%E6%8C%87%E4%BB%A4/curl%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/curl%E6%8C%87%E4%BB%A4/curl%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
        <description>我用curl帮助我解决不少问题了，我打算整理下我对其的需求及用法： curl -v google.com 测试google.com是否可以正常访问，google.com域名是</description>
      </item>
      
      <item>
        <title>curl访问时不检查证书</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/curl%E6%8C%87%E4%BB%A4/curl%E8%AE%BF%E9%97%AE%E6%97%B6%E4%B8%8D%E6%A3%80%E6%9F%A5%E8%AF%81%E4%B9%A6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/curl%E6%8C%87%E4%BB%A4/curl%E8%AE%BF%E9%97%AE%E6%97%B6%E4%B8%8D%E6%A3%80%E6%9F%A5%E8%AF%81%E4%B9%A6/</guid>
        <description>指令如下： curl -k https://192.168.13.155:8006 curl --insecure https://192.168.13.155:8006 适用场景：https站点是我自己搭建的~~~ 参考资料 CURL 请求时不检测证书</description>
      </item>
      
      <item>
        <title>Cygwin上安装curl</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/cygwin%E4%B8%8A%E5%AE%89%E8%A3%85curl/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/cygwin%E4%B8%8A%E5%AE%89%E8%A3%85curl/</guid>
        <description>截图如下： 核心需要注意的是，需要在skip上点一下，直到点出版本号。 参考资料 Windows 下如何在cygwin上安装curl？</description>
      </item>
      
      <item>
        <title>DataGrip设置时区为上海</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/datagrip%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA%E4%B8%BA%E4%B8%8A%E6%B5%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/datagrip%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA%E4%B8%BA%E4%B8%8A%E6%B5%B7/</guid>
        <description>比较简单，我直接截图了： 需要断开已有的数据库，然后重新链接。 参考资料 DataGrip设置时区</description>
      </item>
      
      <item>
        <title>Debian删除和新建分区</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/debian%E5%88%A0%E9%99%A4%E5%92%8C%E6%96%B0%E5%BB%BA%E5%88%86%E5%8C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/debian%E5%88%A0%E9%99%A4%E5%92%8C%E6%96%B0%E5%BB%BA%E5%88%86%E5%8C%BA/</guid>
        <description>授人以鱼不如授人以渔，使用如下操作，可以看到fdisk支持的命令集： fdisk m 删除分区 删除分区的指令如下（核心思路就是使用使用d）： fdisk d 2 d 分区 参</description>
      </item>
      
      <item>
        <title>Debian更换软件源</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/debian%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/debian%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</guid>
        <description>操作步骤 替换/etc/apt/sources.list文件为如下内容： # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free deb https://mirrors.tuna.tsinghua.edu.cn/debian-security</description>
      </item>
      
      <item>
        <title>Debian系统关机</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/debian%E7%B3%BB%E7%BB%9F%E5%85%B3%E6%9C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/debian%E7%B3%BB%E7%BB%9F%E5%85%B3%E6%9C%BA/</guid>
        <description>操作步骤 执行如下指令： 1 2 3 4 systemctl poweroff systemctl reboot</description>
      </item>
      
      <item>
        <title>dependencyManager中的import scope</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/dependencymanager%E4%B8%AD%E7%9A%84import-scope/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/dependencymanager%E4%B8%AD%E7%9A%84import-scope/</guid>
        <description>最近发现了一些新的东西：使用阿里SpringBoot初始化SpringBoot项目时，并不需要继承SpringBoot的starter-pa</description>
      </item>
      
      <item>
        <title>depmod not found</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/depmod-not-found/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/depmod-not-found/</guid>
        <description>问题描述 使用XShellssh到PVE服务器，账号使用的是junjie，然后使用su root切换root用户，再使用depmod指令，这时候</description>
      </item>
      
      <item>
        <title>docker run指令</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/docker-run%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/docker-run%E6%8C%87%E4%BB%A4/</guid>
        <description>第三方镜像直接Run的话可能就没有办法进入到系统的终端，我用如下指令定义了我要执行的指令，从而覆盖Dockerfile中的CMD指令： docker run -it</description>
      </item>
      
      <item>
        <title>Docker批量删除指定名称的容器镜像</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/docker%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E5%90%8D%E7%A7%B0%E7%9A%84%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/docker%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E5%90%8D%E7%A7%B0%E7%9A%84%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F/</guid>
        <description>使用场景很多，比如我测试Dockerfile文件后删除测试时生成的镜像，或者在做K8s的实验时，批量删除一些用不到的镜像。 这篇收藏比较久远了</description>
      </item>
      
      <item>
        <title>Docker构建自己的镜像</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/docker%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/docker%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F/</guid>
        <description>最近在研究GitHub Action，攒了几个Dockerfile，并构建了自己的镜像，代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 FROMpython:3.8.6# Copies your code file from your action repository to</description>
      </item>
      
      <item>
        <title>Docker进入容器内部</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/docker%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/docker%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8/</guid>
        <description>docker attach 容器ID 参考资料 进入容器</description>
      </item>
      
      <item>
        <title>EasyExcel填充模板</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/easyexcel/easyexcel%E5%A1%AB%E5%85%85%E6%A8%A1%E6%9D%BF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/easyexcel/easyexcel%E5%A1%AB%E5%85%85%E6%A8%A1%E6%9D%BF/</guid>
        <description>需求的产生是这样的，客户提供了一份Excel模板文件，需要我们用数据库中的数据进行填充，要求我们填充后生成的Excel文件和模板基本一致。我</description>
      </item>
      
      <item>
        <title>EasyExcel实现锁定表头</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/easyexcel/easyexcel%E5%AE%9E%E7%8E%B0%E9%94%81%E5%AE%9A%E8%A1%A8%E5%A4%B4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/easyexcel/easyexcel%E5%AE%9E%E7%8E%B0%E9%94%81%E5%AE%9A%E8%A1%A8%E5%A4%B4/</guid>
        <description>我开发的相应Handler如下，因为这部分需求比较久远了，具体的就不整理了： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32</description>
      </item>
      
      <item>
        <title>EasyYApi处理@RequestAttribute注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E5%A4%84%E7%90%86requestattribute%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E5%A4%84%E7%90%86requestattribute%E6%B3%A8%E8%A7%A3/</guid>
        <description>如下代码： 对应生成的YApi文档为： 这其实不是我想要的，因为我们的@RequestAttribute会从Header中获取一个值赋给该字段，</description>
      </item>
      
      <item>
        <title>EasyYApi提交的Bug被处理了，非常棒的体验</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E6%8F%90%E4%BA%A4%E7%9A%84bug%E8%A2%AB%E5%A4%84%E7%90%86%E4%BA%86%E9%9D%9E%E5%B8%B8%E6%A3%92%E7%9A%84%E4%BD%93%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E6%8F%90%E4%BA%A4%E7%9A%84bug%E8%A2%AB%E5%A4%84%E7%90%86%E4%BA%86%E9%9D%9E%E5%B8%B8%E6%A3%92%E7%9A%84%E4%BD%93%E9%AA%8C/</guid>
        <description>我用渣英语提交的Issues，官方一天的时间就帮我修复了，非常棒的体验，哈哈。 另外EasyYApi真的非常非常的好用，大爱。</description>
      </item>
      
      <item>
        <title>EasyYApi目前配置总结</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E7%9B%AE%E5%89%8D%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E7%9B%AE%E5%89%8D%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</guid>
        <description>Postman 我先从Postman整理起，虽然Postman相关的配置是我最后才实践的，但是确实提升了我不少编码幸福度。我比较喜欢使用Postman进行</description>
      </item>
      
      <item>
        <title>EasyYapi配置以支持自定义的校验注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E9%85%8D%E7%BD%AE%E4%BB%A5%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/easyyapi%E9%85%8D%E7%BD%AE%E4%BB%A5%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3/</guid>
        <description>我自己开发了一条校验注解，可以省去配置message字段，我需要EasyYapi也支持这套注解，配置如下： # 参数配置 param.required=@com.sdstc.csc.common.validation.JNotBlank param.required=@com.sdstc.csc.common.validation.JNotNull # 字段配置 field.required=@com.sdstc.csc.common.validation.JNotBlank field.required=@com.sdstc.csc.common.validation.JNotNull 参考资</description>
      </item>
      
      <item>
        <title>ElasticSearch 1.4.1闪退问题记录</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/elasticsearch/elasticsearch-1.4.1%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/elasticsearch/elasticsearch-1.4.1%E9%97%AA%E9%80%80%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
        <description>之所以安装ElasticSearch 1.4.1，是因为《ElasticSearch实战》这本书使用的是该版本的ElasticSearch，在</description>
      </item>
      
      <item>
        <title>EventLoop</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/eventloop/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/eventloop/</guid>
        <description>任务调度 ScheduledExecutorService的实现具有局限性，作为线程池的管理的一部分，将会有额外的线程创建。如果有大量任务被紧</description>
      </item>
      
      <item>
        <title>Excel常用操作</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/excel%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/excel%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
        <description>合并单元格 之前的版本中，一直是右键，然后选择合并单元格，最近用的版本貌似不支持这种方法了。 锁定单元格 需求产生于我们开发，需要在代码中模拟单元</description>
      </item>
      
      <item>
        <title>Fastjson全局配置的一些事情</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/fastjson%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/fastjson%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85/</guid>
        <description>最近又想将项目中的LocalDateTime序列化和反序列化统一起来，所以需要对Fastjson进行全局化配置，Fastjson全局化配置并</description>
      </item>
      
      <item>
        <title>FastJSON判断json字符串是array还是object</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/fastjson%E5%88%A4%E6%96%ADjson%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AFarray%E8%BF%98%E6%98%AFobject/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/fastjson%E5%88%A4%E6%96%ADjson%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AFarray%E8%BF%98%E6%98%AFobject/</guid>
        <description>没有比较优雅的方案，代码如下： 1 2 3 4 5 6 7 8 9 10 Object jsonObj = JSON.parse(json); if (jsonObj instanceof JSONObject) { return ((JSONObject) jsonObj).toJavaObject(type); } else if (jsonObj instanceof JSONArray) { return ((JSONArray) jsonObj).toJavaList(type); } else { throw new RuntimeException(&amp;</description>
      </item>
      
      <item>
        <title>FastJson反序列化时保持字段的顺序</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E4%BF%9D%E6%8C%81%E5%AD%97%E6%AE%B5%E7%9A%84%E9%A1%BA%E5%BA%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E4%BF%9D%E6%8C%81%E5%AD%97%E6%AE%B5%E7%9A%84%E9%A1%BA%E5%BA%8F/</guid>
        <description>代码如下: 1 2 3 4 5 6 JSONObject obj = JSONObject.parseObject(jsonStr, Feature.OrderedField); ~~ 整理这个笔记的时候发现了新的知识点。我之前一直再用`JSON.parsetObject()`方法，需要将返</description>
      </item>
      
      <item>
        <title>Feign客户端的返回值和Controller的返回值之间没有强约束</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/feign%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8Ccontroller%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B9%8B%E9%97%B4%E6%B2%A1%E6%9C%89%E5%BC%BA%E7%BA%A6%E6%9D%9F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/feign%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8Ccontroller%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B9%8B%E9%97%B4%E6%B2%A1%E6%9C%89%E5%BC%BA%E7%BA%A6%E6%9D%9F/</guid>
        <description>事情是这样的，我用entity包下的Company开发了一个Controller，但是我FeignClient返回的是response包下C</description>
      </item>
      
      <item>
        <title>Feign抛出了异常，及异常的处理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/feign%E6%8A%9B%E5%87%BA%E4%BA%86%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/feign%E6%8A%9B%E5%87%BA%E4%BA%86%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</guid>
        <description>如下代码为我们框架中自己开发的Decoder： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @Slf4j public class FeignDecoder extends SpringDecoder { public FeignDecoder(ObjectFactory&amp;lt;HttpMessageConverters&amp;gt; messageConverters) { super(messageConverters); } @Override public Object decode(final Response response, Type type) throws</description>
      </item>
      
      <item>
        <title>flush行为控制</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/flush%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/flush%E8%A1%8C%E4%B8%BA%E6%8E%A7%E5%88%B6/</guid>
        <description>flush操作负责将ByteBuffer消息写入到SocketChannel中发送给对方。write和flush的作用概括如下： write：</description>
      </item>
      
      <item>
        <title>FreeMarker中的数据类型</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
        <description>布尔类型 FreeMarker中不可以直接在渲染出布尔值，需要使用如下的语法： 1 2 3 4 5 6 7 8 9 10 11 12 13 ${flag?c}&amp;lt;#assign foo = true&amp;gt; ${foo?then(&amp;#39;Y&amp;#39;, &amp;#39;N&amp;#39;)}&amp;lt;#assign foo2 = false&amp;gt; ${foo2?then(&amp;#39;Y&amp;#39;, &amp;#39;N&amp;#39;)}&amp;lt;#assign x = 10&amp;gt; &amp;lt;#assign y = 20&amp;gt; ${100</description>
      </item>
      
      <item>
        <title>FreeMarker实现Thymeleaf中的include和fragment</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E5%AE%9E%E7%8E%B0thymeleaf%E4%B8%AD%E7%9A%84include%E5%92%8Cfragment/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E5%AE%9E%E7%8E%B0thymeleaf%E4%B8%AD%E7%9A%84include%E5%92%8Cfragment/</guid>
        <description>之前学习Thymeleaf时，对其include和fragment影响深刻，其功能大致描述如下，我们在一个文件中定义多个fragment，然</description>
      </item>
      
      <item>
        <title>FreeMarker开发NoSpaceLine指令</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E5%BC%80%E5%8F%91nospaceline%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E5%BC%80%E5%8F%91nospaceline%E6%8C%87%E4%BB%A4/</guid>
        <description>我在开发模板代码时，我期待我的模板代码足够清晰，所以我指令和指令之间会空较多的行，用于代码排版，如下所示： &amp;lt;#list columnInfos as columnInfo&amp;gt; &amp;lt;@noSpaceLine&amp;gt; &amp;lt;#-- 忽略审计字段 --&amp;gt; &amp;lt;#if columnInfo.columnName == &amp;quot;org_id&amp;quot;</description>
      </item>
      
      <item>
        <title>FreeMarker渲染后的内容至多一行空行</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E6%B8%B2%E6%9F%93%E5%90%8E%E7%9A%84%E5%86%85%E5%AE%B9%E8%87%B3%E5%A4%9A%E4%B8%80%E8%A1%8C%E7%A9%BA%E8%A1%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E6%B8%B2%E6%9F%93%E5%90%8E%E7%9A%84%E5%86%85%E5%AE%B9%E8%87%B3%E5%A4%9A%E4%B8%80%E8%A1%8C%E7%A9%BA%E8%A1%8C/</guid>
        <description>如果现在让我处理这个问题，我会选择使用自定义指令的方式（也不一定，自定义会让模板代码增加很多无关的标签），但是当时的话我自定义指令也并不是很</description>
      </item>
      
      <item>
        <title>FreeMarker自定义函数的开发</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%80%E5%8F%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/freemarker/freemarker%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%80%E5%8F%91/</guid>
        <description>我目前没有相关的需求，但是看这篇文章通俗易读易实践，就记录一下。 参考资料 [Freemarker] Freemarker自定义函数</description>
      </item>
      
      <item>
        <title>Git Bash换成中文（待整理）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git-bash%E6%8D%A2%E6%88%90%E4%B8%AD%E6%96%87%E5%BE%85%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git-bash%E6%8D%A2%E6%88%90%E4%B8%AD%E6%96%87%E5%BE%85%E6%95%B4%E7%90%86/</guid>
        <description>打开Git Bash，执行如下指令： git config --global core.quotepath false 按如下截图操作： 参考资料 git 显示中文和解决中文乱码</description>
      </item>
      
      <item>
        <title>Git Clone到当前目录</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git-clone%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git-clone%E5%88%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95/</guid>
        <description>该技术在做Docker镜像的时候非常好使。 git clone git@github.com.user/my-project.git . 参考资料 git clone如何克隆到当前目录</description>
      </item>
      
      <item>
        <title>git commit后撤销该commit</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git-commit%E5%90%8E%E6%92%A4%E9%94%80%E8%AF%A5commit/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git-commit%E5%90%8E%E6%92%A4%E9%94%80%E8%AF%A5commit/</guid>
        <description>执行如下指令： git reset --soft HEAD^ 这个是在push到远程分支前有效的，如果已经push到远程分支了，需要参考我另一篇笔记。 该撤销会保存文件~~~ 参考教程</description>
      </item>
      
      <item>
        <title>Git Hub Token的应用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/git-hub-token%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/git-hub-token%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>一代版本一代神，又得开始研究GitHub Token相关的技术了。 命令行使用 git clone https://github.com/username/repo.git Username: your_username Password: your_token 在CentOS系统上，这个东西是不会缓存的，非常的不</description>
      </item>
      
      <item>
        <title>GitBook安装插件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/gitbook%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/gitbook%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</guid>
        <description>参考我的配置文件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 { &amp;#34;plugins&amp;#34;: [ &amp;#34;-search&amp;#34;, &amp;#34;-lunr&amp;#34;, &amp;#34;-sharing&amp;#34;, &amp;#34;-livereload&amp;#34;, &amp;#34;-font-settings&amp;#34;, &amp;#34;lightbox&amp;#34;, &amp;#34;expandable-chapters&amp;#34;, &amp;#34;chapter-fold&amp;#34;, &amp;#34;github&amp;#34;, &amp;#34;splitter&amp;#34;, &amp;#34;back-to-top-button&amp;#34;, &amp;#34;code&amp;#34;, &amp;#34;hide-element&amp;#34;, &amp;#34;custom-favicon&amp;#34; ], &amp;#34;pluginsConfig&amp;#34;: { &amp;#34;code&amp;#34;: { &amp;#34;copyButtons&amp;#34;: true }, &amp;#34;github&amp;#34;: { &amp;#34;url&amp;#34;: &amp;#34;https://github.com/junjie2018&amp;#34;</description>
      </item>
      
      <item>
        <title>Gitbook显示版本号</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/gitbook%E6%98%BE%E7%A4%BA%E7%89%88%E6%9C%AC%E5%8F%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/gitbook%E6%98%BE%E7%A4%BA%E7%89%88%E6%9C%AC%E5%8F%B7/</guid>
        <description>试出来的： gitbook --version gitbook current</description>
      </item>
      
      <item>
        <title>GitBook生成静态html文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/gitbook%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81html%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/gitbook%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81html%E6%96%87%E4%BB%B6/</guid>
        <description>指令如下： 1 2 3 4 5 cd ~ mkdir -p Blogs/output gitbook build Blogs Blogs/output 参考资料 输出为静态网站</description>
      </item>
      
      <item>
        <title>GitHub Actions开发时的一点小心得</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/github-actions%E5%BC%80%E5%8F%91%E6%97%B6%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%BF%83%E5%BE%97/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/github-actions%E5%BC%80%E5%8F%91%E6%97%B6%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%BF%83%E5%BE%97/</guid>
        <description>在开发GitHub Actions时，我其实挺建议在脚本里写清楚各个步骤执行的指令，及指令执行后的结果的，因为这样更有利于排除错误，举一个简单</description>
      </item>
      
      <item>
        <title>GitHub推送代码失败</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/github%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%A4%B1%E8%B4%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/github%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%A4%B1%E8%B4%A5/</guid>
        <description>问题描述 向GitHub仓库推送代码时，先后出现了如下错误： 1 2 3 4 git push -u origin main fatal: unable to access &amp;#39;https://github.com/junjie2018/blogs.git/&amp;#39;: OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054 1 2 3 4 git push -u origin main fatal: unable to access &amp;#39;https://github.com/junjie2018/blogs.git/&amp;#39;: Failed to connect to github.com port 443: Timed</description>
      </item>
      
      <item>
        <title>GitHub生成Token</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%94%9F%E6%88%90token/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%94%9F%E6%88%90token/</guid>
        <description>过程比较简单，直接截图了：</description>
      </item>
      
      <item>
        <title>GitHub的Pull Requst</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%9A%84pull-requst/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/github%E7%9A%84pull-requst/</guid>
        <description>我fork了一个仓库，做了一些自己的修改，然后发起一个Pull Request，希望该仓库的原作者看到我的修改，然后决定是否采用这些修改。这个</description>
      </item>
      
      <item>
        <title>gitpython模块中代理无法正常使用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/gitpython%E6%A8%A1%E5%9D%97%E4%B8%AD%E4%BB%A3%E7%90%86%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/gitpython%E6%A8%A1%E5%9D%97%E4%B8%AD%E4%BB%A3%E7%90%86%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8/</guid>
        <description>问题描述 考虑到最近GitHub经常无法正常使用，而我在开发博客脚本需要从GitHub上拉取推送代码，所以我打算在代码中使用代理，我的代码如下</description>
      </item>
      
      <item>
        <title>Git切换到远程分支</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%88%87%E6%8D%A2%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%88%87%E6%8D%A2%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</guid>
        <description>我的需求是这样的，同事将代码提交到自己的分支上了，我需要查看他的代码，所以我需要切换到他的分支上，然后查看代码，我使用命令行操作git。 我之</description>
      </item>
      
      <item>
        <title>Git取消对文件的追踪</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%8F%96%E6%B6%88%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%BD%E8%B8%AA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%8F%96%E6%B6%88%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%BD%E8%B8%AA/</guid>
        <description>操作步骤 指令如下 1 2 3 4 # 删除xxx.txt的跟踪，并保留在本地 git rm --cached xxx.txt</description>
      </item>
      
      <item>
        <title>Git回退远程分支</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%9B%9E%E9%80%80%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%9B%9E%E9%80%80%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</guid>
        <description>适用场景：在Uat或生产环境等分支不经常变更的场景，为了定位问题，增加了许多无用的代码，并提交到分支上了。待问题解决后，需要删除这些代码，建</description>
      </item>
      
      <item>
        <title>Git客户端修改远程仓库地址</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80/</guid>
        <description>操作步骤 指令如下 git remote set-url origin https://github.com/junjie2018/out_of_memory.git</description>
      </item>
      
      <item>
        <title>Git客户端修改默认的编辑器</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
        <description>操作步骤 指令如下 1 2 3 git config --global core.editor vim 使用场景比较窄，但是当你需要的时候，你又必须去设置。 相关教程 修改git默认的编辑器</description>
      </item>
      
      <item>
        <title>Git客户端配置https免密</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEhttps%E5%85%8D%E5%AF%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AEhttps%E5%85%8D%E5%AF%86/</guid>
        <description>操作步骤 指令如下： 1 2 3 4 5 6 7 git config --global credential.helper store sudo tee ~/.git-credentials &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; https://user:password@gitee.com EOF 这个在只能走https协议的场景下非常好使，但是要记得将自己的账号设置成需要邮箱或手机</description>
      </item>
      
      <item>
        <title>Git客户端配置代理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
        <description>操作步骤 指令如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # 全局 git config --global http.proxy &amp;#39;http://192.168.13.59:1080&amp;#39; git config --global https.proxy &amp;#39;http://192.168.13.59:1080&amp;#39; git config --global http.proxy &amp;#39;http://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;http://127.0.0.1:1080&amp;#39; git config --global http.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; git config --global https.proxy</description>
      </item>
      
      <item>
        <title>Git拉取代码时报错</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E6%97%B6%E6%8A%A5%E9%94%99/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E6%97%B6%E6%8A%A5%E9%94%99/</guid>
        <description>错误如下： error: RPC failed; curl 56 GnuTLS recv error (-9) 解决方法： apt-get install gnutls-bin git config --global http.sslVerify false git config --global http.postBuffer 1048576000 参考方案 解决git clone 完成后提示&amp;rsquo;error: RPC failed; curl 56 GnuTLS recv error (-9)&#39;</description>
      </item>
      
      <item>
        <title>Git查看远程分支</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/</guid>
        <description>代码如下： 1 2 3 git branch -r</description>
      </item>
      
      <item>
        <title>git模块的小问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/git%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/git%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</guid>
        <description>我准备换pygit为GitPython，但是我导入git包后找不到用不了git.Repo，我已经在PyCharm的Inspector中去掉了</description>
      </item>
      
      <item>
        <title>Git清除未跟踪的文件和文件夹</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E6%B8%85%E9%99%A4%E6%9C%AA%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E6%B8%85%E9%99%A4%E6%9C%AA%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
        <description>操作步骤 指令如下 1 2 3 4 5 6 7 8 # 删除untracker files git clean -f # 连untracked的目录一起删除 git clean -fd</description>
      </item>
      
      <item>
        <title>Git设置提交时的用户名和账号</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E8%AE%BE%E7%BD%AE%E6%8F%90%E4%BA%A4%E6%97%B6%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E8%B4%A6%E5%8F%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/git%E8%AE%BE%E7%BD%AE%E6%8F%90%E4%BA%A4%E6%97%B6%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E8%B4%A6%E5%8F%B7/</guid>
        <description>代码如下： git config --global user.name 小桀 git config --global user.email 812797569@qq.com</description>
      </item>
      
      <item>
        <title>GRpc与我们的项目</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/grpc/grpc%E4%B8%8E%E6%88%91%E4%BB%AC%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/grpc/grpc%E4%B8%8E%E6%88%91%E4%BB%AC%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
        <description>今天第一次接触GRpc，之前有做游戏开发时用的ProtoBuf，对这个东西印象很好，GRpc的底层貌似就是ProtoBuf。 大概说下我做了哪</description>
      </item>
      
      <item>
        <title>GRpc问题记录：两个版本的服务同时存在</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/grpc/grpc%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/grpc/grpc%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8/</guid>
        <description>因为需要更换为新Service，所以导致项目中新旧同时存在，项目启动的时候没有任何问题，但是我用grpcui去连接的时候，报了如下的错误： Failed</description>
      </item>
      
      <item>
        <title>gzip解压.gz后缀结尾的文件</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/gzip%E8%A7%A3%E5%8E%8B.gz%E5%90%8E%E7%BC%80%E7%BB%93%E5%B0%BE%E7%9A%84%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/gzip%E8%A7%A3%E5%8E%8B.gz%E5%90%8E%E7%BC%80%E7%BB%93%E5%B0%BE%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
        <description>我用的时候一般直接解压到当前目录： gzip xxx.gz -d 解压位置 参考资料 解压.gz和.tar.gz文件</description>
      </item>
      
      <item>
        <title>Harbor配置代理缓存</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/harbor%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/harbor%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98/</guid>
        <description>目前这个方式适用的场景有点窄，只用为Docker Hub和同Harbor仓库进行代理缓存。先观望着吧。 参考资料 使用harbor代理缓存dock</description>
      </item>
      
      <item>
        <title>Helm安装Chart前修改配置文件</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/helm/helm%E5%AE%89%E8%A3%85chart%E5%89%8D%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/helm/helm%E5%AE%89%E8%A3%85chart%E5%89%8D%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
        <description>简单指令如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 展示可配置项 helm show values bitnami/wordpress # 使用指定文件覆盖默认配置 echo &amp;#39;{mariadb.auth.database: user0db, mariadb.auth.username: user0}&amp;#39; &amp;gt; values.yaml helm install -f values.yaml bitnami/wordpress --generate-name # 查看指定release</description>
      </item>
      
      <item>
        <title>Helm常用指令</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/helm/helm%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/helm/helm%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
        <description>从Artifact Hub中、repo中搜索chart 1 2 3 4 5 6 7 8 # 从hub中 helm search hub wordpress # 从repo中 helm repo add brigade https://brigadecore.github.io/charts helm search repo brigade 安装chart 1 2 3</description>
      </item>
      
      <item>
        <title>hide-element插件冲突的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/hide-element%E6%8F%92%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/hide-element%E6%8F%92%E4%BB%B6%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>如下插件配置： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { &amp;#34;plugins&amp;#34;: [ &amp;#34;-search&amp;#34;, &amp;#34;-sharing&amp;#34;, &amp;#34;-livereload&amp;#34;, &amp;#34;-font-settings&amp;#34;, &amp;#34;lightbox&amp;#34;, &amp;#34;expandable-chapters&amp;#34;, &amp;#34;github&amp;#34;, &amp;#34;splitter&amp;#34;, &amp;#34;back-to-top-button&amp;#34;, &amp;#34;code&amp;#34;, &amp;#34;hide-element&amp;#34;, &amp;#34;custom-favicon&amp;#34; ], &amp;#34;pluginsConfig&amp;#34;: { &amp;#34;code&amp;#34;: { &amp;#34;copyButtons&amp;#34;: true }, &amp;#34;github&amp;#34;: { &amp;#34;url&amp;#34;: &amp;#34;https://github.com/junjie2018&amp;#34; }, &amp;#34;hide-element&amp;#34;: { &amp;#34;elements&amp;#34;: [&amp;#34;.gitbook-link&amp;#34;,&amp;#34;chapter&amp;#34;] },</description>
      </item>
      
      <item>
        <title>https无法正常链接</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/istio/https%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/istio/https%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E9%93%BE%E6%8E%A5/</guid>
        <description>这是之前处理问题时用到的资料，整理一份。 背景是这样的，我们的http可以正常的建立链接，但是https无法正常的建立链接。 参考资料 SSL Handshake 被莫名</description>
      </item>
      
      <item>
        <title>http协议的代理和Socks5协议的代理</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/http%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BB%A3%E7%90%86%E5%92%8Csocks5%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/http%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BB%A3%E7%90%86%E5%92%8Csocks5%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BB%A3%E7%90%86/</guid>
        <description>这个问题只能算作是记录，我目前也不知道具体产生的原因。我知道curl指令默认情况下不会通过socks5解析域名，所以测试的时候我需要使用so</description>
      </item>
      
      <item>
        <title>Hugo输出静态文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/hugo%E8%BE%93%E5%87%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/hugo%E8%BE%93%E5%87%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</guid>
        <description>指令： hugo -D 输出的文件默认放在public目录下，可以通过-d/&amp;ndash;destination修改文件生成时存放的位置，或者在配置文件中</description>
      </item>
      
      <item>
        <title>Hugo运行时提示：you need the extended version to build SCSSSASS</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/hugo%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8F%90%E7%A4%BAyou-need-the-extended-version-to-build-scsssass/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/hugo%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8F%90%E7%A4%BAyou-need-the-extended-version-to-build-scsssass/</guid>
        <description>安装主题后，用如下指令运行代码： hugo server --minify --theme book --bind=&amp;quot;0.0.0.0&amp;quot; --baseUrl=&amp;quot;http://192.168.27.121:1313&amp;quot; 报错，无法运行。我安装的是非扩展版，去官方下载扩展版即可。 hugo release</description>
      </item>
      
      <item>
        <title>Hutool工具的研究（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/hutool%E5%B7%A5%E5%85%B7%E7%9A%84%E7%A0%94%E7%A9%B6%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/hutool%E5%B7%A5%E5%85%B7%E7%9A%84%E7%A0%94%E7%A9%B6%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description>Hutool v5.6.3</description>
      </item>
      
      <item>
        <title>Idea与Maven集成的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%8Emaven%E9%9B%86%E6%88%90%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%8Emaven%E9%9B%86%E6%88%90%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>这个问题的核心原因在于Idea版本和Maven版本不兼容。这篇文章整理的太晚了，好多细节信息没有记录下来。先这样吧，知道版本不兼容问题可能会</description>
      </item>
      
      <item>
        <title>Idea中Git的使用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%ADgit%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>我其实一致没有系统深入的学习Git，但是现在新工作已经对我这方面能力提出了要求，我先从Idea中Git的使用下手，然后陆续学习更高级的Git</description>
      </item>
      
      <item>
        <title>Idea中无法跳转到spring-boot-starter-parent源码了</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/idea%E4%B8%AD%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E5%88%B0spring-boot-starter-parent%E6%BA%90%E7%A0%81%E4%BA%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/idea%E4%B8%AD%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC%E5%88%B0spring-boot-starter-parent%E6%BA%90%E7%A0%81%E4%BA%86/</guid>
        <description>想看一下spring-boot-starter-parent的源码，看看版本裁决时用了哪些变量，但是发现Idea无法调整到这些源码，这就很奇</description>
      </item>
      
      <item>
        <title>Idea中查看类层次结构</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%AD%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%AD%E6%9F%A5%E7%9C%8B%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/</guid>
        <description>之前看源码时频繁用到的技术，最近这段时间看源码比较少，先收藏一下，未来用到了再整理。 参考资料 idea查看类层次结构图</description>
      </item>
      
      <item>
        <title>Idea中进行分屏显示代码</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%88%86%E5%B1%8F%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%88%86%E5%B1%8F%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81/</guid>
        <description>有时候习惯了VSCode的小图标，在Idea中会不自觉的去找分屏的小图标：</description>
      </item>
      
      <item>
        <title>Idea从application.yml配置项跳转到配置项对应的Properties类</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%BB%8Eapplication.yml%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%B7%B3%E8%BD%AC%E5%88%B0%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%AF%B9%E5%BA%94%E7%9A%84properties%E7%B1%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%BB%8Eapplication.yml%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%B7%B3%E8%BD%AC%E5%88%B0%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%AF%B9%E5%BA%94%E7%9A%84properties%E7%B1%BB/</guid>
        <description>需求是这样的，我需要查看datasource的username被哪个Properties类接受了，只需按住ctrl键，然后按这个配置即可。 我</description>
      </item>
      
      <item>
        <title>IDEA修改编码方式</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/</guid>
        <description>操作步骤 Setting &amp;gt; Editor &amp;gt; File Encodings 或者直接搜索File Encodings，将三处都修改为UTF-8。</description>
      </item>
      
      <item>
        <title>Idea关闭粘贴代码时的自动缩进</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%85%B3%E9%97%AD%E7%B2%98%E8%B4%B4%E4%BB%A3%E7%A0%81%E6%97%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E7%BC%A9%E8%BF%9B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%85%B3%E9%97%AD%E7%B2%98%E8%B4%B4%E4%BB%A3%E7%A0%81%E6%97%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E7%BC%A9%E8%BF%9B/</guid>
        <description>操作如图： 开发模板代码时，很有必要关闭这个自动格式化。 参考资料 IntelliJ IDEA粘贴多行代码时，总是自动缩进</description>
      </item>
      
      <item>
        <title>Idea内存不足的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>该方法可以一劳永逸的解决问题，我家用电脑上就是使用的这个方案。 参考资料 IntelliJ IDEA 修改内存大小，使得idea运行更流畅。</description>
      </item>
      
      <item>
        <title>Idea在目录树中查看当前打开文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%9C%A8%E7%9B%AE%E5%BD%95%E6%A0%91%E4%B8%AD%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%9C%A8%E7%9B%AE%E5%BD%95%E6%A0%91%E4%B8%AD%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/</guid>
        <description>如图，我想在目录树中快速定位我当前打开的文件： 只需要按如下按钮即可： 我常用这个功能来找到源码，然后复制一份源码，在源码上进行一些微调。因为我</description>
      </item>
      
      <item>
        <title>Idea开启部分代码格式化</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%BC%80%E5%90%AF%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E5%BC%80%E5%90%AF%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid>
        <description>操作步骤 File &amp;gt; Settings &amp;gt; Editor &amp;gt; CodeStyle 编写代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // @formatter:on this.sagaDefinition = step() .withCompensation( orderService.reject, CreateOrderSagaState::makeRejectOrderCommand) .step() .invokeParticipant( consumerService.validateOrder,</description>
      </item>
      
      <item>
        <title>Idea报错：Compilation failed：internal java compiler error</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%8A%A5%E9%94%99compilation-failedinternal-java-compiler-error/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%8A%A5%E9%94%99compilation-failedinternal-java-compiler-error/</guid>
        <description>操作步骤 解决该问题需要检查三处的配置，如下图所示： 参考教程 Error:java: Compilation failed: internal java compiler error 解决办法</description>
      </item>
      
      <item>
        <title>Idea搜索jar包中的类</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%90%9C%E7%B4%A2jar%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%90%9C%E7%B4%A2jar%E5%8C%85%E4%B8%AD%E7%9A%84%E7%B1%BB/</guid>
        <description>操作步骤 按两下Shift 输入需要搜索的类 参考资料 IDEA中快速搜索Jar包里面的内容</description>
      </item>
      
      <item>
        <title>Idea断点时的一个小问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%96%AD%E7%82%B9%E6%97%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%96%AD%E7%82%B9%E6%97%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</guid>
        <description>今天在看SpringBoot源码时，在如下代码出进行了断点，结果断点没有生效，代码直接运行到后面了。此处代码我当时只断点了一处，我以为该处代</description>
      </item>
      
      <item>
        <title>Idea查看启动程序时的终端指令</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F%E6%97%B6%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F%E6%97%B6%E7%9A%84%E7%BB%88%E7%AB%AF%E6%8C%87%E4%BB%A4/</guid>
        <description>偶然间发现的，如图省略部分是可以点击的，点击后就可以查看终端运行的指令：</description>
      </item>
      
      <item>
        <title>Idea查看调用栈</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%9F%A5%E7%9C%8B%E8%B0%83%E7%94%A8%E6%A0%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%9F%A5%E7%9C%8B%E8%B0%83%E7%94%A8%E6%A0%88/</guid>
        <description>记录一下，最近阅读源码的需求非常的多，有了这种技术，切面、动态代理的实现都可以轻松的查阅到，非常的舒服。</description>
      </item>
      
      <item>
        <title>Idea添加多Module项目</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%B7%BB%E5%8A%A0%E5%A4%9Amodule%E9%A1%B9%E7%9B%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E6%B7%BB%E5%8A%A0%E5%A4%9Amodule%E9%A1%B9%E7%9B%AE/</guid>
        <description>我们有多个Maven项目需要进行同时编辑，所以我决定使用Idea的多Module技术进行管理。我之前使用多Module是在新建项目的场景下，</description>
      </item>
      
      <item>
        <title>IDEA生成JavaDoc文档时显示：编码GBK的不可映射字符</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E7%94%9F%E6%88%90javadoc%E6%96%87%E6%A1%A3%E6%97%B6%E6%98%BE%E7%A4%BA%E7%BC%96%E7%A0%81gbk%E7%9A%84%E4%B8%8D%E5%8F%AF%E6%98%A0%E5%B0%84%E5%AD%97%E7%AC%A6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E7%94%9F%E6%88%90javadoc%E6%96%87%E6%A1%A3%E6%97%B6%E6%98%BE%E7%A4%BA%E7%BC%96%E7%A0%81gbk%E7%9A%84%E4%B8%8D%E5%8F%AF%E6%98%A0%E5%B0%84%E5%AD%97%E7%AC%A6/</guid>
        <description>操作步骤 打开：Tools -&amp;gt; Generate JavaDoc other command line arguments栏里输入： -encoding utf-8 -charset utf-8</description>
      </item>
      
      <item>
        <title>Idea目录树中隐藏某个文件或文件夹</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E7%9B%AE%E5%BD%95%E6%A0%91%E4%B8%AD%E9%9A%90%E8%97%8F%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E7%9B%AE%E5%BD%95%E6%A0%91%E4%B8%AD%E9%9A%90%E8%97%8F%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
        <description>如图可以进行调整：</description>
      </item>
      
      <item>
        <title>Idea自动下载Maven依赖源码</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BDmaven%E4%BE%9D%E8%B5%96%E6%BA%90%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BDmaven%E4%BE%9D%E8%B5%96%E6%BA%90%E7%A0%81/</guid>
        <description>配置如下： 我感觉配置并没有生效，后来我手动点击了一下下载：</description>
      </item>
      
      <item>
        <title>Idea自动导包的时候忽略一些类</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%8C%85%E7%9A%84%E6%97%B6%E5%80%99%E5%BF%BD%E7%95%A5%E4%B8%80%E4%BA%9B%E7%B1%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%8C%85%E7%9A%84%E6%97%B6%E5%80%99%E5%BF%BD%E7%95%A5%E4%B8%80%E4%BA%9B%E7%B1%BB/</guid>
        <description>最近String总是被自动导入成com.sun.org.apache.xpath.internal.operations.String，这个</description>
      </item>
      
      <item>
        <title>Idea警告：Untrusted Server&#39;s certificate</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%AD%A6%E5%91%8Auntrusted-servers-certificate/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%AD%A6%E5%91%8Auntrusted-servers-certificate/</guid>
        <description>操作步骤 勾选如下配置： File &amp;gt; Settings &amp;gt; Tools &amp;gt; Server Certificates &amp;gt; Accept non-trusted certificates automatically</description>
      </item>
      
      <item>
        <title>Idea运行多个类实例并行及SporingBoot实例并行</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AA%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%B9%B6%E8%A1%8C%E5%8F%8Asporingboot%E5%AE%9E%E4%BE%8B%E5%B9%B6%E8%A1%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AA%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%B9%B6%E8%A1%8C%E5%8F%8Asporingboot%E5%AE%9E%E4%BE%8B%E5%B9%B6%E8%A1%8C/</guid>
        <description>SpringBoot实例并行比较简单，如下图所示： 类实例并行，如下图所示（和SpringBoot不一样，我也是第一次遇到）：</description>
      </item>
      
      <item>
        <title>Idea配置PG数据源时的currentSchema参数</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E9%85%8D%E7%BD%AEpg%E6%95%B0%E6%8D%AE%E6%BA%90%E6%97%B6%E7%9A%84currentschema%E5%8F%82%E6%95%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E9%85%8D%E7%BD%AEpg%E6%95%B0%E6%8D%AE%E6%BA%90%E6%97%B6%E7%9A%84currentschema%E5%8F%82%E6%95%B0/</guid>
        <description>配好PG数据源后，可以愉快的在mapper.xml文件中使用文本格式化快捷键了，但是我发现字段显示为红色，且提示该字段不存在。我猜想是PG的</description>
      </item>
      
      <item>
        <title>Idea配置模板</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/idea%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</guid>
        <description>操作步骤 配置步骤如下所示，如果需要使用高级功能，可以查阅相关手册 图中绿色区域为编辑器中使用该目标时需要输入的内容</description>
      </item>
      
      <item>
        <title>ifupdown2无法加载网络配置</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/ifupdown2%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/ifupdown2%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid>
        <description>问题描述 网络配置后，点击应用配置出现如下提示： you need ifupdown2 to reload network configuration(500) 解决方案 执行如下指令： apt-get install ifupdown2 参考教程 PVE修改网络配置报错需要ifupdown2</description>
      </item>
      
      <item>
        <title>iptables常用操作（未实践）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%BE%85%E5%AE%8C%E6%88%90/iptables%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%9C%AA%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%BE%85%E5%AE%8C%E6%88%90/iptables%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%9C%AA%E5%AE%9E%E8%B7%B5/</guid>
        <description>看资料中无意间看到的，感觉最近挺需要这个的，故记录下来： 下面两条指令首先将防火墙的当前规则保存，如果因为规则混乱无法上网了可以还原： iptables-save &amp;gt; iptables.rules iptables-restore</description>
      </item>
      
      <item>
        <title>Istio安装</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/istio/istio%E5%AE%89%E8%A3%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/istio/istio%E5%AE%89%E8%A3%85/</guid>
        <description>这块是以前用的资料整理，我会后会重新在实验机环境安装，到时候会重新整理一份。 使用 Istioctl 安装 IstioOperator Options 调试 Envoy 和 Pilot 最佳实践：Service Mesh 基准性能测试 S</description>
      </item>
      
      <item>
        <title>java不能指定枚举的ordinal值</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E4%B8%8D%E8%83%BD%E6%8C%87%E5%AE%9A%E6%9E%9A%E4%B8%BE%E7%9A%84ordinal%E5%80%BC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E4%B8%8D%E8%83%BD%E6%8C%87%E5%AE%9A%E6%9E%9A%E4%B8%BE%E7%9A%84ordinal%E5%80%BC/</guid>
        <description>防止以后又蹦出这种想法，现在先断了这个念想。怎么理解这个问题了，在C、C++中，我们定义枚举的时候，可以指定枚举项的值，相同的需求在jdk8</description>
      </item>
      
      <item>
        <title>Java中将整个文本读取到字符串中</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E4%B8%AD%E5%B0%86%E6%95%B4%E4%B8%AA%E6%96%87%E6%9C%AC%E8%AF%BB%E5%8F%96%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E4%B8%AD%E5%B0%86%E6%95%B4%E4%B8%AA%E6%96%87%E6%9C%AC%E8%AF%BB%E5%8F%96%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD/</guid>
        <description>python中有个readLines的api，这个api可以一次性的将整个文件的文本读取到一个字符串中，我理所当然的认为java中也有类似的</description>
      </item>
      
      <item>
        <title>java中的交集、并集、差集</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E4%B8%AD%E7%9A%84%E4%BA%A4%E9%9B%86%E5%B9%B6%E9%9B%86%E5%B7%AE%E9%9B%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E4%B8%AD%E7%9A%84%E4%BA%A4%E9%9B%86%E5%B9%B6%E9%9B%86%E5%B7%AE%E9%9B%86/</guid>
        <description>案例代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 Set&amp;lt;String&amp;gt; set1 = new HashSet&amp;lt;&amp;gt;(); Set&amp;lt;String&amp;gt; set2 = new HashSet&amp;lt;&amp;gt;(); # 交集 set1.retailAll(set2); # 差集 set.removeAll(set2); # 并集 set1.addAll(set2); 在项目中应用的代码一： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
      </item>
      
      <item>
        <title>java反射中如何判断是否是静态方法及静态方法调用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E5%8F%8D%E5%B0%84%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%8F%8A%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E5%8F%8D%E5%B0%84%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%8F%8A%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</guid>
        <description>判断是否是静态方法的代码如下： 1 2 3 4 5 Method method = 类.getMethod(相关参数); int modifiers = getModifiers(); Modifier.isStatic(modifiers ) 调用静态方法的代码如下： 1 2 3 4 5 6 7 8 9 10 11</description>
      </item>
      
      <item>
        <title>Java查看内存地址</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80/</guid>
        <description>之前一直使用的是hashCode，但是在使用一个框架的时候发现hashCode方法被重写了，根本没有参考意义，所以找到了如下的方法： 1 2 3 System.out.println(System.identityHashCode(obj));</description>
      </item>
      
      <item>
        <title>Java浅拷贝深拷贝工具测试</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95/</guid>
        <description>我确实有深拷贝的需求，我之前的方案是实现了一个静态工具类，在工具类中通过FastJson序列化和反序列化实现深拷贝（我主要用在工具类中，性能</description>
      </item>
      
      <item>
        <title>Java状态机</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E7%8A%B6%E6%80%81%E6%9C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E7%8A%B6%E6%80%81%E6%9C%BA/</guid>
        <description>最近有如下需求，我想用状态机实现该需求： 最后实现上，我用了比较简单的方案，就简单的使用方法代替各个Action，以后遇到更复杂的需求再深入研</description>
      </item>
      
      <item>
        <title>Java读取properties文件中的内容，并将它们封装到JavaBean中</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E8%AF%BB%E5%8F%96properties%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E5%B9%B6%E5%B0%86%E5%AE%83%E4%BB%AC%E5%B0%81%E8%A3%85%E5%88%B0javabean%E4%B8%AD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/java%E8%AF%BB%E5%8F%96properties%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E5%B9%B6%E5%B0%86%E5%AE%83%E4%BB%AC%E5%B0%81%E8%A3%85%E5%88%B0javabean%E4%B8%AD/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 Properties properties = new Properties(); properties.load(new FileInputStream(&amp;#34;src\\main\\resources\\tmp3.properties&amp;#34;)); Enumeration enumeration = properties.propertyNames(); while (enumeration.hasMoreElements()) { String key = (String) enumeration.nextElement(); String value = properties.getProperty(key); System.out.println(key); System.out.println(value); } 写法很糟糕，而且中文还乱码了。 参考资料 了解自动配置原理</description>
      </item>
      
      <item>
        <title>JdbcTemplate查看当前链接的时区</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/jdbctemplate%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E9%93%BE%E6%8E%A5%E7%9A%84%E6%97%B6%E5%8C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/jdbctemplate%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E9%93%BE%E6%8E%A5%E7%9A%84%E6%97%B6%E5%8C%BA/</guid>
        <description>做实验的时候，利用jdbcTemplate开发了一个简单的方法，用于查看当前链接的时区，感觉还不错，就简单整理一下： 1 2 3 4 5 6 7 8 9 10 11 12</description>
      </item>
      
      <item>
        <title>JdbcTemplate获取表的元数据</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/jdbctemplate%E8%8E%B7%E5%8F%96%E8%A1%A8%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/jdbctemplate%E8%8E%B7%E5%8F%96%E8%A1%A8%E7%9A%84%E5%85%83%E6%95%B0%E6%8D%AE/</guid>
        <description>相关技术的应用我会体现在我的工具包代码里。 参考资料 jdbcTemplate高效率获取表结构，数据库元数据信息</description>
      </item>
      
      <item>
        <title>jdbcUrl is required with driverClassName</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/shardingsphere-jdbc/jdbcurl-is-required-with-driverclassname/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/shardingsphere-jdbc/jdbcurl-is-required-with-driverclassname/</guid>
        <description>问题描述 在配置ShardingSphere-Jdbc时，按照官网官网最新配置，遇到了jdbcUrl is required with driverClassName异常 解</description>
      </item>
      
      <item>
        <title>Jenkins定位Kubernetes集群中，简单的echo实验失败</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/jenkins%E5%AE%9A%E4%BD%8Dkubernetes%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%AE%80%E5%8D%95%E7%9A%84echo%E5%AE%9E%E9%AA%8C%E5%A4%B1%E8%B4%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/jenkins%E5%AE%9A%E4%BD%8Dkubernetes%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%AE%80%E5%8D%95%E7%9A%84echo%E5%AE%9E%E9%AA%8C%E5%A4%B1%E8%B4%A5/</guid>
        <description>问题描述 按照教程走完所有流程后，始终得不到项目的日志输出，项目状态一致处于运行中 查看slave pod的describe和log都没有任何提示</description>
      </item>
      
      <item>
        <title>jsonb中如何key为空字符串怎么办</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/jsonb%E4%B8%AD%E5%A6%82%E4%BD%95key%E4%B8%BA%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/jsonb%E4%B8%AD%E5%A6%82%E4%BD%95key%E4%B8%BA%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
        <description>问题描述 因为我们客户端在上传数据时没有进行输入检查（服务端也没有检查），导致我们数据库t_material_info表中插入了一些错误数据。</description>
      </item>
      
      <item>
        <title>Json序列化时驼峰与下滑线的转换</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/json%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E9%A9%BC%E5%B3%B0%E4%B8%8E%E4%B8%8B%E6%BB%91%E7%BA%BF%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/json%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E9%A9%BC%E5%B3%B0%E4%B8%8E%E4%B8%8B%E6%BB%91%E7%BA%BF%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
        <description>我开启了一个新的项目，尝试传递如下json，然后用如下对象接受，结果无法正常接受，这个是符合我预期的。 { &amp;quot;test_json&amp;quot;:&amp;quot;testJson&amp;quot; } @Data private static class TestJson { private String testJson; } @PostMapping(&amp;quot;/testJson&amp;quot;) public TestJson testJson(@RequestBody TestJson testJson)</description>
      </item>
      
      <item>
        <title>junit5不支持构造函数注入</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/junit5%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%B3%A8%E5%85%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/junit5%E4%B8%8D%E6%94%AF%E6%8C%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%B3%A8%E5%85%A5/</guid>
        <description>问题是这样的，我在写测试类的时候使用了Lombok的RequiredArgsConstructor注解，结果一直有如下报错： org.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [org.springframework.web.client.RestTemplate arg0]</description>
      </item>
      
      <item>
        <title>KtConnect脚本需求</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/ktconnect%E8%84%9A%E6%9C%AC%E9%9C%80%E6%B1%82/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/ktconnect%E8%84%9A%E6%9C%AC%E9%9C%80%E6%B1%82/</guid>
        <description>使用脚本前置条件： ktctl、kubectl、config三个文件放置在同一个目录中（且为该目录配置到PATH中，Ktctl工具硬性要求ku</description>
      </item>
      
      <item>
        <title>Kubernetes中搭建Jenkins</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%B8%AD%E6%90%AD%E5%BB%BAjenkins/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%B8%AD%E6%90%AD%E5%BB%BAjenkins/</guid>
        <description>前言 怎么说，犯了低级错误，但是在定位解决这个低级错误的时候又学到了很多知识 操作步骤 拉取代码，将Jenkins运行起来： 1 2 3 4 5 6 7 8 git clone https://gitee.com/junjie2019/kubernetes.git</description>
      </item>
      
      <item>
        <title>Kubernetes中搭建Nexus</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%B8%AD%E6%90%AD%E5%BB%BAnexus/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%B8%AD%E6%90%AD%E5%BB%BAnexus/</guid>
        <description>操作步骤 拉取代码，将Nexus运行起来： 1 2 3 4 5 6 7 8 9 10 11 git clone https://gitee.com/junjie2019/kubernetes.git cd kubernetes/Devops/Jenkins kubectl apply -f PersistentVolumeClaim.yml kubectl apply -f Nexus.yml kubectl create configmap setting.xml \ -- from-file=setting.xml \ -n devops 相关资料 Kubernetes部署</description>
      </item>
      
      <item>
        <title>Kubernetes使用ingress-nginx</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%BD%BF%E7%94%A8ingress-nginx/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%BD%BF%E7%94%A8ingress-nginx/</guid>
        <description>操作步骤 拉取代码，将Ingress-Nginx运行起来： 1 2 3 4 5 6 7 git clone https://gitee.com/junjie2019/kubernetes.git cd kubernetes/Kubernetes/IngressNginx kubectl apply -f mandatory.yml kubectl apply -f service-nodeport.yml 查看pods时会发现镜像拉不下来，可以查看相</description>
      </item>
      
      <item>
        <title>Kubernetes使用NFS持久卷</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%BD%BF%E7%94%A8nfs%E6%8C%81%E4%B9%85%E5%8D%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E4%BD%BF%E7%94%A8nfs%E6%8C%81%E4%B9%85%E5%8D%B7/</guid>
        <description>操作步骤 搭建NFS服务器，想考相关教程 配置Kubernetes使用NFS持久卷，指令如下： 1 2 3 4 5 6 7 8 9 10 git clone https://gitee.com/junjie2019/kubernetes.git cd kubernetes/PersistentVolume2 kubectl apply -f rabc.yml kubectl apply -f deployment.yml kubectl apply</description>
      </item>
      
      <item>
        <title>Kubernetes解决Deployment一直处于NotReady</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3deployment%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8Enotready/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3deployment%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8Enotready/</guid>
        <description>处理步骤 查看pods状态，发现pod没有成功创建： 1 kubectl get po 查看deployment状态，发现deployment一直处于NotReady状态</description>
      </item>
      
      <item>
        <title>Kubernetes解决NFS挂载报错的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3nfs%E6%8C%82%E8%BD%BD%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3nfs%E6%8C%82%E8%BD%BD%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述： 日志如下 Name: nfs-client-provisioner-56596b5cc5-kvsff Namespace: default Priority: 0 Node: kubernetes3/172.17.30.103 Start Time: Thu, 23 Jul 2020 04:06:48 +0000 Labels: app=nfs-client-provisioner pod-template-hash=56596b5cc5 Annotations: &amp;lt;none&amp;gt; Status: Pending IP: IPs: &amp;lt;none&amp;gt; Controlled By: ReplicaSet/nfs-client-provisioner-56596b5cc5 Containers: nfs-client-provisioner: Container ID: Image: quay.io/external_storage/nfs-client-provisioner:latest Image ID: Port: &amp;lt;none&amp;gt; Host Port: &amp;lt;none&amp;gt; State: Waiting Reason: ContainerCreating Ready: False Restart Count: 0 Environment: PROVISIONER_NAME: fuseim.pri/ifs NFS_SERVER: 192.168.30.174 NFS_PATH: /home/junjie/nfs Mounts: /persistentvolumes from</description>
      </item>
      
      <item>
        <title>Kubernetes解决Service is invalid问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3service-is-invalid%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3service-is-invalid%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 service原为NodePort类型，改为默认类型时，有报错如下： kubectl apply -f Jenkins.yml The Service &amp;quot;jenkins&amp;quot; is invalid: spec.ports[1].nodePort: Forbidden: may not be used when `type` is &#39;ClusterIP&#39; 直接删除原Service，</description>
      </item>
      
      <item>
        <title>Kubernetes解决使用Harbor时无法拉取镜像的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8harbor%E6%97%B6%E6%97%A0%E6%B3%95%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8harbor%E6%97%B6%E6%97%A0%E6%B3%95%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述： 日志如下 Name: jenkins-7d6c886b8-nkl4g Namespace: devops Priority: 0 Node: kubernetes3/172.17.30.103 Start Time: Thu, 23 Jul 2020 06:13:34 +0000 Labels: app=jenkins pod-template-hash=7d6c886b8 Annotations: &amp;lt;none&amp;gt; Status: Pending IP: 10.244.2.3 IPs: IP: 10.244.2.3 Controlled By: ReplicaSet/jenkins-7d6c886b8 Containers: jenkins: Container ID: Image: 192.168.30.174:80/test/jenkins:lts Image ID: Ports: 8080/TCP, 50000/TCP Host Ports: 0/TCP, 0/TCP State: Waiting Reason: ImagePullBackOff Ready: False Restart Count: 0 Limits: cpu: 1 memory: 1Gi Requests:</description>
      </item>
      
      <item>
        <title>Kubernetes解决运行在不同主机上的Pod无法ping通的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3%E8%BF%90%E8%A1%8C%E5%9C%A8%E4%B8%8D%E5%90%8C%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%9A%84pod%E6%97%A0%E6%B3%95ping%E9%80%9A%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/kubernetes%E8%A7%A3%E5%86%B3%E8%BF%90%E8%A1%8C%E5%9C%A8%E4%B8%8D%E5%90%8C%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%9A%84pod%E6%97%A0%E6%B3%95ping%E9%80%9A%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>说在前面 真的有点喜极而泣的感觉，花了一下午，终于解决了这个问题，心理很舒服 解决步骤 下载flannel的yml文件，在如下部分增加一条条目，并</description>
      </item>
      
      <item>
        <title>LambdaQueryWrapper泛型写法的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/lambdaquerywrapper%E6%B3%9B%E5%9E%8B%E5%86%99%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/lambdaquerywrapper%E6%B3%9B%E5%9E%8B%E5%86%99%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>MyBatis-Plus中发现的关于泛型的问题 在使用MyBatis-Plus的LambdaQueryWrapper时，发现了一个有趣的小问题</description>
      </item>
      
      <item>
        <title>LengthFieldBasedFrameDecoder学习</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/lengthfieldbasedframedecoder%E5%AD%A6%E4%B9%A0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/lengthfieldbasedframedecoder%E5%AD%A6%E4%B9%A0/</guid>
        <description>我之前学习Netty的课程时出现了LengthFieldBasedFrameDecoder解码器，当时我只想了解学习这门技术，所以很多技术点</description>
      </item>
      
      <item>
        <title>Linux 建立SSH免密登录</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/ssh/linux-%E5%BB%BA%E7%AB%8Bssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/ssh/linux-%E5%BB%BA%E7%AB%8Bssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</guid>
        <description>操作如下 优化后的方案，指令如下 ssh-copy-id mmpprd@10.44.2.106 ssh-copy-id mmpprd@10.44.0.177 i29PmmpImK</description>
      </item>
      
      <item>
        <title>Linux常用操作</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
        <description>md5 指令如下： md5sum 文件名 参考资料 Linux下对文件进行md5校验命令 Shell 变量 Shell —— 变量的声明和使用</description>
      </item>
      
      <item>
        <title>Linux查看所有的环境变量</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
        <description>指令如下： env</description>
      </item>
      
      <item>
        <title>Linux查看硬盘使用情况</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E6%9F%A5%E7%9C%8B%E7%A1%AC%E7%9B%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E6%9F%A5%E7%9C%8B%E7%A1%AC%E7%9B%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</guid>
        <description>df -h</description>
      </item>
      
      <item>
        <title>Linux端口映射</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</guid>
        <description>我不想用iptables、和firewall的方案，因为我对这些工具还不够熟悉，我只想一个小小的工具完成我的工作。最后我找到了socat（话</description>
      </item>
      
      <item>
        <title>Linux设置定时任务</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/linux%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid>
        <description>我开发了一个外卖提醒的脚本，每次运行的时候，会发送一条消息到我们的钉钉群，提醒我们点外卖，我将它放到了我的实验机上。开发的定时任务脚本如下：</description>
      </item>
      
      <item>
        <title>LocalDateTime与时间戳互相转换</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/localdatetime%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/localdatetime%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</guid>
        <description>这是我使用在我们项目中的一个方案，我挺喜欢这个方案的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // LocalDateTime到时间戳 ZoneId systemDefaultZoneId = ZoneId.systemDefault(); ZoneOffset offset =</description>
      </item>
      
      <item>
        <title>Lombok与Idea版本不兼容</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/lombok%E4%B8%8Eidea%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/lombok%E4%B8%8Eidea%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9/</guid>
        <description>上周把Idea升级到了最新版，结果启动项目时出现了如下错误： 我最后修复该问题的方案是放弃我自己进行lombok版本管理，让SpringBoo</description>
      </item>
      
      <item>
        <title>Maven中的Scope</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E4%B8%AD%E7%9A%84scope/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E4%B8%AD%E7%9A%84scope/</guid>
        <description>scope取值 compile 默认为compile，什么都不配置就意味着compile compile表示被依赖项目需要参与当前项目的编译、测试、运行 打包的</description>
      </item>
      
      <item>
        <title>Maven无法从根项目deploy</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E6%97%A0%E6%B3%95%E4%BB%8E%E6%A0%B9%E9%A1%B9%E7%9B%AEdeploy/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E6%97%A0%E6%B3%95%E4%BB%8E%E6%A0%B9%E9%A1%B9%E7%9B%AEdeploy/</guid>
        <description>我在deploy auth-center项目的时候，在根项目执行deploy，报如下错误（没有太多的有用的信息）： &amp;quot;C:\Program Files\Java\jdk1.8.0_281\bin\java.exe&amp;quot; -Dmaven.multiModuleProjectDirectory=D:\Project\auth-center &amp;quot;-Dmaven.home=D:\Software\IntelliJ IDEA 2019.1.4\plugins\maven\lib\maven3&amp;quot; &amp;quot;-Dclassworlds.conf=D:\Software\IntelliJ IDEA 2019.1.4\plugins\maven\lib\maven3\bin\m2.conf&amp;quot; &amp;quot;-javaagent:D:\Software\IntelliJ IDEA 2019.1.4\lib\idea_rt.jar=55517:D:\Software\IntelliJ IDEA 2019.1.4\bin&amp;quot;</description>
      </item>
      
      <item>
        <title>Maven查看依赖树</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E6%9F%A5%E7%9C%8B%E4%BE%9D%E8%B5%96%E6%A0%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E6%9F%A5%E7%9C%8B%E4%BE%9D%E8%B5%96%E6%A0%91/</guid>
        <description>1 2 3 4 mvn dependency:tree mvn dependency:tree -Doutput=*.txt 参考资料 如何查看Maven项目中的jar包依赖树情况？</description>
      </item>
      
      <item>
        <title>Maven用命令行将jar包上传到Nexus仓库</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B0%86jar%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%88%B0nexus%E4%BB%93%E5%BA%93/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B0%86jar%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%88%B0nexus%E4%BB%93%E5%BA%93/</guid>
        <description>需求产生于一个非常特殊的场景，在做内部应用上云时，我们的流水线始终无法拉取下面的包（我们已经配置了VPN，且阿里云的Maven仓库已经做了全</description>
      </item>
      
      <item>
        <title>Maven的profiles与SpringBoot的application.yml</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/maven%E7%9A%84profiles%E4%B8%8Espringboot%E7%9A%84application.yml/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/maven%E7%9A%84profiles%E4%B8%8Espringboot%E7%9A%84application.yml/</guid>
        <description>我们的项目有一个比较便利的功能，如图，当我们选择了local后，我们启动SpringBoot项目时，将自动使用application-loc</description>
      </item>
      
      <item>
        <title>Maven的一项技术及这项技术的现实意义</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/maven%E7%9A%84%E4%B8%80%E9%A1%B9%E6%8A%80%E6%9C%AF%E5%8F%8A%E8%BF%99%E9%A1%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E7%8E%B0%E5%AE%9E%E6%84%8F%E4%B9%89/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/maven%E7%9A%84%E4%B8%80%E9%A1%B9%E6%8A%80%E6%9C%AF%E5%8F%8A%E8%BF%99%E9%A1%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E7%8E%B0%E5%AE%9E%E6%84%8F%E4%B9%89/</guid>
        <description>先声明一下，我觉得下面的技术在实践过程中并没有太大的意义，只是碰巧看到了，所以就整理一下。 如下，我们可以如下配置pom.xml文件： 1 2 3 4</description>
      </item>
      
      <item>
        <title>Maven配置源码打包</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81%E6%89%93%E5%8C%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81%E6%89%93%E5%8C%85/</guid>
        <description>配置代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-source-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.1&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;attach&amp;gt;true&amp;lt;/attach&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;phase&amp;gt;compile&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 我直接将这个配置在了根目录，最近用Mave</description>
      </item>
      
      <item>
        <title>Maven配置生成的jar包名称</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E9%85%8D%E7%BD%AE%E7%94%9F%E6%88%90%E7%9A%84jar%E5%8C%85%E5%90%8D%E7%A7%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/maven%E9%85%8D%E7%BD%AE%E7%94%9F%E6%88%90%E7%9A%84jar%E5%8C%85%E5%90%8D%E7%A7%B0/</guid>
        <description>流水线中，通过Maven构建项目之后，无法找到构建后的jar包，和同事讨论后得知，我们项目中规定了构建后的jar包的名称，所以在Maven中</description>
      </item>
      
      <item>
        <title>Method has too many Body parameters</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/method-has-too-many-body-parameters/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/method-has-too-many-body-parameters/</guid>
        <description>问题描述 报错如下： Caused by: java.lang.IllegalStateException: Method has too many Body parameters: public abstract void com.sdstc.authcenter.client.UserConfigClient.updateUserListConfig(java.lang.String,com.sdstc.authcenter.request.UpdateListConfigRequest) at feign.Util.checkState(Util.java:127) ~[feign-core-10.1.0.jar:?] at feign.Contract$BaseContract.parseAndValidateMetadata(Contract.java:117) ~[feign-core-10.1.0.jar:?] at org.springframework.cloud.openfeign.support.SpringMvcContract.parseAndValidateMetadata(SpringMvcContract.java:188) ~[spring-cloud-openfeign-core-2.1.1.RELEASE.jar:2.1.1.RELEASE] at feign.Contract$BaseContract.parseAndValidatateMetadata(Contract.java:66) ~[feign-core-10.1.0.jar:?] at feign.ReflectiveFeign$ParseHandlersByName.apply(ReflectiveFeign.java:154) ~[feign-core-10.1.0.jar:?] at feign.ReflectiveFeign.newInstance(ReflectiveFeign.java:52) ~[feign-core-10.1.0.jar:?] at feign.Feign$Builder.target(Feign.java:251) ~[feign-core-10.1.0.jar:?] at org.springframework.cloud.openfeign.HystrixTargeter.target(HystrixTargeter.java:36) ~[spring-cloud-openfeign-core-2.1.1.RELEASE.jar:2.1.1.RELEASE] at org.springframework.cloud.openfeign.FeignClientFactoryBean.getTarget(FeignClientFactoryBean.java:284) ~[spring-cloud-openfeign-core-2.1.1.RELEASE.jar:2.1.1.RELEASE] at org.springframework.cloud.openfeign.FeignClientFactoryBean.getObject(FeignClientFactoryBean.java:247) ~[spring-cloud-openfeign-core-2.1.1.RELEASE.jar:2.1.1.RELEASE] at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:171) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:101) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1818) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getObjectForBeanInstance(AbstractAutowireCapableBeanFactory.java:1266) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:260) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.4.RELEASE.jar:5.2.4.RELEASE]</description>
      </item>
      
      <item>
        <title>MyBatis 3.0 与 Lombok中的@Builder</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-3.0-%E4%B8%8E-lombok%E4%B8%AD%E7%9A%84builder/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-3.0-%E4%B8%8E-lombok%E4%B8%AD%E7%9A%84builder/</guid>
        <description>问题描述 PG库中的字段类型为varchar，实体中字段类型为String，PO的简化后结构如下： 1 2 3 4 5 6 7 8 9 10 @Data @Builder @EqualsAndHashCode(callSuper = false) @TableName(value = &amp;#34;t_dyf_field&amp;#34;, autoResultMap = true) class</description>
      </item>
      
      <item>
        <title>mybatis-plus java.lang.IndexOutOfBoundsException</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus-java.lang.indexoutofboundsexception/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus-java.lang.indexoutofboundsexception/</guid>
        <description>这个报错非常的迷惑人，让人感觉是自己的sql查出来了多条记录，但是代码中将多条数据塞到了一个对象中，实际上并不是这样的，MyBatis拼出来</description>
      </item>
      
      <item>
        <title>MyBatis-Plus处理枚举的转换</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E5%A4%84%E7%90%86%E6%9E%9A%E4%B8%BE%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E5%A4%84%E7%90%86%E6%9E%9A%E4%B8%BE%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
        <description>这是我自己开发的工具，从entity到typeHandler、到枚举代码如下： 1 2 3 4 5 6 7 8 /** * 是否是模型必须 */ @TableField(typeHandler = IsModelRequiredTypeHandler.class) private IsModelRequired modelRequired; private Integer isModelRequired; 1 2 3 4</description>
      </item>
      
      <item>
        <title>MyBatis-Plus拼SQL时不要拼全部的字段</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E6%8B%BCsql%E6%97%B6%E4%B8%8D%E8%A6%81%E6%8B%BC%E5%85%A8%E9%83%A8%E7%9A%84%E5%AD%97%E6%AE%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E6%8B%BCsql%E6%97%B6%E4%B8%8D%E8%A6%81%E6%8B%BC%E5%85%A8%E9%83%A8%E7%9A%84%E5%AD%97%E6%AE%B5/</guid>
        <description>核心就在于使用select方法，参考代码如下： 1 2 3 4 5 6 LambdaQueryWrapper&amp;lt;AuthFun&amp;gt; queryWrapper = new LambdaQueryWrapper&amp;lt;AuthFun&amp;gt;() .eq(AuthFun::getTreeCode, TreeCode.SERVICE_PACKAGE.getValue()) .in(AuthFun::getParentId, authFuncParentIds) .select(AuthFun::getId, AuthFun::getOperaList); 使用这个方法精准的限制被搜索到的字段是非常的有意义的，可以避</description>
      </item>
      
      <item>
        <title>MyBatis-plus指定BaseMapper实现</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E6%8C%87%E5%AE%9Abasemapper%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E6%8C%87%E5%AE%9Abasemapper%E5%AE%9E%E7%8E%B0/</guid>
        <description>这个问题我暂时只能描述一下，因为这个问题发生的时候，我询问了同事，结果这是我们架构中已知的问题，所以很快就解决了，我并没有查找任何资料，也没</description>
      </item>
      
      <item>
        <title>MyBatis-Plus生成的SQL中包含双引号</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E7%94%9F%E6%88%90%E7%9A%84sql%E4%B8%AD%E5%8C%85%E5%90%AB%E5%8F%8C%E5%BC%95%E5%8F%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis-plus%E7%94%9F%E6%88%90%E7%9A%84sql%E4%B8%AD%E5%8C%85%E5%90%AB%E5%8F%8C%E5%BC%95%E5%8F%B7/</guid>
        <description>最近的工作又是在跟TypeHandler较劲，同样的错误我已经在两个场景中发现了，这次的场景是我修改了typeHandlerPackage配</description>
      </item>
      
      <item>
        <title>MyBatisPlus中使用TypeHandler时的一个坑</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatisplus%E4%B8%AD%E4%BD%BF%E7%94%A8typehandler%E6%97%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatisplus%E4%B8%AD%E4%BD%BF%E7%94%A8typehandler%E6%97%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
        <description>这个问题是我同事遇到的，这个问题大概是说，当一个字段注解了@TypeHandler后，在使用LambdaQueryWrapper时，你传递的</description>
      </item>
      
      <item>
        <title>MyBatis条件构造器</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/</guid>
        <description>我目前比较中意的写法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // 查询思路：table.id = fieldId and (table.orgId = orgId or table.orgId = 超管orgId) LambdaQueryWrapper&amp;lt;FieldPo&amp;gt; queryWrapper = new LambdaQueryWrapper&amp;lt;FieldPo&amp;gt;() .eq(FieldPo::getId, fieldId) .and(queryWrapperInner -&amp;gt;</description>
      </item>
      
      <item>
        <title>MyBatis框架限制Page查询最大只能查500条</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis%E6%A1%86%E6%9E%B6%E9%99%90%E5%88%B6page%E6%9F%A5%E8%AF%A2%E6%9C%80%E5%A4%A7%E5%8F%AA%E8%83%BD%E6%9F%A5500%E6%9D%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis%E6%A1%86%E6%9E%B6%E9%99%90%E5%88%B6page%E6%9F%A5%E8%AF%A2%E6%9C%80%E5%A4%A7%E5%8F%AA%E8%83%BD%E6%9F%A5500%E6%9D%A1/</guid>
        <description>今天想小小满足一下前端的一个超大JSON的需求，结果发现MyBatis限制了分页查询时最大查询条数为500条，即使传入limit为10000</description>
      </item>
      
      <item>
        <title>MyBatis配置打印日志信息</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis%E9%85%8D%E7%BD%AE%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/mybatis%E9%85%8D%E7%BD%AE%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/</guid>
        <description>在application.yml配置中增加如下配置： 1 2 3 4 5 mybatis-plus:configuration:log-impl:org.apache.ibatis.logging.stdout.StdOutImpl 参考资料 mybatisPlus配置控制台打印sql语句</description>
      </item>
      
      <item>
        <title>Navicat Premium 12看不到PostgreSQL创建的表</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/navicat/navicat-premium-12%E7%9C%8B%E4%B8%8D%E5%88%B0postgresql%E5%88%9B%E5%BB%BA%E7%9A%84%E8%A1%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/navicat/navicat-premium-12%E7%9C%8B%E4%B8%8D%E5%88%B0postgresql%E5%88%9B%E5%BB%BA%E7%9A%84%E8%A1%A8/</guid>
        <description>不知道算不算一个Bug，我通过Navicat Premium 12创建的表，无法在Navicat Premium 12中查看。 该问题目前仅针对PG数据库。 参考资料 Navicat Premium 下看不</description>
      </item>
      
      <item>
        <title>Netty分配池化的堆外内存的细节</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty%E5%88%86%E9%85%8D%E6%B1%A0%E5%8C%96%E7%9A%84%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E7%9A%84%E7%BB%86%E8%8A%82/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty%E5%88%86%E9%85%8D%E6%B1%A0%E5%8C%96%E7%9A%84%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E7%9A%84%E7%BB%86%E8%8A%82/</guid>
        <description>PooledByteBufAllocator是netty分配池化内存的操作入口。</description>
      </item>
      
      <item>
        <title>Netty服务端启动过程分析</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/netty%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/netty%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
        <description></description>
      </item>
      
      <item>
        <title>Netty理解pipeline实验设计</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/netty%E7%90%86%E8%A7%A3pipeline%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/netty%E7%90%86%E8%A7%A3pipeline%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1/</guid>
        <description>我目前正处于Netty的学习过程中，所学的知识并没有覆盖到我接下来要进行的实验，但是为了更好的理解pipeline，我设计了如下的实验： 准备</description>
      </item>
      
      <item>
        <title>Netty的基础知识</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/netty%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%B0%9A%E7%A1%85%E8%B0%B7netty/netty%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
        <description>Netty对NIO进行的封装 设计优雅：适用于各种传输类型的统一（API阻塞和非阻塞Socket）；基于灵活可扩展的事件模型，可以清晰地分离关</description>
      </item>
      
      <item>
        <title>NextCloud配置所有IP都可以方案</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/nextcloud/nextcloud%E9%85%8D%E7%BD%AE%E6%89%80%E6%9C%89ip%E9%83%BD%E5%8F%AF%E4%BB%A5%E6%96%B9%E6%A1%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/nextcloud/nextcloud%E9%85%8D%E7%BD%AE%E6%89%80%E6%9C%89ip%E9%83%BD%E5%8F%AF%E4%BB%A5%E6%96%B9%E6%A1%88/</guid>
        <description>我内网使用NextCloud，所以安全性要求没有那么高，我计划配置成http + ip访问，目前ip访问已经找到方案了，因为不再考虑使用Next</description>
      </item>
      
      <item>
        <title>No convert for xxx with preset Content-Type &#39;null&#39;</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/no-convert-for-xxx-with-preset-content-type-null/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/no-convert-for-xxx-with-preset-content-type-null/</guid>
        <description>今天配置好Actuator后，访问其接口时报如下错误： { &amp;quot;code&amp;quot;: 100101, &amp;quot;data&amp;quot;: null, &amp;quot;message&amp;quot;: &amp;quot;params invalidate: No converter for [class org.springframework.boot.actuate.beans.BeansEndpoint$ApplicationBeans] with preset Content-Type &#39;null&#39;&amp;quot;, &amp;quot;success&amp;quot;: false } 我一步一步知道我们的框架层，发现如下代码： 1 2</description>
      </item>
      
      <item>
        <title>No module named &#39;_ctypes&#39;</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/no-module-named-_ctypes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/no-module-named-_ctypes/</guid>
        <description>在CentOS上自行编译python3后，安装依赖时出现了如下问题： [root@base launch]# pip3 install pyinstaller Collecting pyinstaller Downloading pyinstaller-4.3.tar.gz (3.7 MB) |████████████████████████</description>
      </item>
      
      <item>
        <title>No tests were found</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/no-tests-were-found/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/no-tests-were-found/</guid>
        <description>这个错误发生的非常让人哭笑不得，现象就是运行测试时如论如何都无法正确的运行，总是显示No tests were found。 最后检查代码发现，是因为编写了如下的</description>
      </item>
      
      <item>
        <title>Node.js install总是失败的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/node.js-install%E6%80%BB%E6%98%AF%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/node.js-install%E6%80%BB%E6%98%AF%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 C:\Users\wujj\Desktop\ElectronProject&amp;gt;npm install electron --save (node:14808) Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to &#39;0&#39; makes TLS connections and HTTPS requests insecure by disabling certificate verification. (Use `node --trace-warnings ...` to show where the warning was created) &amp;gt; core-js@3.9.1 postinstall C:\Users\wujj\Desktop\ElectronProject\node_modules\core-js &amp;gt; node -e &amp;quot;try{require(&#39;./postinstall&#39;)}catch(e){}&amp;quot; &amp;gt; electron@12.0.2 postinstall C:\Users\wujj\Desktop\ElectronProject\node_modules\electron &amp;gt; node install.js (node:27104) Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to &#39;0&#39; makes TLS connections and HTTPS requests insecure</description>
      </item>
      
      <item>
        <title>Node.js中的UNABLE_TO_VERIFY_LEAF_SIGNATURE</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/node.js%E4%B8%AD%E7%9A%84unable_to_verify_leaf_signature/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/node.js%E4%B8%AD%E7%9A%84unable_to_verify_leaf_signature/</guid>
        <description>问题描述 执行如下指令时，报如下错误： npm install -g yo npm WARN registry Unexpected warning for https://registry.npmjs.org/: Miscellaneous Warning UNABLE_TO_VERIFY_LEAF_SIGNATURE: request to https://registry.npmjs.org/yo failed, reason: unable to verify the first certificate npm WARN registry Using stale data from https://registry.npmjs.org/ due to a request error during revalidation. npm ERR! code UNABLE_TO_VERIFY_LEAF_SIGNATURE npm ERR! errno UNABLE_TO_VERIFY_LEAF_SIGNATURE npm ERR! request to</description>
      </item>
      
      <item>
        <title>NodeSource存储库安装Node.js和npm</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/nodesource%E5%AD%98%E5%82%A8%E5%BA%93%E5%AE%89%E8%A3%85node.js%E5%92%8Cnpm/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/nodesource%E5%AD%98%E5%82%A8%E5%BA%93%E5%AE%89%E8%A3%85node.js%E5%92%8Cnpm/</guid>
        <description>我在Debain上使用默认的库安装Node.js，版本过低，报npm冲突了。所以我不得不寻找其他的安装方法。 我最终使用的指令如下： 1 2 3 4 curl</description>
      </item>
      
      <item>
        <title>npm设置代理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/npm%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/npm%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
        <description>指令如下： npm config set proxy=http://127.0.0.1:1080 npm config set https-proxy=http://127.0.0.1:1080 npm config set registry=http://registry.npmjs.org npm config set proxy=http://127.0.0.1:1080 npm config set https-proxy=http://192.168.13.113:1080</description>
      </item>
      
      <item>
        <title>OAuth2 Demo开发整理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth2-demo%E5%BC%80%E5%8F%91%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth2-demo%E5%BC%80%E5%8F%91%E6%95%B4%E7%90%86/</guid>
        <description>客户端 任意一个接口A，这个接口模拟用户没有登录（授权）的情况，将用户重定向到OAuth授权服务器，进行登录（授权）。接口A需要记录下自己传递</description>
      </item>
      
      <item>
        <title>OAuth2的Endpoint</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth2%E7%9A%84endpoint/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth2%E7%9A%84endpoint/</guid>
        <description>OAuth2有三个重要的Endpoint，其中授权Endpoint、Token Endpoint节点在授权服务器中，还有一个可选的重定向End</description>
      </item>
      
      <item>
        <title>OAuth2资源整理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth2%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth2%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</guid>
        <description>GitHub OAuth应用注册页</description>
      </item>
      
      <item>
        <title>OAuth授权方式及使用场景</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth%E6%8E%88%E6%9D%83%E6%96%B9%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/oauth%E6%8E%88%E6%9D%83%E6%96%B9%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
        <description>如下为一份粗略的授权方式及适用场景： 授权码（Authorisation Code）：适用于具有后端的传统Web应用程序以及原生（移动或桌面）应</description>
      </item>
      
      <item>
        <title>OMV配置共享文件夹（实验版）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openmediavault/omv%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AE%9E%E9%AA%8C%E7%89%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openmediavault/omv%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AE%9E%E9%AA%8C%E7%89%88/</guid>
        <description>存储器 &amp;gt; 磁盘：对数据盘进行擦除 存储器 &amp;gt; 文件系统：为数据盘创建文件系统 存储器 &amp;gt; 文件系统：挂载数据盘 访问权限管理 &amp;gt; 共享文件夹：创建一个共享文件夹</description>
      </item>
      
      <item>
        <title>oss2代理设置问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/oss2%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/oss2%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/</guid>
        <description>我觉得我遇到的这个问题属于PyCharm的BUG！！！通过oss2推送图片到阿里云OSS时，因为网络环境的问题，我需要设置代理，我在网上找到</description>
      </item>
      
      <item>
        <title>p6spy的使用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/p6spy%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/p6spy%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>依赖配置如下： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;p6spy&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;p6spy&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.9.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; application.yml配置如下 spring: datasource: # driver-class-name: org.postgresql.Driver # 原始的 driver-class-name: com.p6spy.engine.spy.P6SpyDriver # 使用p6spy后的 password: HelloWorld # url: jdbc:postgresql://192.168.13.68:5432/postgres?currentSchema=public&amp;amp;stringtype=unspecified # 原始的 url: jdbc:p6spy:postgresql://192.168.13.68:5432/postgres?currentSchema=public&amp;amp;stringtype=unspecified # 使用p6sp</description>
      </item>
      
      <item>
        <title>PanDownlaod配置代理</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/pandownlaod%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/pandownlaod%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
        <description>PanDownlaod我一直当做http下载器使用，使用浏览器默认的下载器，总是可能出现断流的情况，而且浏览器里下载，断流的话需要全部重新下</description>
      </item>
      
      <item>
        <title>PG查看并设置当前session的时区</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/pg%E6%9F%A5%E7%9C%8B%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8Dsession%E7%9A%84%E6%97%B6%E5%8C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/pg%E6%9F%A5%E7%9C%8B%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%BD%93%E5%89%8Dsession%E7%9A%84%E6%97%B6%E5%8C%BA/</guid>
        <description>用的比较少，但是做实验中这些指令比较重要。 1 2 3 4 5 6 7 8 # 查看时区 show time zone # 设置时区 set time zone &amp;#39;PRC&amp;#39;; # 相当于+08时区 set time zone &amp;#39;GMT&amp;#39;; # 相当于+00时区 参考</description>
      </item>
      
      <item>
        <title>pip3拉oss2包时报错</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pip3%E6%8B%89oss2%E5%8C%85%E6%97%B6%E6%8A%A5%E9%94%99/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pip3%E6%8B%89oss2%E5%8C%85%E6%97%B6%E6%8A%A5%E9%94%99/</guid>
        <description>问题描述 我在CentOS上通过自己编译的Python的pip工具下载oss2模块时，出现如下报错： [root@localhost ~]# pip3 install oss2 Collecting oss2 Using cached oss2-2.14.0.tar.gz (224 kB) ERROR: Command errored out with exit status 1: command:</description>
      </item>
      
      <item>
        <title>pip3设置国内源</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pip3%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pip3%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90/</guid>
        <description>操作步骤 指令如下 1 2 3 4 5 6 7 8 mkdir -p ~/.pip sudo tee ~/.pip/pip.conf &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; [global] index-url = https://mirrors.aliyun.com/pypi/simple EOF</description>
      </item>
      
      <item>
        <title>pip查看某个库的版本号</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pip%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pip%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7/</guid>
        <description>用于精细化定位问题，及修复问题： pip list pip freeze pip show module_name 参考资料 如何查看python包的版本号?</description>
      </item>
      
      <item>
        <title>pom.xml文件中的relativePath</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/pom.xml%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84relativepath/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/pom.xml%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84relativepath/</guid>
        <description>今天用官方源初始化一个SpringBoot项目时发现parent标签下有一个relativePath标签，简单查询了一下，有如下解释： 查找顺</description>
      </item>
      
      <item>
        <title>postgresql的驱动配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/postgresql%E7%9A%84%E9%A9%B1%E5%8A%A8%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/postgresql%E7%9A%84%E9%A9%B1%E5%8A%A8%E9%85%8D%E7%BD%AE/</guid>
        <description>写在application.yml配置文件中的：org.postgresql.Driver 不记录一下，总是忘记，每次忘记再搜索，很麻烦。</description>
      </item>
      
      <item>
        <title>PostgreSQL配置显示SQL执行记录</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/postgresql%E9%85%8D%E7%BD%AE%E6%98%BE%E7%A4%BAsql%E6%89%A7%E8%A1%8C%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/postgresql%E9%85%8D%E7%BD%AE%E6%98%BE%E7%A4%BAsql%E6%89%A7%E8%A1%8C%E8%AE%B0%E5%BD%95/</guid>
        <description>使用场景是我配置了日志输出，配置了P6spy，但是依旧有些执行记录无法查看。 使用的配置文件如下： # ----------------------------- # PostgreSQL configuration file # ----------------------------- # # This file consists of lines of the form: # # name =</description>
      </item>
      
      <item>
        <title>Postman删除环境变量</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
        <description>使用新的环境变量方案，旧的环境变量都需要删除： 再网上找了一圈没有找到删除的方案，最后自己给试出来了。</description>
      </item>
      
      <item>
        <title>Postman发起请求前自动添加Header</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E5%89%8D%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0header/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E5%89%8D%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0header/</guid>
        <description>之所以研究这个技术，主要我通过EasyYapi导出到Postman的频率太高了，每次导出都需要重新填写Header，不是很舒服。我开发了如下</description>
      </item>
      
      <item>
        <title>Postman变成了左右布局</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%8F%98%E6%88%90%E4%BA%86%E5%B7%A6%E5%8F%B3%E5%B8%83%E5%B1%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%8F%98%E6%88%90%E4%BA%86%E5%B7%A6%E5%8F%B3%E5%B8%83%E5%B1%80/</guid>
        <description>左右布局用起来非常的不方便，就莫名其妙的变成了左右布局！！！ 参考资料 postman界面变成了左右结构怎么办</description>
      </item>
      
      <item>
        <title>Postman导出curl指令</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%AF%BC%E5%87%BAcurl%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E5%AF%BC%E5%87%BAcurl%E6%8C%87%E4%BB%A4/</guid>
        <description>应用场景不用多说吧，只是可惜了，导出来的curl在windows上执行不了。 这个code按钮还是有很多东西可以研究的，我之后研究下： 2021</description>
      </item>
      
      <item>
        <title>Postman总是灰屏</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E6%80%BB%E6%98%AF%E7%81%B0%E5%B1%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E6%80%BB%E6%98%AF%E7%81%B0%E5%B1%8F/</guid>
        <description>我机器出现这个问题的原因是因为我的内存不足，公司为我分配的开发主机内存位16G，但是真正能够使用的是有60%，一旦到了60%就无法正常分配内</description>
      </item>
      
      <item>
        <title>Postman用脚本设置全局变量</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E7%94%A8%E8%84%9A%E6%9C%AC%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E7%94%A8%E8%84%9A%E6%9C%AC%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</guid>
        <description>场景是这样的，我们local和dev共用一套token，之前的脚本中我将通过如下方法设置到了当前环境中，所以当我切换环境的时候我不得不重新运</description>
      </item>
      
      <item>
        <title>Postman的安装路径</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/</guid>
        <description>我把这路径记一记，因为我感觉我随时要去整它，Postman好几个版本在我公司电脑上老是出问题，糟心。 C:\Users\wujj\AppData\Local\Postman</description>
      </item>
      
      <item>
        <title>Postman的导入功能</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E7%9A%84%E5%AF%BC%E5%85%A5%E5%8A%9F%E8%83%BD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E7%9A%84%E5%AF%BC%E5%85%A5%E5%8A%9F%E8%83%BD/</guid>
        <description>这个功能结合Chrome的Copy As Curl使用，非常的赞：</description>
      </item>
      
      <item>
        <title>Postman解决使用签名脚本，部分接口签名校验失败</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8%E7%AD%BE%E5%90%8D%E8%84%9A%E6%9C%AC%E9%83%A8%E5%88%86%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E5%A4%B1%E8%B4%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8%E7%AD%BE%E5%90%8D%E8%84%9A%E6%9C%AC%E9%83%A8%E5%88%86%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E5%A4%B1%E8%B4%A5/</guid>
        <description>问题描述 完成了一个postman的脚本（可以在该分类下找到该脚本源码），用于在请求时自动计算签名，使用该脚本时发现绝大多数请求的签名校验成功</description>
      </item>
      
      <item>
        <title>Postman请求前获取Token</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E8%AF%B7%E6%B1%82%E5%89%8D%E8%8E%B7%E5%8F%96token/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E8%AF%B7%E6%B1%82%E5%89%8D%E8%8E%B7%E5%8F%96token/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 var token const loginRequest = { url: login_url, method: &amp;#39;POST&amp;#39;, header: &amp;#39;Content-Type: application/json&amp;#39;, body: { mode: &amp;#39;raw&amp;#39;, raw: JSON.stringify({&amp;#34;account&amp;#34;:&amp;#34;junjie001@qq.com&amp;#34;,&amp;#34;pass&amp;#34;:&amp;#34;Hello123&amp;#34;,&amp;#34;level&amp;#34;:1,&amp;#34;inviteId&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;type&amp;#34;:0}) } } pm.sendRequest(loginRequest,function(err,res){ if(err) { console.log(err) } else { var response = JSON.parse(res.text()); token =</description>
      </item>
      
      <item>
        <title>Postman请求时自动完成md5计算</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E8%AF%B7%E6%B1%82%E6%97%B6%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90md5%E8%AE%A1%E7%AE%97/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/postman%E8%AF%B7%E6%B1%82%E6%97%B6%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90md5%E8%AE%A1%E7%AE%97/</guid>
        <description>相关操作 如图，点击Postman的Pre-request Script选项卡: 填写如下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
      </item>
      
      <item>
        <title>PrintWriter用法案例</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/printwriter%E7%94%A8%E6%B3%95%E6%A1%88%E4%BE%8B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/printwriter%E7%94%A8%E6%B3%95%E6%A1%88%E4%BE%8B/</guid>
        <description>这个东西用的比较少，今天看书时遇到了，整理一下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(7000); Socket clientSocket = serverSocket.accept(); BufferedReader br = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); PrintWriter pw = new PrintWriter(clientSocket.getOutputStream(),</description>
      </item>
      
      <item>
        <title>Profile配置在实践中使用起来很舒服</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/profile%E9%85%8D%E7%BD%AE%E5%9C%A8%E5%AE%9E%E8%B7%B5%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%B5%B7%E6%9D%A5%E5%BE%88%E8%88%92%E6%9C%8D/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/profile%E9%85%8D%E7%BD%AE%E5%9C%A8%E5%AE%9E%E8%B7%B5%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%B5%B7%E6%9D%A5%E5%BE%88%E8%88%92%E6%9C%8D/</guid>
        <description>我之前启动服务时使用不同的配置使用的profiles.profiles.active，但是我最近发现这个配置的不便之处，我的每个测试类都需要</description>
      </item>
      
      <item>
        <title>Promox VE 6.3装Realtek 8125 2.5G网卡驱动</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/promox-ve-6.3%E8%A3%85realtek-8125-2.5g%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/promox-ve-6.3%E8%A3%85realtek-8125-2.5g%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/</guid>
        <description>操作步骤 准备编译工具 apt update &amp;amp;&amp;amp; apt install pve-headers-$(uname -r) build-essential 从如下地址下载驱动源码 https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software 解压并编译 tar xvf r8125-9.004.01.tar cd r8125-9.004.01 make 安装驱动 cd src mkdir -p /lib/modules/5.4.78-2-pve/kernel/drivers/net/ethernet/realtek/ install -m 644 -o root r8125.ko /lib/modules/5.4.78-2-pve/kernel/drivers/net/ethernet/realtek/ # 20211011 mkdir -p /lib/modules/5.11.22-5-pve/kernel/drivers/net/ethernet/realtek/ install -m 644 -o root r8125.ko /lib/modules/5.11.22-5-pve/kernel/drivers/net/ethernet/realtek/ /sbin/depmod</description>
      </item>
      
      <item>
        <title>Property &#39;sqlSessionFactory&#39; or &#39;sqlSessionTemplate&#39; are required</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/property-sqlsessionfactory-or-sqlsessiontemplate-are-required/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/property-sqlsessionfactory-or-sqlsessiontemplate-are-required/</guid>
        <description>SpringBoot集成MyBatis-Plus后，启动时报如下错误： org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;userMapper&#39; defined in file [D:\Project\Mybatis\target\classes\fun\junjie\mybatis\mapper\UserMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property &#39;sqlSessionFactory&#39; or &#39;sqlSessionTemplate&#39; are required at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]</description>
      </item>
      
      <item>
        <title>Protobuf枚举类型的应用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/protobuf%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/protobuf%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>简单的实验 proto如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 syntax = &amp;#34;proto3&amp;#34;;message SearchRequest3 { enum Corpus{ UNIVERSAL = 0; WEB = 1; IMAGES = 2; LOCAL = 3; NEWS = 4; PRODUCTS = 5; VIDEO = 6; } string query = 1; int32 page_number =</description>
      </item>
      
      <item>
        <title>Protobuf生成的实体作为JSON.toJSON的参数时会无限循环</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/protobuf%E7%94%9F%E6%88%90%E7%9A%84%E5%AE%9E%E4%BD%93%E4%BD%9C%E4%B8%BAjson.tojson%E7%9A%84%E5%8F%82%E6%95%B0%E6%97%B6%E4%BC%9A%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/protobuf%E7%94%9F%E6%88%90%E7%9A%84%E5%AE%9E%E4%BD%93%E4%BD%9C%E4%B8%BAjson.tojson%E7%9A%84%E5%8F%82%E6%95%B0%E6%97%B6%E4%BC%9A%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF/</guid>
        <description>如下代码，会无限循环，知道堆栈移除： 1 2 3 4 5 6 7 StudentPOJO.Student item = StudentPOJO.Student.newBuilder() .setId(1) .setName(&amp;#34;100&amp;#34;) .build(); Object o = JSON.toJSON(item); 我使用的jar包版本分别为： 1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.protobuf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;protobuf-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.17.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;</description>
      </item>
      
      <item>
        <title>Protobuf的基础知识</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/protobuf%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/protobuf%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
        <description>ProtoBuf的字段编号 消息定义中的每个字段都有一个唯一的编号。这些字段编号用于在消息二进制格式中标识您的字段，一旦您的消息类型被使用，就</description>
      </item>
      
      <item>
        <title>Proxmox VE修改管理员IP地址</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/proxmox-ve%E4%BF%AE%E6%94%B9%E7%AE%A1%E7%90%86%E5%91%98ip%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/proxmox-ve%E4%BF%AE%E6%94%B9%E7%AE%A1%E7%90%86%E5%91%98ip%E5%9C%B0%E5%9D%80/</guid>
        <description>操作步骤 修改/etc/network/interfaces： # network interface settings; autogenerated # Please do NOT modify this file directly, unless you know what # you&#39;re doing. # # If you want to manage parts of the network configuration manually, # please utilize the &#39;source&#39; or &#39;source-directory&#39;</description>
      </item>
      
      <item>
        <title>PVE 6.x无法U盘安装</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve-6.x%E6%97%A0%E6%B3%95u%E7%9B%98%E5%AE%89%E8%A3%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve-6.x%E6%97%A0%E6%B3%95u%E7%9B%98%E5%AE%89%E8%A3%85/</guid>
        <description>这个问题我在4月份的时候已经注意到了，当时折腾的一段时间后没有结果，最后选择了先安装Debian，然后安装PVE 6.x。 经过一段时间的考虑，</description>
      </item>
      
      <item>
        <title>PVE与R8125网卡</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%B8%8Er8125%E7%BD%91%E5%8D%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%B8%8Er8125%E7%BD%91%E5%8D%A1/</guid>
        <description>R8125这张网卡，真的可以把我折磨的死去活来的，我甚至都考虑换一个I210网卡的机子了，不过今天可能真的一劳永逸的解决这个问题了。 之前将C</description>
      </item>
      
      <item>
        <title>PVE从6.x升级到7.x</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%BB%8E6.x%E5%8D%87%E7%BA%A7%E5%88%B07.x/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%BB%8E6.x%E5%8D%87%E7%BA%A7%E5%88%B07.x/</guid>
        <description>我本意是不想升级的，但是我编译R8125的驱动时下载不到相应的headers，所以只好升级PVE到7.x。 整个过程让我无法理解的是，我按照官</description>
      </item>
      
      <item>
        <title>PVE使用xterm.js</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%BD%BF%E7%94%A8xterm.js/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%BD%BF%E7%94%A8xterm.js/</guid>
        <description>已知xterm.js是个好东西，支持copy和paste，但是配置起来太麻烦了，性价比太低，所以我不想搞。资料如下： Serial Terminal PVE 5.1 設定 KVM 虛擬機能夠</description>
      </item>
      
      <item>
        <title>PVE修改Ubuntu虚拟机的硬盘大小</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%BF%AE%E6%94%B9ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A1%AC%E7%9B%98%E5%A4%A7%E5%B0%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E4%BF%AE%E6%94%B9ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%A1%AC%E7%9B%98%E5%A4%A7%E5%B0%8F/</guid>
        <description>事情的起因是这样的，我创建Ubuntu虚拟机时没有调整硬盘大小，结果磁盘只有32G，这个孔家大小在编译OpenWrt时完全不够用。按照我以往</description>
      </item>
      
      <item>
        <title>PVE删除lvm卷组</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E5%88%A0%E9%99%A4lvm%E5%8D%B7%E7%BB%84/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E5%88%A0%E9%99%A4lvm%E5%8D%B7%E7%BB%84/</guid>
        <description>vgremove pve2 使用的场景是不小心动了pve的卷组设置。 该方案需要结合下面的教程使用，否则的话无法删除PVE界面上的pve2 Proxmox 删除local-lvm 操作</description>
      </item>
      
      <item>
        <title>PVE添加一块硬盘作为存储</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E6%B7%BB%E5%8A%A0%E4%B8%80%E5%9D%97%E7%A1%AC%E7%9B%98%E4%BD%9C%E4%B8%BA%E5%AD%98%E5%82%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E6%B7%BB%E5%8A%A0%E4%B8%80%E5%9D%97%E7%A1%AC%E7%9B%98%E4%BD%9C%E4%B8%BA%E5%AD%98%E5%82%A8/</guid>
        <description>我觉得这篇文章给的方法最优雅，我采用的也是这样方案。 参考资料 Proxmox VE（PVE）如何添加多块硬盘</description>
      </item>
      
      <item>
        <title>PVE网卡直通</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E7%BD%91%E5%8D%A1%E7%9B%B4%E9%80%9A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/pve%E7%BD%91%E5%8D%A1%E7%9B%B4%E9%80%9A/</guid>
        <description>实际上，我现在不需要这个技术了，甚至在研究这个技术时，我悟出了一个人生道理：最优解不一定是最适合的解。 BIOS层面的东西我不讲了，因为我老早</description>
      </item>
      
      <item>
        <title>Pycharm设置sdk</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pycharm%E8%AE%BE%E7%BD%AEsdk/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pycharm%E8%AE%BE%E7%BD%AEsdk/</guid>
        <description>截图如下： 第三张图中，需要选到本地的一个exe文件。</description>
      </item>
      
      <item>
        <title>Pycharm远程调试</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pycharm%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/pycharm%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</guid>
        <description>一个字：非常爽。之前需要每次编辑完后，删除shell已有的问题件，然后将新的文件拖到shell中，然后手动执行，现在不需要这样做了，大大提升</description>
      </item>
      
      <item>
        <title>Python.h找不到</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/python.h%E6%89%BE%E4%B8%8D%E5%88%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/python.h%E6%89%BE%E4%B8%8D%E5%88%B0/</guid>
        <description>我执行的指令如下： yum search python | grep devel yum install python3-devel.x86_64 参考资料 解决Python.h找不到问题</description>
      </item>
      
      <item>
        <title>Python计算md5（更新版）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/python%E8%AE%A1%E7%AE%97md5%E6%9B%B4%E6%96%B0%E7%89%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/python%E8%AE%A1%E7%AE%97md5%E6%9B%B4%E6%96%B0%E7%89%88/</guid>
        <description>我之前使用的方式是一行一行的读取文件，然后调用update方法，需要写好多行代码，下面的写法更简洁一些： 1 2 3 4 5 6 7 8 import hashlib fd=open(&amp;#34;1.jpg&amp;#34;,&amp;#34;r&amp;#34;) fcont=fd.read() fmd5=hashlib.md5(fcont) print fmd5.hexdigest() #get 32 value</description>
      </item>
      
      <item>
        <title>Rancher的安装与导入K8S集群</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/rancher%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5k8s%E9%9B%86%E7%BE%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/rancher%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5k8s%E9%9B%86%E7%BE%A4/</guid>
        <description>安装Rancher 执行如下指令 docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher:latest 导入集群 首先在Cluster选项卡下选择Add Cluster。因为我已经配置过了，这个按钮</description>
      </item>
      
      <item>
        <title>rdate指令的使用</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/rdate%E6%8C%87%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/rdate%E6%8C%87%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>这个纯粹是用来玩的。用Netty开发了一个简单的时间服务，然后想用rdate去访问这个服务： rdate -p 192.168.28.118 # 输出 rdate: [192.168.28.118] Sat Aug 21 04:03:48 2021 Netty核心代码如下</description>
      </item>
      
      <item>
        <title>recursive参数</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/recursive%E5%8F%82%E6%95%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/recursive%E5%8F%82%E6%95%B0/</guid>
        <description>&amp;ndash;recursive用于选款克隆git子项目： git clone git://github.com/ansible/ansible.git --recursive</description>
      </item>
      
      <item>
        <title>RequestParam缺少参数，导致FeignClient注入失败</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/requestparam%E7%BC%BA%E5%B0%91%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4feignclient%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/requestparam%E7%BC%BA%E5%B0%91%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4feignclient%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5/</guid>
        <description>今天我在Feign Client中增加了如下的代码： 1 2 3 4 5 6 7 /** * 全量获取材料平台供应商列表（SRM） */ @GetMapping(&amp;#34;getSupplierById&amp;#34;) SupplierResponse getSupplierById(@RequestParam String supplierId); 结果本地安装后，会导致依</description>
      </item>
      
      <item>
        <title>reserved的应用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/reserved%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/reserved%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>使用如下代码： 1 2 3 4 5 6 7 8 9 10 11 syntax = &amp;#34;proto3&amp;#34;;message SearchRequest2 { reserved 1, 2; reserved &amp;#34;result_per_page&amp;#34;; string query = 1; repeated int32 page_number = 2; repeated int32 result_per_page = 3;} 编辑器会报错，且无法正常编译： 小结 需要思考一下，如何在实</description>
      </item>
      
      <item>
        <title>restTemplate.getForObject执行后的返回值字段全部为空</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/resttemplate.getforobject%E6%89%A7%E8%A1%8C%E5%90%8E%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%AD%97%E6%AE%B5%E5%85%A8%E9%83%A8%E4%B8%BA%E7%A9%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/resttemplate.getforobject%E6%89%A7%E8%A1%8C%E5%90%8E%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%AD%97%E6%AE%B5%E5%85%A8%E9%83%A8%E4%B8%BA%E7%A9%BA/</guid>
        <description>其实这个问题的原因很简单，就是传递给restTemplate.getForObject的类，没有Getter和Setter。 其实这种问题完全</description>
      </item>
      
      <item>
        <title>RestTemplate更高级配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/resttemplate%E6%9B%B4%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/resttemplate%E6%9B%B4%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/</guid>
        <description>今天在一个没有配置RestTemplate的项目中使用RestTemplate，所以我需要自己配置一下，按照我之前的方式配置好了后，发现报了</description>
      </item>
      
      <item>
        <title>RestTemplate配置打印请求的详细信息</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/resttemplate%E9%85%8D%E7%BD%AE%E6%89%93%E5%8D%B0%E8%AF%B7%E6%B1%82%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/resttemplate%E9%85%8D%E7%BD%AE%E6%89%93%E5%8D%B0%E8%AF%B7%E6%B1%82%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</guid>
        <description>代码如下： RestTemplateConfig类： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @Configuration public class RestTemplateConfig { @Bean public RestTemplate restTemplate(ClientHttpRequestFactory httpRequestFactory) { RestTemplate restTemplate =</description>
      </item>
      
      <item>
        <title>rm指令在移除的时候排除一些文件</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/rm%E6%8C%87%E4%BB%A4%E5%9C%A8%E7%A7%BB%E9%99%A4%E7%9A%84%E6%97%B6%E5%80%99%E6%8E%92%E9%99%A4%E4%B8%80%E4%BA%9B%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/rm%E6%8C%87%E4%BB%A4%E5%9C%A8%E7%A7%BB%E9%99%A4%E7%9A%84%E6%97%B6%E5%80%99%E6%8E%92%E9%99%A4%E4%B8%80%E4%BA%9B%E6%96%87%E4%BB%B6/</guid>
        <description>我的需求是这样的，我需要拉下一个仓库，然后删除这个仓库中除.git外的所有文件，然后在这个仓库中放入我的新文件，在提交到远程仓库中。 我最后使</description>
      </item>
      
      <item>
        <title>Servlet和Filter的区别</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/servlet%E5%92%8Cfilter%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/servlet%E5%92%8Cfilter%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
        <description>Strust2是基于Filter实现的，而SpringMVC是Servlet的扩展。我很好奇Filter和Servlet究竟有什么区别，查了</description>
      </item>
      
      <item>
        <title>ShardingSphere-Jdbc研究日志</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/shardingsphere-jdbc/shardingsphere-jdbc%E7%A0%94%E7%A9%B6%E6%97%A5%E5%BF%97/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/shardingsphere-jdbc/shardingsphere-jdbc%E7%A0%94%E7%A9%B6%E6%97%A5%E5%BF%97/</guid>
        <description>ShardingSphere-Jdbc研究告一段落，目前总结的配置文件和增加的类已经基本能够满足我们的业务需求。而且我已经对我使用到的每个技</description>
      </item>
      
      <item>
        <title>shell定义变量和使用变量</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/shell%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%92%8C%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/shell%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%92%8C%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F/</guid>
        <description>shell定义变量和使用变量 first_name=&amp;quot;Bob&amp;quot; second_name=&amp;quot;bob&amp;quot; your_name=&amp;quot;$first_name $second_name&amp;quot; your_name2=&#39;Bob bob&#39;</description>
      </item>
      
      <item>
        <title>snakeyaml驼峰与下滑线转化</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/snakeyaml/snakeyaml%E9%A9%BC%E5%B3%B0%E4%B8%8E%E4%B8%8B%E6%BB%91%E7%BA%BF%E8%BD%AC%E5%8C%96/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/snakeyaml/snakeyaml%E9%A9%BC%E5%B3%B0%E4%B8%8E%E4%B8%8B%E6%BB%91%E7%BA%BF%E8%BD%AC%E5%8C%96/</guid>
        <description>我的需求是这样的，我需要序列化一个对象成yaml文档，序列化时要求驼峰转下划线，且保持字段声明顺序。我原本计划通过自定义snakeyaml的</description>
      </item>
      
      <item>
        <title>snakyaml序列化时，类必须为public</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/snakeyaml/snakyaml%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E7%B1%BB%E5%BF%85%E9%A1%BB%E4%B8%BApublic/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/snakeyaml/snakyaml%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E7%B1%BB%E5%BF%85%E9%A1%BB%E4%B8%BApublic/</guid>
        <description>我的代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @Data @NoArgsConstructor public class TableRoot { private String tblName; private String tblDesc; private List&amp;lt;ColumnRoot&amp;gt; columns; public TableRoot(String tblName, String tblDesc) { this.tblName = tblName; this.tblDesc = tblDesc; this.columns = new ArrayList&amp;lt;&amp;gt;(); } @Data @SuppressWarnings(&amp;#34;WeakerAccess&amp;#34;) private static class ColumnRoot</description>
      </item>
      
      <item>
        <title>socks协议转http协议</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/socks%E5%8D%8F%E8%AE%AE%E8%BD%AChttp%E5%8D%8F%E8%AE%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/socks%E5%8D%8F%E8%AE%AE%E8%BD%AChttp%E5%8D%8F%E8%AE%AE/</guid>
        <description>我的工具监听的是socks协议，socks协议的dns请求仍然会通过原来的网络进行解析，而我们的工具中只能指定socks5://不能指定so</description>
      </item>
      
      <item>
        <title>Spring MVC如何上传文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/spring-mvc%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/spring-mvc%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 @Slf4j @RestController public class FileUploadController { @PostMapping(&amp;#34;/upload&amp;#34;) private ResponseVo upload( @RequestPart(&amp;#34;file&amp;#34;) MultipartFile file, @RequestPart(&amp;#34;files&amp;#34;) MultipartFile[] files) throws IOException { log.info(&amp;#34;</description>
      </item>
      
      <item>
        <title>Spring MVC对请求参数处理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/spring-mvc%E5%AF%B9%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/spring-mvc%E5%AF%B9%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</guid>
        <description>表单支持Delete、PUT参数 为了让表单支持DELETE、PUT等参数，我们需要配置HiddenHttpMethodFilter，配置了该</description>
      </item>
      
      <item>
        <title>spring-boot-configuration-processor包与构建插件的配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring-boot-configuration-processor%E5%8C%85%E4%B8%8E%E6%9E%84%E5%BB%BA%E6%8F%92%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring-boot-configuration-processor%E5%8C%85%E4%B8%8E%E6%9E%84%E5%BB%BA%E6%8F%92%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
        <description>为了编写配置方便，我们引入了如下的jar包： 1 2 3 4 5 6 7 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; 如果进行如上配置，则该jar包会打入我们最终可运行的jar包中，这样会浪</description>
      </item>
      
      <item>
        <title>spring.main.allow-bean-definition-overriding配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring.main.allow-bean-definition-overriding%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/spring.main.allow-bean-definition-overriding%E9%85%8D%E7%BD%AE/</guid>
        <description>是这样的，我在合并分支的时候，删除了原来的源码，从Git上拉取了一份新的代码，然后再Idea导入该源码并启动该项目，结果再启动的过程中一致报</description>
      </item>
      
      <item>
        <title>SpringBoot Actuator的base-path配置项</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/springboot-actuator%E7%9A%84base-path%E9%85%8D%E7%BD%AE%E9%A1%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/springboot-actuator%E7%9A%84base-path%E9%85%8D%E7%BD%AE%E9%A1%B9/</guid>
        <description>SpringBoot Actuator默认的地址是在server.servlet.context-path的基础上加上actuator/*，这个细节，我之前一直</description>
      </item>
      
      <item>
        <title>SpringBoot依赖版本被覆盖</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E8%A2%AB%E8%A6%86%E7%9B%96/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E8%A2%AB%E8%A6%86%E7%9B%96/</guid>
        <description>因为开发需求，引入了如下一些包： 1 2 3 4 5 6 7 8 9 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.sdstc.starter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;elasticjob-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 结果项目无法正常启动，报如下错误： *************************** APPLICATION FAILED TO START *************************** Description: An attempt was made to call a method that does not exist. The attempt</description>
      </item>
      
      <item>
        <title>SpringBoot修改默认的时区</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%B6%E5%8C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%B6%E5%8C%BA/</guid>
        <description>代码如下： 1 2 3 4 5 6 @PostConstruct void setDefaultTimezone() { TimeZone.setDefault(TimeZone.getTimeZone(&amp;#34;GMT&amp;#34;)); } 需要注意的是如下的写法并不会生效： 1 2 3 4 5 6 public static void main(String[] args) { TimeZone.setDefault(TimeZone.getTimeZone(&amp;#34;GMT&amp;#34;)); SpringApplication.run(MybatisApplication.class, args); } 查看当前实例的时区，可用如下代码： 1 2 3</description>
      </item>
      
      <item>
        <title>SpringBoot在代码中获取profiles信息</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E8%8E%B7%E5%8F%96profiles%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E8%8E%B7%E5%8F%96profiles%E4%BF%A1%E6%81%AF/</guid>
        <description>方案都挺不优雅的，尤其是在激活多个profiles时，先收集一下，下次用的时候再整理吧。 参考资料 SpringBoot获取当前运行环境三种方式</description>
      </item>
      
      <item>
        <title>SpringBoot容器初始化后执行回调</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E6%89%A7%E8%A1%8C%E5%9B%9E%E8%B0%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E6%89%A7%E8%A1%8C%E5%9B%9E%E8%B0%83/</guid>
        <description>使用场景是这样的，一个记录配置信息的类，想使用静态方法、静态字段记录一些存储在配置文件中的信息。我选择定义这些静态的字段，然后再定义一些需要</description>
      </item>
      
      <item>
        <title>SpringBoot的@Configuration配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E7%9A%84configuration%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E7%9A%84configuration%E9%85%8D%E7%BD%AE/</guid>
        <description>@Configuration的proxyBeanMethods参数 entity包 User.java 1 2 3 4 5 6 7 @NoArgsConstructor @AllArgsConstructor public class User { private String name; } Pet.java 1 2 3 4 5 6 7 @NoArgsConstructor @AllArgsConstructor public class</description>
      </item>
      
      <item>
        <title>SpringBoot获取Bean</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E8%8E%B7%E5%8F%96bean/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E8%8E%B7%E5%8F%96bean/</guid>
        <description>其实相关的技术我很早前就用在了项目中，但是一直没有整理笔记，最近在重构我工具包的代码时，又使用到了相关的技术，所以顺便整理一下。我工具包有个</description>
      </item>
      
      <item>
        <title>SpringBoot获取当前运行环境</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springboot%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</guid>
        <description>我们一部分接口在local环境并调不通，我将这些接口写在了manage层，我希望我有个开关当我在本地环境运行的时候，这些接口可以不被调用，我</description>
      </item>
      
      <item>
        <title>SpringBoot项目配置apollo访问地址</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/apollo/springboot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AEapollo%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/apollo/springboot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AEapollo%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80/</guid>
        <description>我没有系统的学习Apollo，仅记录一下我在开发中遇到的问题，如下，我们在sit环境中的配置文件如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 apollo:bootstrap:enabled:truenamespaces:application,mybatis-plus,datasource,redis,spring,ossapp:id:srmspring:main:allow-bean-definition-overriding:true 如果在本地</description>
      </item>
      
      <item>
        <title>SpringCloud使用Feign方案</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springcloud%E4%BD%BF%E7%94%A8feign%E6%96%B9%E6%A1%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/springcloud%E4%BD%BF%E7%94%A8feign%E6%96%B9%E6%A1%88/</guid>
        <description>操作步骤 如图两个项目mmp-wuid和mmp-member-brand项目 mmp-wuid项目下有如下module，其中admin、api、</description>
      </item>
      
      <item>
        <title>Spring与OAuth授权服务器</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/spring%E4%B8%8Eoauth%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/spring%E4%B8%8Eoauth%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>Spring团队原本不打算支持OAuth授权服务器，因为他们认OAuth授权服务器并不是一个高频的需求，但是因为社区中有大量的人提出了该需求</description>
      </item>
      
      <item>
        <title>Spring获取操作系统信息</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/spring%E8%8E%B7%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/spring%E8%8E%B7%E5%8F%96%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</guid>
        <description>代码如下： 1 2 3 4 ConfigurableEnvironment environment = applicationContext.getEnvironment(); environment.getProperty(&amp;#34;os.name&amp;#34;); 冷知识，第一次接触。</description>
      </item>
      
      <item>
        <title>Spring配置Spring MVC</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/spring%E9%85%8D%E7%BD%AEspring-mvc/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/spring%E9%85%8D%E7%BD%AEspring-mvc/</guid>
        <description>我对Spring的接触是直接从SpringBoot开始的，直接导致我没有接触一些原理层的东西，比如我们引入了starter-web后，Spr</description>
      </item>
      
      <item>
        <title>SSH 配置只允许秘钥登录</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/ssh/ssh-%E9%85%8D%E7%BD%AE%E5%8F%AA%E5%85%81%E8%AE%B8%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/ssh/ssh-%E9%85%8D%E7%BD%AE%E5%8F%AA%E5%85%81%E8%AE%B8%E7%A7%98%E9%92%A5%E7%99%BB%E5%BD%95/</guid>
        <description>操作步骤 如下代码生成秘钥对，可以一致按回车，使用默认值（我设置了密码） ssh-keygen 执行如下指令，将生成的pub秘钥添加到信任名单，并检查文件权限正确（</description>
      </item>
      
      <item>
        <title>Starter的命名习惯</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/starter%E7%9A%84%E5%91%BD%E5%90%8D%E4%B9%A0%E6%83%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/starter%E7%9A%84%E5%91%BD%E5%90%8D%E4%B9%A0%E6%83%AF/</guid>
        <description>官方的starter命名：spring-boot-starter-* 第三方的starter命名：*-spring-boot-starter M</description>
      </item>
      
      <item>
        <title>storage &#39;local-lvm&#39; does not exists</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/storage-local-lvm-does-not-exists/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/storage-local-lvm-does-not-exists/</guid>
        <description>操作步骤 只用如下指令： # 相比教程中的指令，增加了一个local参数（是因为我local-lvm不存在的原因） ./img2kvm openwrt.img 100 vm-100-disk-1 local</description>
      </item>
      
      <item>
        <title>str.format输出大括号本身</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/str.format%E8%BE%93%E5%87%BA%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%AC%E8%BA%AB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/str.format%E8%BE%93%E5%87%BA%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%9C%AC%E8%BA%AB/</guid>
        <description>两个大括号代表大括号本身，感觉不是很优雅。 我本来准备了一段案例代码，案例代码和hugo有冲突，导致无法编译，所以我就清理掉了。</description>
      </item>
      
      <item>
        <title>StringReader非常利于测试文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/stringreader%E9%9D%9E%E5%B8%B8%E5%88%A9%E4%BA%8E%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/stringreader%E9%9D%9E%E5%B8%B8%E5%88%A9%E4%BA%8E%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/</guid>
        <description>写Demo时，StringReader可以让你不用新开一份文件，而是直接通过String实现相同的效果： Reader reader = new StringReader(&amp;quot;hhhhhh&amp;quot;); 参考资料 String 、InputSt</description>
      </item>
      
      <item>
        <title>StringUtils去除文本首位空白</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/stringutils%E5%8E%BB%E9%99%A4%E6%96%87%E6%9C%AC%E9%A6%96%E4%BD%8D%E7%A9%BA%E7%99%BD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/stringutils%E5%8E%BB%E9%99%A4%E6%96%87%E6%9C%AC%E9%A6%96%E4%BD%8D%E7%A9%BA%E7%99%BD/</guid>
        <description>StringUtils.trim()仅去除控制字符，且字符编码需要小于32 StringUtils.strip()可以去除\t\r\n等 Str</description>
      </item>
      
      <item>
        <title>tar在解压时不支持创建目录</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/tar%E5%9C%A8%E8%A7%A3%E5%8E%8B%E6%97%B6%E4%B8%8D%E6%94%AF%E6%8C%81%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/tar%E5%9C%A8%E8%A7%A3%E5%8E%8B%E6%97%B6%E4%B8%8D%E6%94%AF%E6%8C%81%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95/</guid>
        <description>tar不支持创建目录 tar使用-C参数时，如果目录不存在，是没有办法创建的，不要在徒劳的去寻找解压并创建目录的方法了，我感觉我已经尝试做这件</description>
      </item>
      
      <item>
        <title>timestamptz查询结果用时间戳显示</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/timestamptz%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E7%94%A8%E6%97%B6%E9%97%B4%E6%88%B3%E6%98%BE%E7%A4%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/timestamptz%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E7%94%A8%E6%97%B6%E9%97%B4%E6%88%B3%E6%98%BE%E7%A4%BA/</guid>
        <description>这个方案目前还有很多问题，我个人认为是因为我还有很多细节处没有参透，所以结果很怪异。 先说明一下我的需求，当我开发了一个分页接口，我需要测试其</description>
      </item>
      
      <item>
        <title>timestamptz类型的研究</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/timestamptz%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%A0%94%E7%A9%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/timestamptz%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%A0%94%E7%A9%B6/</guid>
        <description>对timestamptz的研究，是为了项目内部时间戳的统一。统一时间戳可以有如下好处： 统一的认知层次，大家都清晰的知道，前端、后端、数据库中</description>
      </item>
      
      <item>
        <title>typeHandlersPackage只能配置成字符串</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/typehandlerspackage%E5%8F%AA%E8%83%BD%E9%85%8D%E7%BD%AE%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/typehandlerspackage%E5%8F%AA%E8%83%BD%E9%85%8D%E7%BD%AE%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
        <description>我是有需求将type-handler-package配置成字符串数组，但是官方给的文档中，该处只能配置成字符串，我觉得查看源码肯定可以找到配</description>
      </item>
      
      <item>
        <title>Typehandler转换出来的对象运行时状态和定义状态不符</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/typehandler%E8%BD%AC%E6%8D%A2%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8A%B6%E6%80%81%E5%92%8C%E5%AE%9A%E4%B9%89%E7%8A%B6%E6%80%81%E4%B8%8D%E7%AC%A6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/typehandler%E8%BD%AC%E6%8D%A2%E5%87%BA%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8A%B6%E6%80%81%E5%92%8C%E5%AE%9A%E4%B9%89%E7%8A%B6%E6%80%81%E4%B8%8D%E7%AC%A6/</guid>
        <description>我在开发新功能时发现如下的问题，我代码编写如下： 在运行时候value字段的值是： 是一个LinkedTreeMap，而不是我期待的Langua</description>
      </item>
      
      <item>
        <title>Ubunt 18.04关闭和开启图形界面</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubunt-18.04%E5%85%B3%E9%97%AD%E5%92%8C%E5%BC%80%E5%90%AF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubunt-18.04%E5%85%B3%E9%97%AD%E5%92%8C%E5%BC%80%E5%90%AF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/</guid>
        <description>操作步骤 关闭用户图形界面，使用tty登录 sudo systemctl set-default multi-user.target sudo reboot 开启用户图形界面 sudo systemctl set-default graphical.target sudo reboot 参考资料 Ubuntu18.04 关闭和开启图形界面</description>
      </item>
      
      <item>
        <title>Ubuntu 18.04使用802.1x协议登录网络</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-18.04%E4%BD%BF%E7%94%A8802.1x%E5%8D%8F%E8%AE%AE%E7%99%BB%E5%BD%95%E7%BD%91%E7%BB%9C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-18.04%E4%BD%BF%E7%94%A8802.1x%E5%8D%8F%E8%AE%AE%E7%99%BB%E5%BD%95%E7%BD%91%E7%BB%9C/</guid>
        <description>该教程为我工具机在公司访问网络用到的 操作步骤 代码如下： 1 2 3 4 5 6 7 nmcli con edit CONNECTION_NAME nmcli&amp;gt; set ipv4.method auto nmcli&amp;gt; set 802-1x.eap peap nmcli&amp;gt; set 802-1x.identity sadegh.k@atu.com nmcli&amp;gt; set 802-1x.phase2-auth mschapv2 nmcli&amp;gt; save nmcli&amp;gt; quit 参考教程 Ubuntu 18.04终端</description>
      </item>
      
      <item>
        <title>Ubuntu 18.04搭建Kubernetes（已作废）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/ubuntu-18.04%E6%90%AD%E5%BB%BAkubernetes%E5%B7%B2%E4%BD%9C%E5%BA%9F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/ubuntu-18.04%E6%90%AD%E5%BB%BAkubernetes%E5%B7%B2%E4%BD%9C%E5%BA%9F/</guid>
        <description>操作步骤 准备基础环境： 克隆我的个人项目，启动三台虚拟机 1 2 3 4 5 git clone https://github.com/junjie2018/vagrant.git cd vagrant/cluster/ssh_kubernetes/kubernetes vagrant up 关闭工具机的防火墙，使开发机能直接访问虚拟机： 1 2 3 sudo ufw disable 开发</description>
      </item>
      
      <item>
        <title>Ubuntu 18.04永久替换resolve.conf文件的方法</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-18.04%E6%B0%B8%E4%B9%85%E6%9B%BF%E6%8D%A2resolve.conf%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-18.04%E6%B0%B8%E4%B9%85%E6%9B%BF%E6%8D%A2resolve.conf%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        <description>处理步骤 三台虚拟机上运行如下指令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo tee -a /etc/resolvconf/resolv.conf.d/head &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; nameserver 172.17.30.1 nameserver 114.114.114.114 nameserver 114.114.115.115 EOF sudo tee -a /etc/resolvconf/resolv.conf.d/head &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; nameserver 192.168.31.1 nameserver 8.8.8.8 EOF 重启所有虚拟机 相关教程 Kubern</description>
      </item>
      
      <item>
        <title>Ubuntu 18.04配置静态地址</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-18.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-18.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E5%9C%B0%E5%9D%80/</guid>
        <description>操作步骤 编辑/etc/netplan/01-network-manager-all.yaml（你的机器上可能不是这个文件名，也有可能有多个文</description>
      </item>
      
      <item>
        <title>Ubuntu 20.04网络调整</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-20.04%E7%BD%91%E7%BB%9C%E8%B0%83%E6%95%B4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu-20.04%E7%BD%91%E7%BB%9C%E8%B0%83%E6%95%B4/</guid>
        <description>我使用的方法 禁用ssytemd-resolved（不用犹豫，这东西占用我53号端口，是肯定不行的） sudo systemctl disable systemd-resolved sudo systemctl stop systemd-resolved 修改/etc/Networ</description>
      </item>
      
      <item>
        <title>Ubuntu18.04装OpenJDK 7</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu18.04%E8%A3%85openjdk-7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu18.04%E8%A3%85openjdk-7/</guid>
        <description>操作步骤 https://jdk.java.net/java-se-ri/7下载openJDK 7安装包 解压，设置环境变量 1 2 3 4 5 6 7 8 9 tar -zxvf</description>
      </item>
      
      <item>
        <title>Ubuntu中的environment文件</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu%E4%B8%AD%E7%9A%84environment%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu%E4%B8%AD%E7%9A%84environment%E6%96%87%E4%BB%B6/</guid>
        <description>最近按照教程配置了一份environment文件，在里面配置了代理，发现apt、curl都可以使用代理了，之前的方案是使用all_proxy</description>
      </item>
      
      <item>
        <title>Ubuntu安装并配置OpenSSH</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEopenssh/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEopenssh/</guid>
        <description>操作步骤 安装openssh服务端 sudo apt-get install openssh-server 编辑配置文件/etc/ssh/sshd_config改PermitRootLogin为yes # Authentication: LoginGraceTime 120</description>
      </item>
      
      <item>
        <title>Ubuntu设置systemd-resolved</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu%E8%AE%BE%E7%BD%AEsystemd-resolved/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/ubuntu%E8%AE%BE%E7%BD%AEsystemd-resolved/</guid>
        <description>sudo systemctl disable systemd-resolved sudo systemctl stop systemd-resolved sudo systemctl enable systemd-resolved sudo systemctl start systemd-resolved</description>
      </item>
      
      <item>
        <title>Unsatisfied dependency expressed through field &#39;baseMapper&#39;</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/unsatisfied-dependency-expressed-through-field-basemapper/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/unsatisfied-dependency-expressed-through-field-basemapper/</guid>
        <description>这个问题应该属于我们项目中的问题，我按照要求继承项目后，在mapper包下开发自己的Mapper，结果在启动的时候发现Mapper无法被注入</description>
      </item>
      
      <item>
        <title>vs code同时处理多行</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/vs-code%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86%E5%A4%9A%E8%A1%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/vs-code%E5%90%8C%E6%97%B6%E5%A4%84%E7%90%86%E5%A4%9A%E8%A1%8C/</guid>
        <description>3种场景： alt+鼠标左键（光标点中一行算一行） alt+鼠标左键拖动（多次）（每次拖动选中一块内容） shift+alt+鼠标左键拖动（光标同</description>
      </item>
      
      <item>
        <title>VS Code开启和关闭全屏</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/vs-code%E5%BC%80%E5%90%AF%E5%92%8C%E5%85%B3%E9%97%AD%E5%85%A8%E5%B1%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/vs-code%E5%BC%80%E5%90%AF%E5%92%8C%E5%85%B3%E9%97%AD%E5%85%A8%E5%B1%8F/</guid>
        <description>不小心误触了键盘，打开了VS Code的全屏，我不是很需要这个功能，简单查了一下，F11键快速打开或关闭全屏。</description>
      </item>
      
      <item>
        <title>VS Code配置使用Idea快捷键</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/vs-code%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/vscode/vs-code%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
        <description>下载该插件，重启即可： IntelliJ IDEA Keybindings</description>
      </item>
      
      <item>
        <title>WebApplicationContext是什么</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/webapplicationcontext%E6%98%AF%E4%BB%80%E4%B9%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/webapplicationcontext%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
        <description>WebApplicationContext继承自ApplicationContext，它提供了一些web应用经常需要用到的特性。WebApp</description>
      </item>
      
      <item>
        <title>WebApplicationInitializer接口</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/webapplicationinitializer%E6%8E%A5%E5%8F%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/webapplicationinitializer%E6%8E%A5%E5%8F%A3/</guid>
        <description>目前先整理一下这部分资料，以后要深入学习的。 WebApplicationInitializer是Spring MVC提供的一个接口，它会查找你</description>
      </item>
      
      <item>
        <title>Win 10使用KT Connect（稳定版）（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/win-10%E4%BD%BF%E7%94%A8kt-connect%E7%A8%B3%E5%AE%9A%E7%89%88%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/win-10%E4%BD%BF%E7%94%A8kt-connect%E7%A8%B3%E5%AE%9A%E7%89%88%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description>这是总结目前遇到问题总结出来的方案。这个方案主要分为三层，</description>
      </item>
      
      <item>
        <title>Win 10查看mac地址</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win-10%E6%9F%A5%E7%9C%8Bmac%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win-10%E6%9F%A5%E7%9C%8Bmac%E5%9C%B0%E5%9D%80/</guid>
        <description>指令如下： ipconfig /all</description>
      </item>
      
      <item>
        <title>Win10优化内存占用</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</guid>
        <description>在我J4125上装了Win10，用作下载器，但是内存占用太高了，吃了我6G的内存，所以需要进行一下优化，优化流程如下： 激活Window系统 关</description>
      </item>
      
      <item>
        <title>win10右下角图表显示</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E5%8F%B3%E4%B8%8B%E8%A7%92%E5%9B%BE%E8%A1%A8%E6%98%BE%E7%A4%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E5%8F%B3%E4%B8%8B%E8%A7%92%E5%9B%BE%E8%A1%A8%E6%98%BE%E7%A4%BA/</guid>
        <description>懒的整理，这种东西就是十年半个月用不到一次： https://jingyan.baidu.com/article/e73e26c01bc1c364acb6a734.html 20210928后续： windows图标经常莫名其妙的缩回去，没想到这个教程使用频率这么高。 2</description>
      </item>
      
      <item>
        <title>Win10开启远程桌面</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</guid>
        <description>另外需要说一下，win家庭版不支持远程桌面，打消这个念头吧。 参考资料 win10怎么开启远程桌面</description>
      </item>
      
      <item>
        <title>win10打开telnet服务</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%89%93%E5%BC%80telnet%E6%9C%8D%E5%8A%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%89%93%E5%BC%80telnet%E6%9C%8D%E5%8A%A1/</guid>
        <description>打开控制面板，搜索程序，选择启用或者关闭Window功能： 选择Telnet客户端，点击确定： 参考资料 在windows10下面打开TELNET</description>
      </item>
      
      <item>
        <title>Win10查看关机事件</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E5%85%B3%E6%9C%BA%E4%BA%8B%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E5%85%B3%E6%9C%BA%E4%BA%8B%E4%BB%B6/</guid>
        <description>用的少，但是又不得不用，截图如下： 20210630后续: 额，没想到这个东东我用的挺多的，我老是忘记打卡。</description>
      </item>
      
      <item>
        <title>win10查看局域网中ip</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%ADip/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%ADip/</guid>
        <description>我将家庭内部网络切换成了172.20.11网段，避免内网穿透时与其他网络环境中的网段冲突。切换后我需要知道我网络中的所有新Ip地址，故找到了</description>
      </item>
      
      <item>
        <title>win10查看活动的网络连接</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E6%B4%BB%E5%8A%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E6%B4%BB%E5%8A%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</guid>
        <description>netstat -ano | findstr &amp;ldquo;192.168.13.113&amp;rdquo; 一个指令多种使用场景。 参考资料 Windows 下查看网络连接</description>
      </item>
      
      <item>
        <title>win10查看目录树</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95%E6%A0%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95%E6%A0%91/</guid>
        <description>指令如下： tree /F 如果不要/F的话，则只显示目录。</description>
      </item>
      
      <item>
        <title>win10查看端口占用情况</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</guid>
        <description>和Linux需求一致，有时候服务启动起来了，需要检查是否正在监听着： netstat -aon | findstr &amp;quot;9050&amp;quot; 参考资料 windows下查看端口监听情况</description>
      </item>
      
      <item>
        <title>win10设置pip3代理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/win10%E8%AE%BE%E7%BD%AEpip3%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/win10%E8%AE%BE%E7%BD%AEpip3%E4%BB%A3%E7%90%86/</guid>
        <description>这个解决方案是我看教程的时候自己猜出来的，我没有找到很清晰的描述这个问题的解决方案。解决方法如下： pip config set global.proxy http://127.0.0.1:1080 我在整理笔记时发现，我之前解决过</description>
      </item>
      
      <item>
        <title>Win10路由表常用操作（待完善）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E8%B7%AF%E7%94%B1%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%BE%85%E5%AE%8C%E5%96%84/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win10%E8%B7%AF%E7%94%B1%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%BE%85%E5%AE%8C%E5%96%84/</guid>
        <description>route print route delete 192.168.31.1 mask 255.255.255.0</description>
      </item>
      
      <item>
        <title>Windows卸载安全助手</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/windows%E5%8D%B8%E8%BD%BD%E5%AE%89%E5%85%A8%E5%8A%A9%E6%89%8B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/windows%E5%8D%B8%E8%BD%BD%E5%AE%89%E5%85%A8%E5%8A%A9%E6%89%8B/</guid>
        <description>越来越讨厌Windows系统了！！！ 20211011实践 实践中，我是通过火绒剑关闭相关进程的。关闭进程后，文件夹才可以删除，我直接用git b</description>
      </item>
      
      <item>
        <title>Windows安装ElasticSearch</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/elasticsearch/windows%E5%AE%89%E8%A3%85elasticsearch/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/elasticsearch/windows%E5%AE%89%E8%A3%85elasticsearch/</guid>
        <description>Windows安装ElasticSearch，用于学习环境 下载二进制文件，解压后进入bin目录 使用管理员身份运行elasticsearch.</description>
      </item>
      
      <item>
        <title>Windows杀死一个进程</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/windows%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/windows%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B/</guid>
        <description>这个指令之前查过，给忘记了，现在整理一下： tskill pid</description>
      </item>
      
      <item>
        <title>Windows查看路由信息</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/windows%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/ubuntu/windows%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF/</guid>
        <description>操作步骤 指令如下 route print route print | findstr &amp;quot;172&amp;quot; route delete 172.17.0.0 route add 172.17.0.0 MASK 255.255.0.0 172.17.30.1 route add 172.17.0.0 MASK 255.255.0.0 10.8.0.1 route delete 172.17.0.0 route add 172.17.0.0 MASK 255.255.0.0 172.17.0.1</description>
      </item>
      
      <item>
        <title>win上进入非C盘的文件夹</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win%E4%B8%8A%E8%BF%9B%E5%85%A5%E9%9D%9Ec%E7%9B%98%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win%E4%B8%8A%E8%BF%9B%E5%85%A5%E9%9D%9Ec%E7%9B%98%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
        <description>如下代码可直接进入非C盘的目录： 1 2 3 cd /D D:\Blogs 如不不用/D参数，则该指令无法正常进入该目录。 参考资料 bat文件直接进入某个盘符目录</description>
      </item>
      
      <item>
        <title>win查看所有的环境变量</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
        <description>使用指令如下： set Java中查看所有环境变量，使用如下代码： 1 2 3 4 5 public static void main(String[] args) { Map&amp;lt;String, String&amp;gt; getenv = System.getenv(); }</description>
      </item>
      
      <item>
        <title>win版本的curl设置代理及请求头</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win%E7%89%88%E6%9C%AC%E7%9A%84curl%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E5%8F%8A%E8%AF%B7%E6%B1%82%E5%A4%B4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/win%E7%89%88%E6%9C%AC%E7%9A%84curl%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E5%8F%8A%E8%AF%B7%E6%B1%82%E5%A4%B4/</guid>
        <description>测试自己接口用的，我使用的指令如下： curl --proxy socks5h://192.168.27.15:12345 -H token:1374675177769156610:web:8085e1bc1d7b3325cae1bcd6684f853b http://dyf/dyf/field</description>
      </item>
      
      <item>
        <title>workdir参数导致docker启动时无法找到脚本</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/workdir%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4docker%E5%90%AF%E5%8A%A8%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/workdir%E5%8F%82%E6%95%B0%E5%AF%BC%E8%87%B4docker%E5%90%AF%E5%8A%A8%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</guid>
        <description>我在本地测试Dockerfile时，习惯性的将ENTRYPOINT写成如下形式： 1 2 3 ENTRYPOINT [&amp;#34;./entrypoint.sh&amp;#34;] 但是如果这样写，在GitHub Actions中将会</description>
      </item>
      
      <item>
        <title>XShell不小心变透明了</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/xshell/xshell%E4%B8%8D%E5%B0%8F%E5%BF%83%E5%8F%98%E9%80%8F%E6%98%8E%E4%BA%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/xshell/xshell%E4%B8%8D%E5%B0%8F%E5%BF%83%E5%8F%98%E9%80%8F%E6%98%8E%E4%BA%86/</guid>
        <description>我也不知道误触了什么案件，XShell突然变透明了，通过如下方式改回来： 我评估了下，感觉这个功能没有什么适用场景。</description>
      </item>
      
      <item>
        <title>XShell导出配置文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/xshell/xshell%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/xshell/xshell%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
        <description>一图胜千言万语</description>
      </item>
      
      <item>
        <title>xshell退出时关闭了通过nohup启动的应用</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/xshell%E9%80%80%E5%87%BA%E6%97%B6%E5%85%B3%E9%97%AD%E4%BA%86%E9%80%9A%E8%BF%87nohup%E5%90%AF%E5%8A%A8%E7%9A%84%E5%BA%94%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/xshell%E9%80%80%E5%87%BA%E6%97%B6%E5%85%B3%E9%97%AD%E4%BA%86%E9%80%9A%E8%BF%87nohup%E5%90%AF%E5%8A%A8%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
        <description>我也是第一次遇到这种情况，我拿一台虚拟机帮同事开KT Connect的代码，并开启了一个端口转发，如下代码所示： nohup ktctl --namespace=dev connect --method=socks5 --dump2hosts &amp;gt; ktctl.log 2&amp;gt;&amp;amp;1 &amp;amp; nohup polipo -c /opt/polipo/config &amp;gt;</description>
      </item>
      
      <item>
        <title>XShell隧道技术的利用</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/xshell/xshell%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E7%9A%84%E5%88%A9%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/xshell/xshell%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E7%9A%84%E5%88%A9%E7%94%A8/</guid>
        <description>不用再在跳板机上手动ssh生产机了，还能往生产机上传文件，不使用该技术，则需要先ssh跳板机，然后在ssh到生产机，而且还不能向生产机传文件</description>
      </item>
      
      <item>
        <title>yapi默认账号密码</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/yapi%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/easyyapi/yapi%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</guid>
        <description>账号：admin@admin.com 密码：ymfe.org 参考资料 我想问下默认超级管理员的账号密码是啥</description>
      </item>
      
      <item>
        <title>ZDoc主题抖动的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/zdoc%E4%B8%BB%E9%A2%98%E6%8A%96%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/zdoc%E4%B8%BB%E9%A2%98%E6%8A%96%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>当目录过程，展开的时候超过了一屏的高度时，页面会出现抖动的情况，抖动的原因是因为超过一屏时浏览器右侧会出现滚动条，该滚动条影响了屏幕的宽度，</description>
      </item>
      
      <item>
        <title>【笔记】CSRF攻击</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/%E7%AC%94%E8%AE%B0csrf%E6%94%BB%E5%87%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/%E7%AC%94%E8%AE%B0csrf%E6%94%BB%E5%87%BB/</guid>
        <description>恶意应用软件让浏览器向已完成身份认证的网站发起请求，执行有害的操作，这就是CSRF。这是怎么发生的呢？记住主要的一点，浏览器可以向任何源发送</description>
      </item>
      
      <item>
        <title>一个蠢问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%B8%80%E4%B8%AA%E8%A0%A2%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%B8%80%E4%B8%AA%E8%A0%A2%E9%97%AE%E9%A2%98/</guid>
        <description>初始化K8S集群的时候，有如下报错： [root@node-template ~]# kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=172.20.11.201 [init] Using Kubernetes version: v1.21.1 [preflight] Running pre-flight checks [WARNING IsDockerSystemdCheck]: detected &amp;quot;cgroupfs&amp;quot; as the Docker cgroup driver. The recommended driver is &amp;quot;systemd&amp;quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/ [preflight] Pulling images required for setting up a Kubernetes cluster [preflight] This might take a minute or</description>
      </item>
      
      <item>
        <title>一个骚气的小工具，查看方法调用轨迹</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E4%B8%80%E4%B8%AA%E9%AA%9A%E6%B0%94%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E8%BD%A8%E8%BF%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E4%B8%80%E4%B8%AA%E9%AA%9A%E6%B0%94%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%9F%A5%E7%9C%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E8%BD%A8%E8%BF%B9/</guid>
        <description>最近在学习Netty，为了更好的查看方法调用顺序，开发了如下小工具： 1 2 3 4 5 6 7 8 9 10 11 public class CommonUtils { public static void logCalling() { StackTraceElement[] mStacks = Thread.currentThread().getStackTrace(); if (mStacks.length &amp;gt;= 3) { System.out.printf(&amp;#34;Calling: %s.%s()\n&amp;#34;, mStacks[2].getClassName(), mStacks[2].getMethodName()); } } }</description>
      </item>
      
      <item>
        <title>一些小的知识点</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
        <description>写入时自动释放Buffer 如下代码： 1 2 3 4 5 6 7 8 9 10 public class DiscardServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { ctx.write(msg); ctx.flush(); } } 此处在ChannelInboundHandler</description>
      </item>
      
      <item>
        <title>一段插件配置代码与这样配置的原因</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E4%B8%80%E6%AE%B5%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E4%B8%8E%E8%BF%99%E6%A0%B7%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8E%9F%E5%9B%A0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E4%B8%80%E6%AE%B5%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E4%B8%8E%E8%BF%99%E6%A0%B7%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8E%9F%E5%9B%A0/</guid>
        <description>今天在整理框架的时候，看到了一段很奇怪的maven插件配置代码，如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt;</description>
      </item>
      
      <item>
        <title>一键清理掉所有无用的Collection</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/%E4%B8%80%E9%94%AE%E6%B8%85%E7%90%86%E6%8E%89%E6%89%80%E6%9C%89%E6%97%A0%E7%94%A8%E7%9A%84collection/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/%E4%B8%80%E9%94%AE%E6%B8%85%E7%90%86%E6%8E%89%E6%89%80%E6%9C%89%E6%97%A0%E7%94%A8%E7%9A%84collection/</guid>
        <description>实际上我没有找到这样的功能，所以使用Postman的Api，自己开发了一个Python脚本，脚本内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
      </item>
      
      <item>
        <title>下载Win10镜像</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E4%B8%8B%E8%BD%BDwin10%E9%95%9C%E5%83%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E4%B8%8B%E8%BD%BDwin10%E9%95%9C%E5%83%8F/</guid>
        <description>这个方案并不直观，步骤如下： 进入官网下载页面 按F12，设置成手机模式，然后刷新页面 完成两个多选框后，会弹出选择32位还是64位的页面 我遇到的</description>
      </item>
      
      <item>
        <title>不开启feign客户端，就无法使用oss签名功能</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E4%B8%8D%E5%BC%80%E5%90%AFfeign%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B0%B1%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8oss%E7%AD%BE%E5%90%8D%E5%8A%9F%E8%83%BD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E4%B8%8D%E5%BC%80%E5%90%AFfeign%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B0%B1%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8oss%E7%AD%BE%E5%90%8D%E5%8A%9F%E8%83%BD/</guid>
        <description>其实这个问题不值得记录，但是实在是太巧合了，我刚修复好这个问题，另一个同事也遇到了，所以我就直接告诉他怎么修复了，他解决这个问题所花费的时间</description>
      </item>
      
      <item>
        <title>不要吞掉异常信息，否则只能自食其果</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E4%B8%8D%E8%A6%81%E5%90%9E%E6%8E%89%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E5%90%A6%E5%88%99%E5%8F%AA%E8%83%BD%E8%87%AA%E9%A3%9F%E5%85%B6%E6%9E%9C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E4%B8%8D%E8%A6%81%E5%90%9E%E6%8E%89%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%E5%90%A6%E5%88%99%E5%8F%AA%E8%83%BD%E8%87%AA%E9%A3%9F%E5%85%B6%E6%9E%9C/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 private List&amp;lt;Table&amp;gt; getOriginTableInfos() { if (this.jdbcTemplate.getDataSource() == null) { throw new Runt</description>
      </item>
      
      <item>
        <title>不要尝试将一个Linux系统配置成网关服务器</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E4%B8%8D%E8%A6%81%E5%B0%9D%E8%AF%95%E5%B0%86%E4%B8%80%E4%B8%AAlinux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E6%88%90%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E4%B8%8D%E8%A6%81%E5%B0%9D%E8%AF%95%E5%B0%86%E4%B8%80%E4%B8%AAlinux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E6%88%90%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>我计划自己将一个Linux系统变成路由器。 为什么会有这样奇奇怪怪的需求呢？我原本是计划在J4125那台机器上做虚拟化，然后装OpenWRT外</description>
      </item>
      
      <item>
        <title>不计划对GitPython等技术进行研究</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%B8%8D%E8%AE%A1%E5%88%92%E5%AF%B9gitpython%E7%AD%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8C%E7%A0%94%E7%A9%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%B8%8D%E8%AE%A1%E5%88%92%E5%AF%B9gitpython%E7%AD%89%E6%8A%80%E6%9C%AF%E8%BF%9B%E8%A1%8C%E7%A0%94%E7%A9%B6/</guid>
        <description>之前有考虑研究GitPython、PyGit，然后在python脚本中操作Git仓库，但是最近在使用的过程中发现相关资料有点少，而且运行的时</description>
      </item>
      
      <item>
        <title>为Idea配置内存不足导致的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E4%B8%BAidea%E9%85%8D%E7%BD%AE%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E4%B8%BAidea%E9%85%8D%E7%BD%AE%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 # # There is insufficient memory for the Java Runtime Environment to continue. # Native memory allocation (malloc) failed to allocate 949216 bytes for Chunk::new # An error report file with more information is saved as: # D:\Project\dyf\hs_err_pid20632.log [thread 15576 also had an error] # # Compiler replay data is saved as: # D:\Project\dyf\replay_pid20632.log Disconnected from the target VM, address: &#39;127.0.0.1:63994&#39;, transport: &#39;socket&#39; Process finished with</description>
      </item>
      
      <item>
        <title>为root用户添加密码</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E4%B8%BAroot%E7%94%A8%E6%88%B7%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E4%B8%BAroot%E7%94%A8%E6%88%B7%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81/</guid>
        <description>操作步骤 指令如下 1 2 3 sudo passwd root</description>
      </item>
      
      <item>
        <title>为root用户配置kubectl</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/%E4%B8%BAroot%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AEkubectl/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/%E4%B8%BAroot%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AEkubectl/</guid>
        <description>说明 这不是一个优雅的方案，只是为了临时用一下 我感觉阿里云也是用的这个方案，但是可能它用的层次更高一些，我只是简单的照搬 操作步骤 master 切换到roo</description>
      </item>
      
      <item>
        <title>为Yum指定Python2</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E4%B8%BAyum%E6%8C%87%E5%AE%9Apython2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E4%B8%BAyum%E6%8C%87%E5%AE%9Apython2/</guid>
        <description>我使用频率较高的是Python3，但是Yum工具又必须使用Python2打开，所以我不得不频繁的切换Python软连接的指向。 我尝试过将/u</description>
      </item>
      
      <item>
        <title>为什么决定学习H2及DataGrip</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%B3%E5%AE%9A%E5%AD%A6%E4%B9%A0h2%E5%8F%8Adatagrip/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%B3%E5%AE%9A%E5%AD%A6%E4%B9%A0h2%E5%8F%8Adatagrip/</guid>
        <description>在写Demo时，一旦引入第三方组件，再次启动该Demo的动力就会减少80%，尤其是数据库之类的第三方组件，所以我决定好好研究一下H2数据库。</description>
      </item>
      
      <item>
        <title>为已存在的表删除、增加、修改一个字段</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/%E4%B8%BA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E8%A1%A8%E5%88%A0%E9%99%A4%E5%A2%9E%E5%8A%A0%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/%E4%B8%BA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E8%A1%A8%E5%88%A0%E9%99%A4%E5%A2%9E%E5%8A%A0%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5/</guid>
        <description>增加字段 1 2 3 4 5 ALTERTABLEt_company_package_manageADDCOLUMNaudit_opinionvarch</description>
      </item>
      
      <item>
        <title>为系统新加一块硬盘</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E4%B8%BA%E7%B3%BB%E7%BB%9F%E6%96%B0%E5%8A%A0%E4%B8%80%E5%9D%97%E7%A1%AC%E7%9B%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E4%B8%BA%E7%B3%BB%E7%BB%9F%E6%96%B0%E5%8A%A0%E4%B8%80%E5%9D%97%E7%A1%AC%E7%9B%98/</guid>
        <description>我采用的方案比较简单： ls /dev/sd* // 进行分区 fdisk /dev/sdb n p 转折（使用默认） 转折（使用默认） w // 创建文件系统 mkfs -t ext4 /dev/sdb1 // 将硬盘信息写入/etc/fstab echo /dev/sdb1</description>
      </item>
      
      <item>
        <title>从Docker容器内拷贝资料到宿主机</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E4%BB%8Edocker%E5%AE%B9%E5%99%A8%E5%86%85%E6%8B%B7%E8%B4%9D%E8%B5%84%E6%96%99%E5%88%B0%E5%AE%BF%E4%B8%BB%E6%9C%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E4%BB%8Edocker%E5%AE%B9%E5%99%A8%E5%86%85%E6%8B%B7%E8%B4%9D%E8%B5%84%E6%96%99%E5%88%B0%E5%AE%BF%E4%B8%BB%E6%9C%BA/</guid>
        <description>我这个需求产生于修复EasyApi的官方提供的渲染服务的Bug。就是我按照官方说明做了镜像后，无法正常启动，所以我决定先在本地试试能否正常启</description>
      </item>
      
      <item>
        <title>从Header中获取值</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E4%BB%8Eheader%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%80%BC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E4%BB%8Eheader%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%80%BC/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /** * 硬件校准信息上报 */ @PostMapping(&amp;#34;/client/calibration/report&amp;#34;) @PassToken public ResponseVo&amp;lt;Object&amp;gt; clientCalibrationReport( @RequestHeader(value = &amp;#34;terminal&amp;#34;) Integer terminal, @Valid @RequestBody ClientCalibrationReportRequest request) { clientCalibrationReportService.saveClientCalibrationReport(terminal, request); return ResponseVo.createSuccess(); } 参考资料 java 获取HttpRequest Header</description>
      </item>
      
      <item>
        <title>从json文件生成java对象的小工具</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%BB%8Ejson%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%BB%8Ejson%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid>
        <description>20210420后续： 实际上我有点不想用Python去开发一些小工具了，Python好久不摸，API忘得太快了，Ide又给不到什么有用的信息</description>
      </item>
      
      <item>
        <title>从xml配置文件到基于注解的配置文件的演进</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BB%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%B0%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%BC%94%E8%BF%9B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BB%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%B0%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%BC%94%E8%BF%9B/</guid>
        <description>代码如下（该代码未执行，未在编辑器中编辑，纯粹记录使用）： 1 2 3 4 5 6 7 // beans.xml ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&amp;#34;beans.xml&amp;#34;); // xxxConfiguration.class ApplicationContext applicationContext = new AnnotationConfigApplicationContext(xxxConfiguration.class)</description>
      </item>
      
      <item>
        <title>从请求到入库都使用枚举</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E5%85%A5%E5%BA%93%E9%83%BD%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E5%85%A5%E5%BA%93%E9%83%BD%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE/</guid>
        <description>核心的目标是，用户传递的某个字段的值，在@RequestBody转换后，自动转换成枚举，因为枚举是全局的，所以可以直接赋值给entity的相</description>
      </item>
      
      <item>
        <title>代码开发常用依赖</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/</guid>
        <description>这些依赖高频率的使用在我写Demo时： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.18.20&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.12.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt;</description>
      </item>
      
      <item>
        <title>使用@Value赋值</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8value%E8%B5%8B%E5%80%BC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8value%E8%B5%8B%E5%80%BC/</guid>
        <description>@Value注解我们平时用于从application.yml中获取配置，给到类中的字段，我一直以为这是这个字段存在的价值，知道最近才知道，这</description>
      </item>
      
      <item>
        <title>使用Anaconda遇到的一些问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%BD%BF%E7%94%A8anaconda%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%BD%BF%E7%94%A8anaconda%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
        <description>安装Anaconda的时候，我只修改了一些安装路径，其他选项都操持了默认。结果完成安装后，我发现我输入conda --version没有任何反</description>
      </item>
      
      <item>
        <title>使用Docker快速启动一个RabbitMQ实例</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E4%BD%BF%E7%94%A8docker%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AArabbitmq%E5%AE%9E%E4%BE%8B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E4%BD%BF%E7%94%A8docker%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AArabbitmq%E5%AE%9E%E4%BE%8B/</guid>
        <description>操作步骤 指令如下 1 2 3 4 5 6 7 sudo docker pull docker.io/rabbitmq:3.8-management sudo docker run \ --name rabbitmq -d \ -p 15672:15672 -p 5672:5672 \ docker.io/rabbitmq:3.8-management 添加账号 1 2 3 4 5 6 7 sudo docker exec -i -t rabbitmq bin/bash rabbitmqctl add_user root 123456 rabbitmqctl set_permissions -p / root &amp;#34;.*&amp;#34; &amp;#34;.*&amp;#34; &amp;#34;.*&amp;#34; rabbitmqctl set_user_tags root administrator rabbitmqctl list_users 管</description>
      </item>
      
      <item>
        <title>使用FactoryBean注入Bean</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8factorybean%E6%B3%A8%E5%85%A5bean/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E4%BD%BF%E7%94%A8factorybean%E6%B3%A8%E5%85%A5bean/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class MyFactoryBean implements FactoryBean { @Override public Object getObject() throws Exception { return null; } @Override public Class&amp;lt;?&amp;gt; getObjectType() { return null; } @Override public boolean isSingleton() { return false; } } getObject：方法返回</description>
      </item>
      
      <item>
        <title>使用Harbor时的常用指令</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/harbor/%E4%BD%BF%E7%94%A8harbor%E6%97%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/harbor/%E4%BD%BF%E7%94%A8harbor%E6%97%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
        <description>常用指令 常用指令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 sudo docker pull nginx:alpine sudo docker tag nginx:alpine 192.168.30.174:80/test/nginx:alpine sudo docker push 192.168.30.174:80/test/nginx:alpine sudo docker tag jenkins/jenkins:lts 192.168.30.174:80/test/jenkins:lts sudo docker push 192.168.30.174:80/test/jenkins:lts sudo docker tag jenkins/jenkins:lts 192.168.30.174:80/test/jenkins:lts2 sudo</description>
      </item>
      
      <item>
        <title>使用java正则时需要注意的地方</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E4%BD%BF%E7%94%A8java%E6%AD%A3%E5%88%99%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E4%BD%BF%E7%94%A8java%E6%AD%A3%E5%88%99%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
        <description>这块核心在于要调用一下matches或者find才能获取group中的值，我目前没有系统化的去研究这些Java中的正则，未来会系统研究一下。</description>
      </item>
      
      <item>
        <title>使用keytool生成秘钥对</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/cas/%E4%BD%BF%E7%94%A8keytool%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E5%AF%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/cas/%E4%BD%BF%E7%94%A8keytool%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E5%AF%B9/</guid>
        <description>keytool工具位于%JAVA_HOME%/bin，我之前从来没有意识到过这个工具的存在，最近在进行CAS相关的实验，发现了这个工具。按照</description>
      </item>
      
      <item>
        <title>使用KT Connect（探索版）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E4%BD%BF%E7%94%A8kt-connect%E6%8E%A2%E7%B4%A2%E7%89%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E4%BD%BF%E7%94%A8kt-connect%E6%8E%A2%E7%B4%A2%E7%89%88/</guid>
        <description>这是一篇整理笔记，我很久前就开始使用这个技术了，但是一直没有整理。最近同事需要用，所以我简单整理一下，笔记中需要用到的资料我暂时去整理下载地</description>
      </item>
      
      <item>
        <title>使用LCX模板安装NextCloud</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/nextcloud/%E4%BD%BF%E7%94%A8lcx%E6%A8%A1%E6%9D%BF%E5%AE%89%E8%A3%85nextcloud/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/nextcloud/%E4%BD%BF%E7%94%A8lcx%E6%A8%A1%E6%9D%BF%E5%AE%89%E8%A3%85nextcloud/</guid>
        <description>使用这个方案的难点是下载LCX模板，如图，找到模板资源： 如果直接点击下载是非常非常慢的，我这边6个小时都没有下载下来： 该怎么做了？方案有很多</description>
      </item>
      
      <item>
        <title>使用redisson的锁</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E4%BD%BF%E7%94%A8redisson%E7%9A%84%E9%94%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E4%BD%BF%E7%94%A8redisson%E7%9A%84%E9%94%81/</guid>
        <description>我们一个使用量非常小的小系统，不知道抽什么疯，突然出现了几起并发插入的问题，插入时上锁，好像只能上表锁，表锁会影响其他用户的使用，所以打算用</description>
      </item>
      
      <item>
        <title>使用SimpleChannelInBoundHandler还是ChannelInBoundHandler</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E4%BD%BF%E7%94%A8simplechannelinboundhandler%E8%BF%98%E6%98%AFchannelinboundhandler/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E4%BD%BF%E7%94%A8simplechannelinboundhandler%E8%BF%98%E6%98%AFchannelinboundhandler/</guid>
        <description>在Echo的案例中，为什么服务端使用的是ChannelInboundHandlerAdapter，而客户端使用的是SimpleChannel</description>
      </item>
      
      <item>
        <title>使用了@Slf4j注解，但是没有引入slf4j-api包</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E4%BD%BF%E7%94%A8%E4%BA%86slf4j%E6%B3%A8%E8%A7%A3%E4%BD%86%E6%98%AF%E6%B2%A1%E6%9C%89%E5%BC%95%E5%85%A5slf4j-api%E5%8C%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E4%BD%BF%E7%94%A8%E4%BA%86slf4j%E6%B3%A8%E8%A7%A3%E4%BD%86%E6%98%AF%E6%B2%A1%E6%9C%89%E5%BC%95%E5%85%A5slf4j-api%E5%8C%85/</guid>
        <description>之前使用SpringBoot较多，SpringBoot会自动帮忙引入slf4j-api，所以每次使用@Slf4j注解时，log变量都可以正常</description>
      </item>
      
      <item>
        <title>使用自编译Python时执行pyinstaller时遇到的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%BD%BF%E7%94%A8%E8%87%AA%E7%BC%96%E8%AF%91python%E6%97%B6%E6%89%A7%E8%A1%8Cpyinstaller%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E4%BD%BF%E7%94%A8%E8%87%AA%E7%BC%96%E8%AF%91python%E6%97%B6%E6%89%A7%E8%A1%8Cpyinstaller%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>我在使用自编译的python3执行pyinstaller时遇到了如下问题： [root@base launch]# pyinstaller -F launch.py 31 INFO: PyInstaller: 4.3 31 INFO: Python: 3.8.9 62 INFO: Platform: Linux-3.10.0-1160.el7.x86_64-x86_64-with-glibc2.17 62 INFO: wrote /root/Software/launch/launch.spec 63 INFO: UPX is not available. 64 INFO: Extending PYTHONPATH with paths</description>
      </item>
      
      <item>
        <title>修复updateByBatch无法使用的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E4%BF%AE%E5%A4%8Dupdatebybatch%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E4%BF%AE%E5%A4%8Dupdatebybatch%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>今天定位修复了一个比较难的问题。我们的项目将mybatis-plus升级到最新版后，发现了updateByBatch方法无效。最后层层排查下</description>
      </item>
      
      <item>
        <title>修复Zoc主题自动展开问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E4%BF%AE%E5%A4%8Dzoc%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%B1%95%E5%BC%80%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E4%BF%AE%E5%A4%8Dzoc%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%B1%95%E5%BC%80%E9%97%AE%E9%A2%98/</guid>
        <description>我笔记中git和github文件夹，总是默认处于展开状态，我简单分析了一下，可能是作者直接从当前URL中进行分词，然后寻找目录结构，查看哪些</description>
      </item>
      
      <item>
        <title>修复节点为NotReady的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BF%AE%E5%A4%8D%E8%8A%82%E7%82%B9%E4%B8%BAnotready%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E4%BF%AE%E5%A4%8D%E8%8A%82%E7%82%B9%E4%B8%BAnotready%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>这个问题我之前从未遇到过，先说说我怎么发现这个问题的，我使用Helm安装chart时，发现Release一直处于Pending状态，所以我顺</description>
      </item>
      
      <item>
        <title>关于BuffByte研究</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%85%B3%E4%BA%8Ebuffbyte%E7%A0%94%E7%A9%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E5%85%B3%E4%BA%8Ebuffbyte%E7%A0%94%E7%A9%B6/</guid>
        <description>透明零拷贝 这个零拷贝和我理解的零拷贝其实是两个东西。这个强调的是ByteBuf之间可以通过零拷贝而获取到一个新的ByteBuf，而我理解的零</description>
      </item>
      
      <item>
        <title>关于scoat的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Escoat%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8Escoat%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 我们准备使用KT Connect，但是运维配置好了后，发现始终无法正常使用。我按照官方文档给的问题排查手册，发现最终报错为scoat，</description>
      </item>
      
      <item>
        <title>关于镜像源的一些方案</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8E%E9%95%9C%E5%83%8F%E6%BA%90%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%A1%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%85%B3%E4%BA%8E%E9%95%9C%E5%83%8F%E6%BA%90%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%A1%88/</guid>
        <description>Docker镜像源真的是非常让人头疼的东西，想将它们全部塞到自己的Harbor里，然后实现本地环境的高速拉取！！！ 让 K8S 在 GFW 内愉快的航行 doc</description>
      </item>
      
      <item>
        <title>写大型数据</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E5%86%99%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E5%86%99%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE/</guid>
        <description>网络存在饱和的可能性，如何在异步框架中高效地写大块数据是一个特殊的问题。由于写操作是非阻塞的，所以即使没有写出所有的数据，写操作也会在完成时</description>
      </item>
      
      <item>
        <title>准备必要的二进制文件</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E5%87%86%E5%A4%87%E5%BF%85%E8%A6%81%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E5%87%86%E5%A4%87%E5%BF%85%E8%A6%81%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</guid>
        <description>下载地址如下： alibaba/kt-connect 在 Linux 系统中安装并设置 kubectl</description>
      </item>
      
      <item>
        <title>分页0和1的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E5%88%86%E9%A1%B50%E5%92%8C1%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E5%88%86%E9%A1%B50%E5%92%8C1%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>我始终记得我们之前做分页的时候是从零开始的，但是这个可能是我的错觉，因为我本身不是分页接口的消费者，所以我也不知道我开发的接口在被怎么传参（</description>
      </item>
      
      <item>
        <title>创建Docker Action</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E5%88%9B%E5%BB%BAdocker-action/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E5%88%9B%E5%BB%BAdocker-action/</guid>
        <description>我选择的是将自己创建的Actions和源码放在一起，因为这些Actions使用的复用性挺低的，放在一起避免了创建另一个仓库，非常舒服： 目录结</description>
      </item>
      
      <item>
        <title>创建自己的tap、tun设备</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84taptun%E8%AE%BE%E5%A4%87/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84taptun%E8%AE%BE%E5%A4%87/</guid>
        <description>tunctl 安装tunctl工具 1 2 3 4 5 6 7 8 9 10 11 12 tee /etc/yum.repos.d/nux-misc.repo &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; [nux-misc] name=Nux Misc baseurl=http://li.nux.ro/download/nux/misc/el7/x86_64/ enabled=0 gpgcheck=1 gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro EOF yum --enablerepo=nux-misc install tunctl tunctl [OPTIONS] [ -u owner ] [ -g group ] [ -t device-name ] t：指定要创建的tap、tun设备名</description>
      </item>
      
      <item>
        <title>初始化项目的时候指定使用yaml格式的配置文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%87%E5%AE%9A%E4%BD%BF%E7%94%A8yaml%E6%A0%BC%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%87%E5%AE%9A%E4%BD%BF%E7%94%A8yaml%E6%A0%BC%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
        <description>命令如下：</description>
      </item>
      
      <item>
        <title>初次体验JWT</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/jwt/%E5%88%9D%E6%AC%A1%E4%BD%93%E9%AA%8Cjwt/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/jwt/%E5%88%9D%E6%AC%A1%E4%BD%93%E9%AA%8Cjwt/</guid>
        <description>我按教程简单的体验了一下JWT，我没有走完整的JWT流程，只走了一下加密部分，我的代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
      </item>
      
      <item>
        <title>删除hiberfil.sys</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%88%A0%E9%99%A4hiberfil.sys/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%88%A0%E9%99%A4hiberfil.sys/</guid>
        <description>C盘炸了，只剩下3G了，我基本不在C盘装任何东西，经同时提示发现是hiberfil.sys、pagefile.sys、swapfile.sy</description>
      </item>
      
      <item>
        <title>判断工作区是否干净</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/%E5%88%A4%E6%96%AD%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%98%AF%E5%90%A6%E5%B9%B2%E5%87%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/%E5%88%A4%E6%96%AD%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%98%AF%E5%90%A6%E5%B9%B2%E5%87%80/</guid>
        <description>这项技术用于开发一些自动化脚本： 1 2 3 4 5 6 7 if [ -z &amp;#34;$(git status --porcelain)&amp;#34; ]; then # Working directory clean else # Uncommitted changes fi 参考资料 从脚本确定Git工作目录是否干净 这篇文章中还有一些其</description>
      </item>
      
      <item>
        <title>利用Docker快速启动开发环境</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%88%A9%E7%94%A8docker%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%88%A9%E7%94%A8docker%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
        <description>我没有打算用DockerCompose，直接使用指令的方式也挺简单的。 机器环境 系统CentOS 7.9 两块硬盘，一块装系统，一块挂载在/data目</description>
      </item>
      
      <item>
        <title>利用JSONPath简化工作</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/%E5%88%A9%E7%94%A8jsonpath%E7%AE%80%E5%8C%96%E5%B7%A5%E4%BD%9C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/%E5%88%A9%E7%94%A8jsonpath%E7%AE%80%E5%8C%96%E5%B7%A5%E4%BD%9C/</guid>
        <description>我们的项目中有这样的一个需求：我们存在oss中的数据，仅记录其相对位置，但是当我们将这些数据返回给前端的时候，我们需要将这些相对位置转换成带</description>
      </item>
      
      <item>
        <title>利用反射填充VO对象</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E5%A1%AB%E5%85%85vo%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E5%A1%AB%E5%85%85vo%E5%AF%B9%E8%B1%A1/</guid>
        <description>应用场景是这样的。我秉承的信念是，入库时每个字段都是需要被精细控制，所以我往往需要写一大堆setXXX方法，该工具就可以我快速生成这些代码：</description>
      </item>
      
      <item>
        <title>利用反射生成请求体</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90%E8%AF%B7%E6%B1%82%E4%BD%93/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90%E8%AF%B7%E6%B1%82%E4%BD%93/</guid>
        <description>应用场景是这样的，你已经定义好的Request接受前端传递的参数，现在你需要测试下你的接口，你需要快速的生成一个可以被当前Request接受</description>
      </item>
      
      <item>
        <title>动态调整日志等级</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7/</guid>
        <description>当我感觉我有动态调整日志等级的需求时，我发现SpringBoot Actuator天然支持这种功能，进一步研究，我发现了SpringBoot A</description>
      </item>
      
      <item>
        <title>包扫描位置指定错误，导致无法进入自定义Intercepter</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E5%8C%85%E6%89%AB%E6%8F%8F%E4%BD%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E9%94%99%E8%AF%AF%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89intercepter/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E5%8C%85%E6%89%AB%E6%8F%8F%E4%BD%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E9%94%99%E8%AF%AF%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89intercepter/</guid>
        <description>公司开新项目，我参考以往的代码起了一个项目，项目启动很成功，但是请求时报如下错误： 我们开发了相应的拦截器，负责解析请求中传递的token，将</description>
      </item>
      
      <item>
        <title>升级Node到V14后，gitbook-cli无法正常运行</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E5%8D%87%E7%BA%A7node%E5%88%B0v14%E5%90%8Egitbook-cli%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E5%8D%87%E7%BA%A7node%E5%88%B0v14%E5%90%8Egitbook-cli%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C/</guid>
        <description>报错如下（这个报错不是我场景中的报错）： Installing GitBook 3.2.3 /home/travis/.nvm/versions/node/v12.18.3/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287 if (cb) cb.apply(this, arguments) ^ TypeError: cb.apply is not a function at /home/travis/.nvm/versions/node/v12.18.3/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287:18 at FSReqCallback.oncomplete (fs.js:169:5) The command &amp;quot;gitbook install&amp;quot; failed and exited with 1 during . 我采用的方案： cd /usr/lib/node_modules/gitbook-cli npm i graceful-fs@4.1.4 --save cd /usr/lib/node_modules/gitbook-cli/node_modules/npm npm i graceful-fs@4.1.4 --save</description>
      </item>
      
      <item>
        <title>单元测试</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
        <description>writeInbound：将入站消息写到EmbeddedChannel中。如果可以通过readInbound()方法从EmbeddedChn</description>
      </item>
      
      <item>
        <title>反序列化时缺少默认构造函数导致的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E7%BC%BA%E5%B0%91%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/fastjson/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E7%BC%BA%E5%B0%91%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>定位这个问题差不多花了我半个小时，所以有必要将其记录下来，我在开发我的工具包，代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @Data public</description>
      </item>
      
      <item>
        <title>后台执行MySQL导入</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/mysql/%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8Cmysql%E5%AF%BC%E5%85%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/mysql/%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8Cmysql%E5%AF%BC%E5%85%A5/</guid>
        <description>使用场景是这样的，我们要将本地的数据库导入到阿里的数据库中，如果通过shell执行这个导入工作，可能会因为shell链接中断，导致导入工作失</description>
      </item>
      
      <item>
        <title>四种方式管理Bean的生命周期</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
        <description>类似PostConstructor、PreDestroy等，我一直在代码中使用，但是我从来没有系统的去学习和调节它们，这次看到了，刚好一起整</description>
      </item>
      
      <item>
        <title>四种方式给Spring容器注入组件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%BB%99spring%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%85%A5%E7%BB%84%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%BB%99spring%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%85%A5%E7%BB%84%E4%BB%B6/</guid>
        <description>纯粹整理一下，感觉实战意义不大。 包扫描+组件标注注解（@Controller、@Service、@Repository等） @Bean导入第三</description>
      </item>
      
      <item>
        <title>因为centos依赖文件太旧，而无法启动hugo</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E5%9B%A0%E4%B8%BAcentos%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6%E5%A4%AA%E6%97%A7%E8%80%8C%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8hugo/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E5%9B%A0%E4%B8%BAcentos%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6%E5%A4%AA%E6%97%A7%E8%80%8C%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8hugo/</guid>
        <description>我在CentOS上，通过在github上下载release包的方式安装了hugo，但是安装后无法启动，报如下错误： [root@base junjie.com]# hugo server --minify --theme book --bind=&amp;quot;0.0.0.0&amp;quot; hugo: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#39; not</description>
      </item>
      
      <item>
        <title>因为relativePath导致项目内依赖失败</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9B%A0%E4%B8%BArelativepath%E5%AF%BC%E8%87%B4%E9%A1%B9%E7%9B%AE%E5%86%85%E4%BE%9D%E8%B5%96%E5%A4%B1%E8%B4%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9B%A0%E4%B8%BArelativepath%E5%AF%BC%E8%87%B4%E9%A1%B9%E7%9B%AE%E5%86%85%E4%BE%9D%E8%B5%96%E5%A4%B1%E8%B4%A5/</guid>
        <description>其实我之前研究过&amp;lt;relativePath/&amp;gt;，这个标签貌似是说从库中去寻找依赖，但是我当时理解的并不是很深入，知道我今天踩了这</description>
      </item>
      
      <item>
        <title>因为使用了SNAPSHOT，导致无法deploy</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9B%A0%E4%B8%BA%E4%BD%BF%E7%94%A8%E4%BA%86snapshot%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95deploy/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9B%A0%E4%B8%BA%E4%BD%BF%E7%94%A8%E4%BA%86snapshot%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95deploy/</guid>
        <description>不知道是什么时候开始的，SNAPSHOT无法deploy到我们的仓库里，我使用如下代码将SNAPSHOT更改为了Release版本： mvn versions:set -DnewVersion=1.1.0 参</description>
      </item>
      
      <item>
        <title>因为引入了错误的类，导致main方法无运行按钮</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%9B%A0%E4%B8%BA%E5%BC%95%E5%85%A5%E4%BA%86%E9%94%99%E8%AF%AF%E7%9A%84%E7%B1%BB%E5%AF%BC%E8%87%B4main%E6%96%B9%E6%B3%95%E6%97%A0%E8%BF%90%E8%A1%8C%E6%8C%89%E9%92%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%9B%A0%E4%B8%BA%E5%BC%95%E5%85%A5%E4%BA%86%E9%94%99%E8%AF%AF%E7%9A%84%E7%B1%BB%E5%AF%BC%E8%87%B4main%E6%96%B9%E6%B3%95%E6%97%A0%E8%BF%90%E8%A1%8C%E6%8C%89%E9%92%AE/</guid>
        <description>如图，我Idea编辑器中无运行按钮： 当我注释掉一个类后，运行按钮恢复了： 很奇怪的现象，之前没有注意到存在这个问题。 参考资料 关于引入com.s</description>
      </item>
      
      <item>
        <title>因为没有写Version，导致Idea无法正常导入依赖</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9B%A0%E4%B8%BA%E6%B2%A1%E6%9C%89%E5%86%99version%E5%AF%BC%E8%87%B4idea%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9B%A0%E4%B8%BA%E6%B2%A1%E6%9C%89%E5%86%99version%E5%AF%BC%E8%87%B4idea%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96/</guid>
        <description>现象如下，每次右键reimport后，在右侧的maven选项卡中都看不到相应的依赖： 这个问题非常的难查，因为Idea没有报任何错误，我最后打</description>
      </item>
      
      <item>
        <title>因为没有执行git init导致折叠插件不生效</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E5%9B%A0%E4%B8%BA%E6%B2%A1%E6%9C%89%E6%89%A7%E8%A1%8Cgit-init%E5%AF%BC%E8%87%B4%E6%8A%98%E5%8F%A0%E6%8F%92%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E5%9B%A0%E4%B8%BA%E6%B2%A1%E6%9C%89%E6%89%A7%E8%A1%8Cgit-init%E5%AF%BC%E8%87%B4%E6%8A%98%E5%8F%A0%E6%8F%92%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88/</guid>
        <description>因为我的脚本会生成SUMMARY.md和Reademe.md，所以我一致认为gitbook init操作是没有意义的（其实我至今仍然认为这个操</description>
      </item>
      
      <item>
        <title>因为进行了换行，导致data.sql中的脚本无法执行</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E5%9B%A0%E4%B8%BA%E8%BF%9B%E8%A1%8C%E4%BA%86%E6%8D%A2%E8%A1%8C%E5%AF%BC%E8%87%B4data.sql%E4%B8%AD%E7%9A%84%E8%84%9A%E6%9C%AC%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E5%9B%A0%E4%B8%BA%E8%BF%9B%E8%A1%8C%E4%BA%86%E6%8D%A2%E8%A1%8C%E5%AF%BC%E8%87%B4data.sql%E4%B8%AD%E7%9A%84%E8%84%9A%E6%9C%AC%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C/</guid>
        <description>如图，我编写了如下的data.sql，结果在启动SpringApplication时报错误： 报错如下： Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement &amp;quot;INSERT INTO T_USER (ID, USERNAME, PASSWORD, NICKNAME, CREATE_USER, UPDATE_USER)[*]&amp;quot;; expected &amp;quot;DIRECT,</description>
      </item>
      
      <item>
        <title>因为配置文件中少些一个namespace，到时配置项不生效</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/apollo/%E5%9B%A0%E4%B8%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B0%91%E4%BA%9B%E4%B8%80%E4%B8%AAnamespace%E5%88%B0%E6%97%B6%E9%85%8D%E7%BD%AE%E9%A1%B9%E4%B8%8D%E7%94%9F%E6%95%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/apollo/%E5%9B%A0%E4%B8%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B0%91%E4%BA%9B%E4%B8%80%E4%B8%AAnamespace%E5%88%B0%E6%97%B6%E9%85%8D%E7%BD%AE%E9%A1%B9%E4%B8%8D%E7%94%9F%E6%95%88/</guid>
        <description>如图，我在Apollo中配置了该namespace，但是在SpringBoot的配置文件中没有忘记配置该项，结果导致zookeeper的配置</description>
      </item>
      
      <item>
        <title>因写错包名，导致的一些奇奇怪怪的错误</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%9B%A0%E5%86%99%E9%94%99%E5%8C%85%E5%90%8D%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%9B%A0%E5%86%99%E9%94%99%E5%8C%85%E5%90%8D%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
        <description>实际上我不知道这个Bug是数据Idea还是Maven的，Bug是这样的：我Idea中的一个模块A依赖了另一个模块B，但是A中B依赖始终报红，</description>
      </item>
      
      <item>
        <title>因缺少权限导致无法推送代码</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/%E5%9B%A0%E7%BC%BA%E5%B0%91%E6%9D%83%E9%99%90%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/%E5%9B%A0%E7%BC%BA%E5%B0%91%E6%9D%83%E9%99%90%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81/</guid>
        <description>今天我在某个分组下创建了一个项目，向这个项目推送代码时始终报错。我没有在第一时间联想到是权限的问题导致的错误，从而导致我花费了大量的时间来解</description>
      </item>
      
      <item>
        <title>在CentOS 7中卸载docker</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8centos-7%E4%B8%AD%E5%8D%B8%E8%BD%BDdocker/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8centos-7%E4%B8%AD%E5%8D%B8%E8%BD%BDdocker/</guid>
        <description>之所以选择卸载Docker，是因为我觉得简单工具的安装使用Docker只是提供了安装便利性，工具运行时并没有直接安装在物理机或虚拟机上那么高</description>
      </item>
      
      <item>
        <title>在CentOS 8中Docker容器无法访问网络（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8centos-8%E4%B8%ADdocker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8centos-8%E4%B8%ADdocker%E5%AE%B9%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description>问题描述 我在CenOS 8中搭建了Docker，然后启动了一个busybox，我在busybox中无法ping通任何IP地址。我大概知道是防火</description>
      </item>
      
      <item>
        <title>在CentOS中安装Docker</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8centos%E4%B8%AD%E5%AE%89%E8%A3%85docker/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8centos%E4%B8%AD%E5%AE%89%E8%A3%85docker/</guid>
        <description>20210504: 该方案在CentOS 7和CentOS 8上均可用 使用Ubuntu时，一直是直接在网上找一篇教程来使用，这次求稳去官方找了篇文档，进行操作，我</description>
      </item>
      
      <item>
        <title>在Idea中打造比较舒服的Protobuf开发环境</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/%E5%9C%A8idea%E4%B8%AD%E6%89%93%E9%80%A0%E6%AF%94%E8%BE%83%E8%88%92%E6%9C%8D%E7%9A%84protobuf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/%E5%9C%A8idea%E4%B8%AD%E6%89%93%E9%80%A0%E6%AF%94%E8%BE%83%E8%88%92%E6%9C%8D%E7%9A%84protobuf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
        <description>安装Protobuf语法高亮插件 插件使用：Protobuf Support，安装重启后即可实现语法高亮。 配置Maven插件 首先，proto文件</description>
      </item>
      
      <item>
        <title>在Idea中搜索jar包中的内容</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%9C%A8idea%E4%B8%AD%E6%90%9C%E7%B4%A2jar%E5%8C%85%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%9C%A8idea%E4%B8%AD%E6%90%9C%E7%B4%A2jar%E5%8C%85%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9/</guid>
        <description>核心就两点： 搜索json、md等文件中的内容，可以直接搜索 搜索编译后的字节码中的内容，需要先下载源码（参考我Idea分类下另外的笔记） 参考资</description>
      </item>
      
      <item>
        <title>在Idea中配置Maven时遇到的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9C%A8idea%E4%B8%AD%E9%85%8D%E7%BD%AEmaven%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E5%9C%A8idea%E4%B8%AD%E9%85%8D%E7%BD%AEmaven%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 在导入项目时，我按下图配置了Maven，同时我的setting.xml文件是从我同事那要的。结果我项目中多处报红。 解决步骤 修改set</description>
      </item>
      
      <item>
        <title>在RestTemplate的Get请求中，稍微优雅的传递参数的方式</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/%E5%9C%A8resttemplate%E7%9A%84get%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%A8%8D%E5%BE%AE%E4%BC%98%E9%9B%85%E7%9A%84%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/resttemplate/%E5%9C%A8resttemplate%E7%9A%84get%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%A8%8D%E5%BE%AE%E4%BC%98%E9%9B%85%E7%9A%84%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
        <description>自从用了RestTemplate，我已经很少在Java代码中使用HttpClient之类的东西了。RestTemplate的便利性，能够帮助</description>
      </item>
      
      <item>
        <title>在SpringBoot中使用JdbcTemplate</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E5%9C%A8springboot%E4%B8%AD%E4%BD%BF%E7%94%A8jdbctemplate/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E5%9C%A8springboot%E4%B8%AD%E4%BD%BF%E7%94%A8jdbctemplate/</guid>
        <description>今天在调MyBatis-Plus Generator时，遇到一个奇怪的问题：我配置了表信息，断点调试的时候发现获取的tableInfo信息时，</description>
      </item>
      
      <item>
        <title>在SpringBoot中配置RabbitMQ</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/rabbitmq/%E5%9C%A8springboot%E4%B8%AD%E9%85%8D%E7%BD%AErabbitmq/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/rabbitmq/%E5%9C%A8springboot%E4%B8%AD%E9%85%8D%E7%BD%AErabbitmq/</guid>
        <description>操作步骤 引入依赖 1 2 3 4 5 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.2.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 准备配置文件 1 2 3 4 5 6 7 spring:rabbitmq:host:192.168.30.174port:5672username:adminpassword:123456virtual-host:/ 准备配置类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package cn.watsons.mmp.brand.api.config; import org.springframework.amqp.core.Queue; import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory; import org.springframework.amqp.rabbit.connection.CachingConnectionFactory; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.amqp.support.converter.SimpleMessageConverter; import org.springframework.context.annotation.Bean; import</description>
      </item>
      
      <item>
        <title>在SpringBoot中配置Redis</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E5%9C%A8springboot%E4%B8%AD%E9%85%8D%E7%BD%AEredis/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E5%9C%A8springboot%E4%B8%AD%E9%85%8D%E7%BD%AEredis/</guid>
        <description>操作步骤 引入依赖 1 2 3 4 5 6 7 8 9 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-pool2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 准备配置文件 1 2 3 4 5 6 7 8 9 10 11 12 spring:redis:database:12host:192.168.75.62port:6379timeout:60slettuce:pool:max-active:100max-idle:100min-idle:50max-wait:6000 准备配置类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
      </item>
      
      <item>
        <title>在SpringBoot中配置了Redis连接池后链接失败的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E5%9C%A8springboot%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BA%86redis%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%90%8E%E9%93%BE%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E5%9C%A8springboot%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BA%86redis%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%90%8E%E9%93%BE%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 描述如下 java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190) at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with</description>
      </item>
      
      <item>
        <title>在SpringBoot项目整合JdbcTemplate</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88jdbctemplate/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E5%9C%A8springboot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88jdbctemplate/</guid>
        <description>依赖文件 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; application.yml文件 spring: datasource: # driver-class-name: org.postgresql.Driver # 原始的 driver-class-name: com.p6spy.engine.spy.P6SpyDriver # 使用p6spy后的 password: HelloWorld # url: jdbc:postgresql://192.168.13.68:5432/postgres?currentSchema=public&amp;amp;stringtype=unspecified # 原始的 url: jdbc:p6spy:postgresql://192.168.13.68:5432/postgres?currentSchema=public&amp;amp;stringtype=unspecified # 使用p6spy后的 username: postgres 参</description>
      </item>
      
      <item>
        <title>在Ubuntu 18.04中安装Docker</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8ubuntu-18.04%E4%B8%AD%E5%AE%89%E8%A3%85docker/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8ubuntu-18.04%E4%B8%AD%E5%AE%89%E8%A3%85docker/</guid>
        <description>操作步骤 指令如下 sudo apt install -y docker-ce</description>
      </item>
      
      <item>
        <title>在Ubuntu 18.04中添加Docker用户组</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8ubuntu-18.04%E4%B8%AD%E6%B7%BB%E5%8A%A0docker%E7%94%A8%E6%88%B7%E7%BB%84/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%9C%A8ubuntu-18.04%E4%B8%AD%E6%B7%BB%E5%8A%A0docker%E7%94%A8%E6%88%B7%E7%BB%84/</guid>
        <description>操作步骤 指令如下 # 创建docker用户组 sudo groupadd docker # 将当前用户添加到docker组 sudo gpasswd -a ${USER} docker # 重启服务 sudo service docker restart # 切换当前会话到新组 newgrp - docker 相关资料</description>
      </item>
      
      <item>
        <title>在实验机上安装Kubernetes</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%9C%A8%E5%AE%9E%E9%AA%8C%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85kubernetes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E5%9C%A8%E5%AE%9E%E9%AA%8C%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85kubernetes/</guid>
        <description>我为试验机设置了全新的网络环境，完全不必担心镜像下载速度过慢、镜像无法下载的问题。所以相应的教程也非常的清晰明了。 另外需要说明的是，我的所有</description>
      </item>
      
      <item>
        <title>地址栏显示http或者https</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%9C%B0%E5%9D%80%E6%A0%8F%E6%98%BE%E7%A4%BAhttp%E6%88%96%E8%80%85https/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%9C%B0%E5%9D%80%E6%A0%8F%E6%98%BE%E7%A4%BAhttp%E6%88%96%E8%80%85https/</guid>
        <description>安装插件：Suspicious Site Reporter</description>
      </item>
      
      <item>
        <title>复杂场景下使用RingBuffer</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/disruptor/%E5%A4%8D%E6%9D%82%E5%9C%BA%E6%99%AF%E4%B8%8B%E4%BD%BF%E7%94%A8ringbuffer/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/disruptor/%E5%A4%8D%E6%9D%82%E5%9C%BA%E6%99%AF%E4%B8%8B%E4%BD%BF%E7%94%A8ringbuffer/</guid>
        <description>（实验失败了，而且找不到相关的资料，很挫败） 菱形 六边形</description>
      </item>
      
      <item>
        <title>多个无痕窗口共用一套Cookie</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%A4%9A%E4%B8%AA%E6%97%A0%E7%97%95%E7%AA%97%E5%8F%A3%E5%85%B1%E7%94%A8%E4%B8%80%E5%A5%97cookie/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%A4%9A%E4%B8%AA%E6%97%A0%E7%97%95%E7%AA%97%E5%8F%A3%E5%85%B1%E7%94%A8%E4%B8%80%E5%A5%97cookie/</guid>
        <description>问题描述 我也是第一次意识到这个问题，我在Chrome上打开了一个无痕窗口，进入项目首页，因为没有登录，直接跳转到登录页面，这是我需要的。然后</description>
      </item>
      
      <item>
        <title>如何为Idea设置代理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%A6%82%E4%BD%95%E4%B8%BAidea%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%A6%82%E4%BD%95%E4%B8%BAidea%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</guid>
        <description>配置如下：</description>
      </item>
      
      <item>
        <title>如何使用tcpdump抓包，并用鲨鱼分析</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8tcpdump%E6%8A%93%E5%8C%85%E5%B9%B6%E7%94%A8%E9%B2%A8%E9%B1%BC%E5%88%86%E6%9E%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8tcpdump%E6%8A%93%E5%8C%85%E5%B9%B6%E7%94%A8%E9%B2%A8%E9%B1%BC%E5%88%86%E6%9E%90/</guid>
        <description>这个技术存在的意义是可以让我对服务端的数据包管理更严格，避免一些不必要的问题造成我无法正常使用。 使用如下指令得到数据包的文件： 1 2 3 4 5 tcpdump -tttt</description>
      </item>
      
      <item>
        <title>如何区分？extends T与？ super T</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86extends-t%E4%B8%8E-super-t/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86extends-t%E4%B8%8E-super-t/</guid>
        <description>&amp;lt;? extends T&amp;gt; 表示类型的上界，也就是说，参数化的类型可能是T或者T的子类型。例如下面的写法都是合法的赋值语句： ~~~ java Listlist = new ArrayList(); Listlist = new ArrayList(); Listlist = new ArrayList(); ~~~ ### 读数据</description>
      </item>
      
      <item>
        <title>如何找到U盘设备名（未实践）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0u%E7%9B%98%E8%AE%BE%E5%A4%87%E5%90%8D%E6%9C%AA%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/debian/%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0u%E7%9B%98%E8%AE%BE%E5%A4%87%E5%90%8D%E6%9C%AA%E5%AE%9E%E8%B7%B5/</guid>
        <description>之前有被这个问题困惑过，今天看书的时候，遇到了相关的资料，故记载下来。 可以比较U盘插入计算机前后dmesg命令输出的最后一行内容，也可以用l</description>
      </item>
      
      <item>
        <title>如何查看Idea日志</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bidea%E6%97%A5%E5%BF%97/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8Bidea%E6%97%A5%E5%BF%97/</guid>
        <description>这个需求基本操作一次就不会忘记了，哈哈，还是整理一下吧。</description>
      </item>
      
      <item>
        <title>如何校验普通的方法参数</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E5%A6%82%E4%BD%95%E6%A0%A1%E9%AA%8C%E6%99%AE%E9%80%9A%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E5%A6%82%E4%BD%95%E6%A0%A1%E9%AA%8C%E6%99%AE%E9%80%9A%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/</guid>
        <description>测试 测试非DTO参数 准备如下测试代码： 1 2 3 4 5 6 7 8 9 @Validated @Service public class TmpService { public void doService(@JNotBlank String inputParam) { // do something } } 这份代码有两个地方需要注意： 类上的注解只能为@Va</description>
      </item>
      
      <item>
        <title>如何理解Maven Profile与SpringBoot配置文件的关系</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3maven-profile%E4%B8%8Espringboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3maven-profile%E4%B8%8Espringboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
        <description>我昨天一直在思考Maven Profile与SpringBoot配置文件的关系，想知道Maven Profile中的配置是如何传递给Spring</description>
      </item>
      
      <item>
        <title>安装Ansible</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/ansible/%E5%AE%89%E8%A3%85ansible/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/ansible/%E5%AE%89%E8%A3%85ansible/</guid>
        <description>控制节点 用pip安装Ansible pip install paramiko PyYAML Jinja2 httplib2 six --user ansible python -m pip install --user ansible 我不知道这样调用的是pip还是pip3，但是我看日志，好像是用Python3</description>
      </item>
      
      <item>
        <title>安装Ansible（废弃）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/ansible/%E5%AE%89%E8%A3%85ansible%E5%BA%9F%E5%BC%83/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/ansible/%E5%AE%89%E8%A3%85ansible%E5%BA%9F%E5%BC%83/</guid>
        <description>我执行了如下指令： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 git clone git://github.com/ansible/ansible.git --recursive cd ./ansible # 使用Bash source ./hacking/env-setup # 安装pip（参考python分类下笔记） # 安装Pyth</description>
      </item>
      
      <item>
        <title>安装CentOS 8（推荐）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E5%AE%89%E8%A3%85centos-8%E6%8E%A8%E8%8D%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E5%AE%89%E8%A3%85centos-8%E6%8E%A8%E8%8D%90/</guid>
        <description>操作步骤 下载CentOS 8 dvd的镜像文件（可以避免安装时的网络需求） 使用Win32DiskImager制作U盘启动盘（目前这是事最少的方案</description>
      </item>
      
      <item>
        <title>安装CentOS 8，使用Ultraiso制作U盘启动（不推荐）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E5%AE%89%E8%A3%85centos-8%E4%BD%BF%E7%94%A8ultraiso%E5%88%B6%E4%BD%9Cu%E7%9B%98%E5%90%AF%E5%8A%A8%E4%B8%8D%E6%8E%A8%E8%8D%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E5%AE%89%E8%A3%85centos-8%E4%BD%BF%E7%94%A8ultraiso%E5%88%B6%E4%BD%9Cu%E7%9B%98%E5%90%AF%E5%8A%A8%E4%B8%8D%E6%8E%A8%E8%8D%90/</guid>
        <description>因为之前使用Ubuntu系统的时候，总是会遇到一些奇奇怪怪的问题，而且这些问题并不是很好查到资料（Ubuntu更新的太快了，网上的教程往往落</description>
      </item>
      
      <item>
        <title>安装Docker Compose</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%AE%89%E8%A3%85docker-compose/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E5%AE%89%E8%A3%85docker-compose/</guid>
        <description>指令如下： 1 2 3 4 5 6 sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Linux-x86_64&amp;#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose docker-compose --version mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose docker-compose --version 参考资料 Docker Compose 教程里的版本太旧了，我用了最新版。 docker/compose</description>
      </item>
      
      <item>
        <title>安装H2 Console工具</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E5%AE%89%E8%A3%85h2-console%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E5%AE%89%E8%A3%85h2-console%E5%B7%A5%E5%85%B7/</guid>
        <description>官网下载并安装，参考官网的教程启动h2。 这部分比较简单，稍微尝试一下，很快就可以掌握。</description>
      </item>
      
      <item>
        <title>安装Helm</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/helm/%E5%AE%89%E8%A3%85helm/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/helm/%E5%AE%89%E8%A3%85helm/</guid>
        <description>下载二进制文件，并解压二进制文件 tar -zxvf helm-v3.5.4-linux-amd64.tar.gz 将二进制文件移动$PATH目录下 mv linux-amd64/helm /usr/local/bin/helm Helm常用指令 添加一个chart仓库，并查看charts列表 helm</description>
      </item>
      
      <item>
        <title>安装OpenMediaVault</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openmediavault/%E5%AE%89%E8%A3%85openmediavault/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/openmediavault/%E5%AE%89%E8%A3%85openmediavault/</guid>
        <description>家里需要使用这个NAS，最终决定还是使用OpenMediaVault，主要原因有如下几点： 我的NAS主要用于文件存储，我不折腾什么家庭影音中</description>
      </item>
      
      <item>
        <title>定位Java在Linux上AES加密失败的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%AE%9A%E4%BD%8Djava%E5%9C%A8linux%E4%B8%8Aaes%E5%8A%A0%E5%AF%86%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%AE%9A%E4%BD%8Djava%E5%9C%A8linux%E4%B8%8Aaes%E5%8A%A0%E5%AF%86%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 我们通过切面编程，自动为进入controller的参数进行aes加密，然而这个接口在window上表现正常，在Linux系统上表现异</description>
      </item>
      
      <item>
        <title>定位并修复TypeHandler的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E5%AE%9A%E4%BD%8D%E5%B9%B6%E4%BF%AE%E5%A4%8Dtypehandler%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E5%AE%9A%E4%BD%8D%E5%B9%B6%E4%BF%AE%E5%A4%8Dtypehandler%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题的表现： 我们数据库中使用了timestamptz类型 我们代码中使用了LocalDateTime类型 我们的代码使用了LocalDateTi</description>
      </item>
      
      <item>
        <title>实现ChannelOutboundHandlerAdapter需要注意的点</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E5%AE%9E%E7%8E%B0channeloutboundhandleradapter%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E5%AE%9E%E7%8E%B0channeloutboundhandleradapter%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</guid>
        <description>1 2 3 4 5 6 7 8 9 @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception { UnixTime m = (UnixTime) msg; ByteBuf encode = ctx.alloc().buffer(4); encode.writeInt((int) m.value); ctx.write(encode, promise); } 几点需要注意的地方： 调用ctx的write方法时需要将promise传</description>
      </item>
      
      <item>
        <title>对GitBook不满意的地方</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E5%AF%B9gitbook%E4%B8%8D%E6%BB%A1%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E5%AF%B9gitbook%E4%B8%8D%E6%BB%A1%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
        <description>我目前通过GitBook发布的笔记大约有300多篇，执行gitbook build的时间大约需要5分钟作用，我觉得这个真的是一个让人无法接受的</description>
      </item>
      
      <item>
        <title>对NextCloud的一些看法</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/nextcloud/%E5%AF%B9nextcloud%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/nextcloud/%E5%AF%B9nextcloud%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/</guid>
        <description>我开始决定研究这个技术是因为我单纯的想将NextCloud作为一个盘挂载到我OpenWRT上。这样，我就可以用NextCloud的手机客户端</description>
      </item>
      
      <item>
        <title>对Request的内部对象进行校验</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E5%AF%B9request%E7%9A%84%E5%86%85%E9%83%A8%E5%AF%B9%E8%B1%A1%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E5%AF%B9request%E7%9A%84%E5%86%85%E9%83%A8%E5%AF%B9%E8%B1%A1%E8%BF%9B%E8%A1%8C%E6%A0%A1%E9%AA%8C/</guid>
        <description>我的代码如下： Request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Data public class ClientCalibrationReportRequest { /** * 上报内容详情 */ @NotNull private Detail detail; @Data public static class Detail { /** * 白平衡校准数据 */ @NotBlank private String wbs; } }</description>
      </item>
      
      <item>
        <title>对WebSocket的支持</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E5%AF%B9websocket%E7%9A%84%E6%94%AF%E6%8C%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E5%AF%B9websocket%E7%9A%84%E6%94%AF%E6%8C%81/</guid>
        <description>要想应用程序对WebSocket支持，需要将适当的客户端或者服务端WebSocket ChannelHandler添加到ChannelPipe</description>
      </item>
      
      <item>
        <title>将CentOS配置成路由器问题收集</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E5%B0%86centos%E9%85%8D%E7%BD%AE%E6%88%90%E8%B7%AF%E7%94%B1%E5%99%A8%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E5%B0%86centos%E9%85%8D%E7%BD%AE%E6%88%90%E8%B7%AF%E7%94%B1%E5%99%A8%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</guid>
        <description>之前的实验中，我发现了如下的问题： 没有相应的ifcfg，我手动copy的（已解决） 有很多时候执行nmcli c reload并不会让/etc/s</description>
      </item>
      
      <item>
        <title>将List转变成逗号分隔符的字符串</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%B0%86list%E8%BD%AC%E5%8F%98%E6%88%90%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E7%AC%A6%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E5%B0%86list%E8%BD%AC%E5%8F%98%E6%88%90%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E7%AC%A6%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
        <description>我记得我之前用的并不是这个方案，但是我又找不到之前的资料了，先用下这个方案先。代码如下： 1 2 3 4 List&amp;lt;String&amp;gt; cities = Arrays.asList(&amp;#34;Milan&amp;#34;, &amp;#34;London&amp;#34;, &amp;#34;New York&amp;#34;, &amp;#34;San Francisco&amp;#34;); String citiesCommaSeparated = String.join(&amp;#34;,&amp;#34;, cities); 参考资料 Java</description>
      </item>
      
      <item>
        <title>将MySQL客户端安装在CentOS上</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/mysql/%E5%B0%86mysql%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E5%9C%A8centos%E4%B8%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/mysql/%E5%B0%86mysql%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E5%9C%A8centos%E4%B8%8A/</guid>
        <description>操作步骤 指令如下 sudo yum -y install mysql 不是整个mysql服务，而仅仅只是mysql客户端，非常好的测试工具。</description>
      </item>
      
      <item>
        <title>将Node.js安装在CentOS上</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/%E5%B0%86node.js%E5%AE%89%E8%A3%85%E5%9C%A8centos%E4%B8%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/node.js/%E5%B0%86node.js%E5%AE%89%E8%A3%85%E5%9C%A8centos%E4%B8%8A/</guid>
        <description>我测试工具用的，所以细节处没有太讲究： 1 2 3 4 5 6 7 sudo yum install epel-release sudo yum install nodejs # 我没有执行这行代码 sudo yum install npm 参考教程 如何在 CentOS 安装 node.js</description>
      </item>
      
      <item>
        <title>将Python脚本打包成可执行文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E5%B0%86python%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E5%B0%86python%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E6%88%90%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</guid>
        <description>还不错，打包出来后只有6M多一点，哈哈，虽然我只写了几行代码。 20210628后续： 该工具还可以将脚本打包成Linux可执行的文件，记录一下</description>
      </item>
      
      <item>
        <title>将Redis安装在CentOS 7上</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E5%B0%86redis%E5%AE%89%E8%A3%85%E5%9C%A8centos-7%E4%B8%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/redis/%E5%B0%86redis%E5%AE%89%E8%A3%85%E5%9C%A8centos-7%E4%B8%8A/</guid>
        <description>操作步骤 从官网下载源码包 yum install -y gcc mkdir -p ~/software/redis &amp;amp;&amp;amp; cd ~/software/redis wget http://download.redis.io/releases/redis-5.0.8.tar.gz?_ga=2.113561735.1252722932.1596592540-1218236159.1596592540 mv redis-5.0.8.tar.gz* redis-5.0.8.tar.gz # 不知道行不行 解压并编译安装 1 2 3 4 5 6 7 8 # yum install -y gcc tar -zxvf redis-5.0.8.tar.gz cd redis-5.0.8 make make install PREFIX=/usr/local/redis 设置环境变量 1</description>
      </item>
      
      <item>
        <title>将当前所有打开的Tab保存到书签</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%B0%86%E5%BD%93%E5%89%8D%E6%89%80%E6%9C%89%E6%89%93%E5%BC%80%E7%9A%84tab%E4%BF%9D%E5%AD%98%E5%88%B0%E4%B9%A6%E7%AD%BE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%B0%86%E5%BD%93%E5%89%8D%E6%89%80%E6%9C%89%E6%89%93%E5%BC%80%E7%9A%84tab%E4%BF%9D%E5%AD%98%E5%88%B0%E4%B9%A6%E7%AD%BE/</guid>
        <description>应用场景是这样的，平时解决问题时会查大量的资料然后解决问题，等解决了问题后需要将这些资料整理成笔记，但是有时候因为忙暂时无法整理。 我之前的方</description>
      </item>
      
      <item>
        <title>将指定日志输出到指定文件</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E5%B0%86%E6%8C%87%E5%AE%9A%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E5%B0%86%E6%8C%87%E5%AE%9A%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/</guid>
        <description>需求就是要将某个类中的日志输出到某个文件中，配置和代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40</description>
      </item>
      
      <item>
        <title>将某个文件夹下的书签导出来</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%B0%86%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E4%B9%A6%E7%AD%BE%E5%AF%BC%E5%87%BA%E6%9D%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E5%B0%86%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E4%B9%A6%E7%AD%BE%E5%AF%BC%E5%87%BA%E6%9D%A5/</guid>
        <description>之前没有发现Chrome导出书签的时候默认不支持导出某个文件夹，只能将全部的书签到导出来。解决方案是新创建一个Chrome账户，然后将需要导</description>
      </item>
      
      <item>
        <title>常用代码收集</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/</guid>
        <description>1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;select id=&amp;#34;pageUserInfoByAccount&amp;#34; resultType=&amp;#34;com.sdstc.authcenter.pojo.UserAndCompany&amp;#34;&amp;gt; SELECT tu.id as id, tu.name as name , tu.company_id as companyId, tu.mobile as mobile, tc.name as companyName FROM t_user tu JOIN t_company tc on tc.id = tu.company_id AND tu.is_delete = &amp;#39;0&amp;#39; &amp;lt;if test=&amp;#34;@org.apache.commons.lang3.StringUtils@isNotBlank(account)&amp;#34;&amp;gt; &amp;lt;bind name=&amp;#34;account&amp;#34; value=&amp;#34;&amp;#39;%&amp;#39; + account&amp;#34;/&amp;gt; AND tu.account LIKE #{account} &amp;lt;/if&amp;gt; &amp;lt;/select&amp;gt; 收集点： bind标签放</description>
      </item>
      
      <item>
        <title>常用指令</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
        <description>查看CPU和硬盘概要： pveperf 查看设备信息 lspci</description>
      </item>
      
      <item>
        <title>常用的命令</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</guid>
        <description>regedit 打开注册表 mstsc 打开远程桌面 control 打开控制面板 msconfig 可以用来设置引导，从而进入安全模式。 services.msc 打开Windows的服务</description>
      </item>
      
      <item>
        <title>开一个kt connect服务多台机器</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E5%BC%80%E4%B8%80%E4%B8%AAkt-connect%E6%9C%8D%E5%8A%A1%E5%A4%9A%E5%8F%B0%E6%9C%BA%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E5%BC%80%E4%B8%80%E4%B8%AAkt-connect%E6%9C%8D%E5%8A%A1%E5%A4%9A%E5%8F%B0%E6%9C%BA%E5%99%A8/</guid>
        <description>因为kc connect在windows机器上存在太多问题，每个人都有不同的状况，所以我想在linux上开一个kt connect，然后大家将代</description>
      </item>
      
      <item>
        <title>开发自定义参数校验注解时需要注意的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E5%BC%80%E5%8F%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E5%BC%80%E5%8F%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>一个约束注解可以关联多个验证器，根据要验证的属性类型选择合适的验证器，及代码中可能有如下写法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description>
      </item>
      
      <item>
        <title>开发自己的Convert，用在application.yml解析中</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84convert%E7%94%A8%E5%9C%A8application.yml%E8%A7%A3%E6%9E%90%E4%B8%AD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84convert%E7%94%A8%E5%9C%A8application.yml%E8%A7%A3%E6%9E%90%E4%B8%AD/</guid>
        <description>先直接呈现各种调试后的代码吧 application.yml 1 2 3 4 tmp2:weight:10kg Weight.java 1 2 3 4 5 6 7 8 @Data @AllArgsConstructor @NoArgsConstructor public class Weight { private Long weight; } WeightConvert.java 1 2 3 4 5 6 7 8 9 10 11 public class WeightConverter implements Converter&amp;lt;String, Weight&amp;gt; { @Override public Weight convert(String source) { if (source.endsWith(&amp;#34;kg&amp;#34;)) { return new</description>
      </item>
      
      <item>
        <title>开发自己的ErrorController</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84errorcontroller/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84errorcontroller/</guid>
        <description>这部分我还没有系统研究，所以只能写一个Demo，我之所以注意到这个问题，是因为我们项目中，如果遇到404错误，会返回一个空的请求体，这使我在</description>
      </item>
      
      <item>
        <title>开发自己的Interceptor</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84interceptor/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84interceptor/</guid>
        <description>拦截器代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @Slf4j public class MyInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { log.info(&amp;#34;preHandle Running&amp;#34;); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { log.info(&amp;#34;postHandle Running&amp;#34;); } @Override</description>
      </item>
      
      <item>
        <title>引入spring-boot-starter-tomcat时做了什么</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E5%BC%95%E5%85%A5spring-boot-starter-tomcat%E6%97%B6%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E5%BC%95%E5%85%A5spring-boot-starter-tomcat%E6%97%B6%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
        <description>引入如下依赖： 1 2 3 4 5 6 7 8 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.4.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; SpringBoot做了如下工作： 自动配置好SpringMVC 引入SpringMVC全套组件 自动配</description>
      </item>
      
      <item>
        <title>当在url中指定文件路径时，不允许两个客户端同时链接</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E5%BD%93%E5%9C%A8url%E4%B8%AD%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%97%B6%E4%B8%8D%E5%85%81%E8%AE%B8%E4%B8%A4%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%8C%E6%97%B6%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/h2-and-datagrip/%E5%BD%93%E5%9C%A8url%E4%B8%AD%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%97%B6%E4%B8%8D%E5%85%81%E8%AE%B8%E4%B8%A4%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%8C%E6%97%B6%E9%93%BE%E6%8E%A5/</guid>
        <description>这个稍微有点违背我的使用习惯，但是问题还不太严重，具体问题描述如下： 我DataGrip指定了h2的数据库文件，url为：jdbc:h2:fi</description>
      </item>
      
      <item>
        <title>微软输入法已禁用但是还是可以切换出来</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E5%B7%B2%E7%A6%81%E7%94%A8%E4%BD%86%E6%98%AF%E8%BF%98%E6%98%AF%E5%8F%AF%E4%BB%A5%E5%88%87%E6%8D%A2%E5%87%BA%E6%9D%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E5%B7%B2%E7%A6%81%E7%94%A8%E4%BD%86%E6%98%AF%E8%BF%98%E6%98%AF%E5%8F%AF%E4%BB%A5%E5%88%87%E6%8D%A2%E5%87%BA%E6%9D%A5/</guid>
        <description>问题描述 系统更新前，在语言选项中删除了微软输入法，但是系统更新后，微软输入法又被系统自动添加进来了。且这个时候去输入法选项中看的时候，是没有</description>
      </item>
      
      <item>
        <title>快速使用NodePPT的指令</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/nodeppt/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8nodeppt%E7%9A%84%E6%8C%87%E4%BB%A4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/nodeppt/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8nodeppt%E7%9A%84%E6%8C%87%E4%BB%A4/</guid>
        <description>快速使用的指令如下： nodeppt new slide.md nodeppt serve slide.md nodeppt build slide.md 有意思的是，使用了nodeppt serve指令后，可以实时的编辑并渲染ppt。 Demo代码如下： 1 2 3</description>
      </item>
      
      <item>
        <title>快速取消代理设置</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E5%BF%AB%E9%80%9F%E5%8F%96%E6%B6%88%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E5%BF%AB%E9%80%9F%E5%8F%96%E6%B6%88%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</guid>
        <description>我之前为了避免all_proxy给我实验代理不好的影响，我会直接新起一个shell。新的方案如下： unset all_proxy 参考资料 pip install报错：Miss</description>
      </item>
      
      <item>
        <title>快速用VSCode打开一个文件夹</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%BF%AB%E9%80%9F%E7%94%A8vscode%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E5%BF%AB%E9%80%9F%E7%94%A8vscode%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
        <description>我之前用VS Code打开一个文件夹，需要先打开这个文件夹，然后右键选择使用VS Code打开，感觉操作步骤还挺多的。所以我开发了下面的小脚本，</description>
      </item>
      
      <item>
        <title>快速配置Actuator</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEactuator/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEactuator/</guid>
        <description>我竟然发现我一直没有整理这个，今天急用，找不到相关的笔记。 pom配置如下： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; application.yml配置如下： management: endpoints: web: exposure: include: &#39;*&#39; 观察日</description>
      </item>
      
      <item>
        <title>打包成tar文件</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E6%89%93%E5%8C%85%E6%88%90tar%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E6%89%93%E5%8C%85%E6%88%90tar%E6%96%87%E4%BB%B6/</guid>
        <description>打包成tar文件 这条指令需要传递两个参数，我容易忘记另一个参数： tar -cvf feeds.tar feeds/</description>
      </item>
      
      <item>
        <title>打包时空文件夹问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E6%89%93%E5%8C%85%E6%97%B6%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E6%89%93%E5%8C%85%E6%97%B6%E7%A9%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%97%AE%E9%A2%98/</guid>
        <description>之前在解决一个技术问题时发现Maven打包时很难实现将空文件夹从Resources目录复制到target下（我尝试过很多插件，都没有效果）。</description>
      </item>
      
      <item>
        <title>报错Non-ASCII character in file</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E6%8A%A5%E9%94%99non-ascii-character-in-file/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E6%8A%A5%E9%94%99non-ascii-character-in-file/</guid>
        <description>报错如下： SyntaxError: Non-ASCII character &#39;\xe2&#39; in file 我选择的解决方式是从调用python3而不是python，我系统里存在两个版本的python3，经常用错这个东西。其他</description>
      </item>
      
      <item>
        <title>报错：connect was refused</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%8A%A5%E9%94%99connect-was-refused/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E6%8A%A5%E9%94%99connect-was-refused/</guid>
        <description>报错如下： The connection to the server localhost:8080 was refused - did you specify the right host or port? 是因为我忘记执行如下代码： mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 参考资料 The connection to the server localhost:8080 was refused - did you specify the right host or port?</description>
      </item>
      
      <item>
        <title>换一个角度理解Netty的异步</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8D%A2%E4%B8%80%E4%B8%AA%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3netty%E7%9A%84%E5%BC%82%E6%AD%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8D%A2%E4%B8%80%E4%B8%AA%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3netty%E7%9A%84%E5%BC%82%E6%AD%A5/</guid>
        <description>Netty之所以说是异步阻塞网络框架时因为通过NioSocketChannel的write系列方法向连接里面写入数据的时候是非阻塞的（这个地</description>
      </item>
      
      <item>
        <title>搭建GitBook</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E6%90%AD%E5%BB%BAgitbook/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_gitbook/%E6%90%AD%E5%BB%BAgitbook/</guid>
        <description>指令如下： 1 2 3 4 5 6 7 npm install gitbook-cli -g # 进入一个新文件夹后 gitbook init gitbook serve 参考教程 如何用gitbook搭建自己的文档整合平台</description>
      </item>
      
      <item>
        <title>无奇不有的“Bug”</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/%E6%97%A0%E5%A5%87%E4%B8%8D%E6%9C%89%E7%9A%84bug/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postman/%E6%97%A0%E5%A5%87%E4%B8%8D%E6%9C%89%E7%9A%84bug/</guid>
        <description>典型的自己挖坑自己填。 问题是这样的，我的Postman登录我的账号后，进行请求时一直报代理错误，浏览器可以正常访问的URL，在Postman</description>
      </item>
      
      <item>
        <title>日志输出的一些事</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</guid>
        <description>我肯定会划分一段时间去解决日志相关的问题，但是现阶段该问题该优先级并没有那么高，我先记录下我遇到的问题，未来系统学习的时候再解决这些问题。 在</description>
      </item>
      
      <item>
        <title>更优雅的处理Like查询（其实也不太优雅）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86like%E6%9F%A5%E8%AF%A2%E5%85%B6%E5%AE%9E%E4%B9%9F%E4%B8%8D%E5%A4%AA%E4%BC%98%E9%9B%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86like%E6%9F%A5%E8%AF%A2%E5%85%B6%E5%AE%9E%E4%B9%9F%E4%B8%8D%E5%A4%AA%E4%BC%98%E9%9B%85/</guid>
        <description>如果使用如下方式编写SQL，会在查询的时候报错，报错内容大致是说没有找到参数： 1 2 3 select * from t_user where account like &amp;#39;%#{account}%&amp;#39; 需要修改成如下sql： 1 2 3 select * from t_user where account</description>
      </item>
      
      <item>
        <title>更多的了解DispatcherServlet</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E6%9B%B4%E5%A4%9A%E7%9A%84%E4%BA%86%E8%A7%A3dispatcherservlet/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E6%9B%B4%E5%A4%9A%E7%9A%84%E4%BA%86%E8%A7%A3dispatcherservlet/</guid>
        <description>DipatcherServlet使用默认的Bean处理请求 Spring的DispatcherServlet使用了内置在WebApplicat</description>
      </item>
      
      <item>
        <title>查文件误删</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/%E6%9F%A5%E6%96%87%E4%BB%B6%E8%AF%AF%E5%88%A0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_git/%E6%9F%A5%E6%96%87%E4%BB%B6%E8%AF%AF%E5%88%A0/</guid>
        <description>事情是这样的，我们dev环境发现一些接口不可用，这个问题追溯到源码，发现一份源码文件被删除了。我对这种问题非常敏感，因为我常常使用Idea的</description>
      </item>
      
      <item>
        <title>查看etcd中的数据</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/%E6%9F%A5%E7%9C%8Betcd%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/%E6%9F%A5%E7%9C%8Betcd%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
        <description>我记得当时的需求是我的集群中出现了不明白的问题，我判断是etcd出现了问题，我需要查看etcd中的数据。 这是对以前收藏的整理。 查看k8s的e</description>
      </item>
      
      <item>
        <title>查看getString方法支持哪些参数</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E6%9F%A5%E7%9C%8Bgetstring%E6%96%B9%E6%B3%95%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E5%8F%82%E6%95%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/jdbctemplate/%E6%9F%A5%E7%9C%8Bgetstring%E6%96%B9%E6%B3%95%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E5%8F%82%E6%95%B0/</guid>
        <description>我在尝试通过JdbcTeamplate获取数据库中列的元数据，有如下一段代码： 1 2 3 4 5 6 7 8 ResultSet columns = dbMetaData.getColumns(null, null, &amp;#34;t_dyf_%&amp;#34;, null); while(columns.next()){ String tableName = columns.getString(&amp;#34;COLUMN_NAME&amp;#34;); System.out.println(tableName); } 我并不知道colu</description>
      </item>
      
      <item>
        <title>查看hibernate对校验注解的实现</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E6%9F%A5%E7%9C%8Bhibernate%E5%AF%B9%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E6%9F%A5%E7%9C%8Bhibernate%E5%AF%B9%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
        <description>主要是为了方便抄一份，原本的实现无法满足我们的框架： org.hibernate.validator:hibernate-validator:6.0.18.Final 在org.hibernate.validator.internal.constrain</description>
      </item>
      
      <item>
        <title>查看Windows的版本和版本号</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E6%9F%A5%E7%9C%8Bwindows%E7%9A%84%E7%89%88%E6%9C%AC%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E6%9F%A5%E7%9C%8Bwindows%E7%9A%84%E7%89%88%E6%9C%AC%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%B7/</guid>
        <description>开始 &amp;gt; 设置 &amp;gt; 系统 &amp;gt; 关于 参考资料 我运行的是哪个 Windows 操作系统版本？</description>
      </item>
      
      <item>
        <title>查看XShell密码</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E6%9F%A5%E7%9C%8Bxshell%E5%AF%86%E7%A0%81/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E6%9F%A5%E7%9C%8Bxshell%E5%AF%86%E7%A0%81/</guid>
        <description>很久前建的虚拟机，突然要用一下，忘记密码了，但是密码保存在了XShell中，我使用了AsteriskPassword.exe查看密码。 我用的</description>
      </item>
      
      <item>
        <title>查看当前使用的Shell</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84shell/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84shell/</guid>
        <description>代码如下： 1 2 3 echo $SHELL</description>
      </item>
      
      <item>
        <title>模块之间的依赖，一种很好的写法</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E6%A8%A1%E5%9D%97%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E4%B8%80%E7%A7%8D%E5%BE%88%E5%A5%BD%E7%9A%84%E5%86%99%E6%B3%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E6%A8%A1%E5%9D%97%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E4%B8%80%E7%A7%8D%E5%BE%88%E5%A5%BD%E7%9A%84%E5%86%99%E6%B3%95/</guid>
        <description>如下，我们将模块之间的依赖直接写在根项目中的dependencyManagement标签中： 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.tim&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-oauth2-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt;</description>
      </item>
      
      <item>
        <title>注解、Aware及其实现类</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E6%B3%A8%E8%A7%A3aware%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E7%B1%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E6%B3%A8%E8%A7%A3aware%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E7%B1%BB/</guid>
        <description>我这里只是纯粹记录的，方便我查阅相关注解实现的源码。相应的知识积累多了，也有助于我寻找Spring的设计思路。 注解： @PreDestroy: InitDestroyAnnotationBeanPostProcessor @Autowired: AutowiredAnnotationBeanPostProcessor Aware： ApplicationContextAware: ApplicationContextAwareProcessor</description>
      </item>
      
      <item>
        <title>注释企业源，防止安装软件时报错</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/%E6%B3%A8%E9%87%8A%E4%BC%81%E4%B8%9A%E6%BA%90%E9%98%B2%E6%AD%A2%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/proxmox-ve/%E6%B3%A8%E9%87%8A%E4%BC%81%E4%B8%9A%E6%BA%90%E9%98%B2%E6%AD%A2%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%97%B6%E6%8A%A5%E9%94%99/</guid>
        <description>操作步骤 注释如下/etc/apt/sources.list.d/pve-enterprise.list中相关代码（如果你没有该文件，则无需该</description>
      </item>
      
      <item>
        <title>流水线相关的资料</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/jenkins/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9B%B8%E5%85%B3%E7%9A%84%E8%B5%84%E6%96%99/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/jenkins/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9B%B8%E5%85%B3%E7%9A%84%E8%B5%84%E6%96%99/</guid>
        <description>以前用到的，但是忘记使用场景了，想记录下来。 参考资料 Pipeline Steps Reference</description>
      </item>
      
      <item>
        <title>测试udp数据报是否可以正常传递</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E6%B5%8B%E8%AF%95udp%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E4%BC%A0%E9%80%92/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E6%B5%8B%E8%AF%95udp%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E4%BC%A0%E9%80%92/</guid>
        <description>操作步骤 安装nc工具： yum install -y nc 服务端监听 nc -l -u 0.0.0.0 80001 客户端发送数据报 nc -u 192.168.31.210 数据报一 数据报二 现象：客户端发送的数据报会显示在服务端 参考资料 测试u</description>
      </item>
      
      <item>
        <title>消费确认失败的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/kafka/%E6%B6%88%E8%B4%B9%E7%A1%AE%E8%AE%A4%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/kafka/%E6%B6%88%E8%B4%B9%E7%A1%AE%E8%AE%A4%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题描述 异常如下： org.apache.kafka.clients.consumer.CommitFailedException: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing max.poll.interval.ms or by reducing the maximum</description>
      </item>
      
      <item>
        <title>理解Bootstrap</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3bootstrap/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3bootstrap/</guid>
        <description>Boostrap为应用程序的网络层配置提供了容器（这个理解角度很新颖），这涉及到将一个进程绑定到某个指定的端口，或者将一个进程连接到另一个运</description>
      </item>
      
      <item>
        <title>理解ByteBuf</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3bytebuf/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3bytebuf/</guid>
        <description>Netty的数据处理API通过两个组件暴露ByteBuf、ByteBufHolder。ByteBuf有如下优点： 它可以被用户自定义的缓冲区类</description>
      </item>
      
      <item>
        <title>理解Channel、EventLoop的关系</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3channeleventloop%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3channeleventloop%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
        <description>Channel 基本的IO操作（bind、connect、read、write、accept）依赖于底层网络传输所提供的原语。在基于Java的网络编程中，</description>
      </item>
      
      <item>
        <title>理解Distuptor原理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/disruptor/%E7%90%86%E8%A7%A3distuptor%E5%8E%9F%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/disruptor/%E7%90%86%E8%A7%A3distuptor%E5%8E%9F%E7%90%86/</guid>
        <description>Java内置队列 基于数组线程安全的队列，比较典型的是ArrayBlockingQueue，它主要是通过加锁的方式来保证线程安全；基于链表的线</description>
      </item>
      
      <item>
        <title>理解FastThreadLocal</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E7%90%86%E8%A7%A3fastthreadlocal/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E7%90%86%E8%A7%A3fastthreadlocal/</guid>
        <description>今天看Netty源码，遇到如下一个东东： 1 2 3 4 5 6 7 8 9 10 private static final FastThreadLocal&amp;lt;CodecOutputLists&amp;gt; CODEC_OUTPUT_LISTS_POOL = new FastThreadLocal&amp;lt;CodecOutputLists&amp;gt;() { @Override protected CodecOutputLists initialValue() throws Exception { // 16 CodecOutputList per Thread are cached. return new CodecOutputLists(16); } }; 这使我产生了对FastT</description>
      </item>
      
      <item>
        <title>理解Hugo中的single.html和list.html</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E7%90%86%E8%A7%A3hugo%E4%B8%AD%E7%9A%84single.html%E5%92%8Clist.html/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hugo/%E7%90%86%E8%A7%A3hugo%E4%B8%AD%E7%9A%84single.html%E5%92%8Clist.html/</guid>
        <description>hugo主要有四种布局：single、list、index、404。index就是主页，404就是url找不到时的错误页面，这两个都挺好理解</description>
      </item>
      
      <item>
        <title>理解KT Connect命令执行</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E7%90%86%E8%A7%A3kt-connect%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/kt-connect/%E7%90%86%E8%A7%A3kt-connect%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</guid>
        <description>我一直以为KT Connect命令行工具有一定的玄学因素，参数只是位置放错了，就无法正常的运行，后来才发现是自己理解错了。 如图：KT Conne</description>
      </item>
      
      <item>
        <title>理解Netty中的事件与ChannelHandler</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3netty%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%B8%8Echannelhandler/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3netty%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%B8%8Echannelhandler/</guid>
        <description>Netty使用不同的事件来通知我们状态的改变或者操作的状态，这使得我们能够基于已经发生的事件来触发适当的动作，这些动作可能有： 记录日志 数据转</description>
      </item>
      
      <item>
        <title>理解Netty中的回调与Future</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3netty%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E4%B8%8Efuture/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3netty%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E4%B8%8Efuture/</guid>
        <description>回调 回调理解起来很简单，在Netty中，如下即是回调： 1 2 3 4 5 6 7 8 public class ConnectHandler extends ChannelInboundHandlerAdapter { @Override public void channelActive(ChannelHandlerContext ctx) throws Exception { System.out.println(&amp;#34;Client &amp;#34; + ctx.channel().remoteAddress() + &amp;#34; connected.&amp;#34;); } } Netty在内部使用了回</description>
      </item>
      
      <item>
        <title>理解SelectionKey</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3selectionkey/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%90%86%E8%A7%A3selectionkey/</guid>
        <description>选择器背后的基本概念是充当一个注册表，在那里可以请求在Channel的状态发生变化时得到通知。可能的状态变化有： 新的Channel已被接受并</description>
      </item>
      
      <item>
        <title>理解Singular和repeated</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/%E7%90%86%E8%A7%A3singular%E5%92%8Crepeated/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/%E7%90%86%E8%A7%A3singular%E5%92%8Crepeated/</guid>
        <description>消息字段可以是一下之一： singular：消息类型中只能拥有零个或一个此字段，这是proto3语法默认的字段规则 repeated：消息类型中</description>
      </item>
      
      <item>
        <title>理解什么是JOSE</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/%E7%90%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFjose/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/oauth/%E7%90%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFjose/</guid>
        <description>JOSE是一种旨在在各方质检传递声明（Claims）的方法的规范集。我们常用的JWT就是包含了允许客户端访问特定资源的声明。JOSE制定了一</description>
      </item>
      
      <item>
        <title>用一张表中的数据去更新另一张表</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/%E7%94%A8%E4%B8%80%E5%BC%A0%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8E%BB%E6%9B%B4%E6%96%B0%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/%E7%94%A8%E4%B8%80%E5%BC%A0%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8E%BB%E6%9B%B4%E6%96%B0%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8/</guid>
        <description>需求产生于我们有两张表，一张表A中的数据为量一张表B中数据的复制品，结果B表结构增加了一些字段，A表未增加这些字段，最后导致接口数据不一致，</description>
      </item>
      
      <item>
        <title>用于K8S集群的模板配置及对生成的虚拟机的调整</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%94%A8%E4%BA%8Ek8s%E9%9B%86%E7%BE%A4%E7%9A%84%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%AF%B9%E7%94%9F%E6%88%90%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%B0%83%E6%95%B4/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E7%94%A8%E4%BA%8Ek8s%E9%9B%86%E7%BE%A4%E7%9A%84%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%AF%B9%E7%94%9F%E6%88%90%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%B0%83%E6%95%B4/</guid>
        <description>对模板的配置 我在模板上执行了如下指令（凭记忆回忆的）： 配置下网络环境（我在配置模板机时，网络环境还没有搭起来，所以只能走全局代理的方式了） #</description>
      </item>
      
      <item>
        <title>用于注入Bean的一些注解</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E7%94%A8%E4%BA%8E%E6%B3%A8%E5%85%A5bean%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring/%E7%94%A8%E4%BA%8E%E6%B3%A8%E5%85%A5bean%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3/</guid>
        <description>Autowired 虽然我们现在开发的时候基本用不上这个注解（我们基本用构造函数注入），但是有些东西还是需要了解一下的。 @Autowired默认按照类型去容器</description>
      </item>
      
      <item>
        <title>研究ByteToMessageDecoder实现</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6bytetomessagedecoder%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6bytetomessagedecoder%E5%AE%9E%E7%8E%B0/</guid>
        <description>565行代码，感觉是一个大工程呀~ 首先是MERGE_CUMULATOR和COMPOSITE_CUMULATOR两个成员变量，按照JavaDo</description>
      </item>
      
      <item>
        <title>研究ChannelInitializer实现</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E7%A0%94%E7%A9%B6channelinitializer%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E7%A0%94%E7%A9%B6channelinitializer%E5%AE%9E%E7%8E%B0/</guid>
        <description>这是Pipeline的第一个ChannelHandler，有一定的研究价值。ChannelHandler继承了ChannelInboundH</description>
      </item>
      
      <item>
        <title>研究CodecOutputList实现</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6codecoutputlist%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E6%8A%80%E6%9C%AF%E7%82%B9%E7%A0%94%E7%A9%B6/%E8%A7%A3%E7%A0%81%E5%99%A8/%E7%A0%94%E7%A9%B6codecoutputlist%E5%AE%9E%E7%8E%B0/</guid>
        <description>先是一个什么都不做的CodecOutputListRecycler，代码如下： 1 2 3 4 5 6 7 8 private static final CodecOutputListRecycler NOOP_RECYCLER = new CodecOutputListRecycler() { @Override public void recycle(CodecOutputList object) { // drop on the floor and let the</description>
      </item>
      
      <item>
        <title>研究一下Dig指令（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%BE%85%E5%AE%8C%E6%88%90/%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8Bdig%E6%8C%87%E4%BB%A4%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%BE%85%E5%AE%8C%E6%88%90/%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8Bdig%E6%8C%87%E4%BB%A4%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description></description>
      </item>
      
      <item>
        <title>研究一下sed指令（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%BE%85%E5%AE%8C%E6%88%90/%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8Bsed%E6%8C%87%E4%BB%A4%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%BE%85%E5%AE%8C%E6%88%90/%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8Bsed%E6%8C%87%E4%BB%A4%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description></description>
      </item>
      
      <item>
        <title>空闲的连接和超时</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%A9%BA%E9%97%B2%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%B6%85%E6%97%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%A9%BA%E9%97%B2%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%B6%85%E6%97%B6/</guid>
        <description>检测空闲链接及超时对于及时释放资源来说是至关重要的。 IdleStateHandler：当链接空闲时间太长时，将会触发一个IdleStateE</description>
      </item>
      
      <item>
        <title>简单使用GitHub Actions</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8github-actions/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8github-actions/</guid>
        <description>如下为实验目录及文件： 其中gihub-actions-demo.yml内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name:GitHub Actions Demoon:[push]jobs:Explore-GitHub-Actions:runs-on:ubuntu-lateststeps:- run:echo &amp;#34;🎉 The</description>
      </item>
      
      <item>
        <title>简单的使用protobuf及使用过程中遇到的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8protobuf%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/protobuf/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8protobuf%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>如下，我准备的协议文件： 1 2 3 4 5 6 7 8 9 10 11 12 13 // 协议的版本 syntax = &amp;#34;proto3&amp;#34;;// 生成的外部类名，同时也是文件名 option java_outer_classname = &amp;#34;StudentPOJO&amp;#34;;// 会在StudentPOJO外部类生</description>
      </item>
      
      <item>
        <title>组合约束</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E7%BB%84%E5%90%88%E7%BA%A6%E6%9D%9F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/validation/%E7%BB%84%E5%90%88%E7%BA%A6%E6%9D%9F/</guid>
        <description>代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Max(150) @Min(0) @Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE}) @Retention(RUNTIME) @Documented @Constraint(validatedBy = {}) public @interface JAge { @OverridesAttribute(constraint = Max.class, name = &amp;#34;message&amp;#34;) @OverridesAttribute(constraint = Min.class, name = &amp;#34;message&amp;#34;) String message() default &amp;#34;年龄超出范围&amp;#34</description>
      </item>
      
      <item>
        <title>给字段取名时需要注意的一些细节</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E7%BB%99%E5%AD%97%E6%AE%B5%E5%8F%96%E5%90%8D%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E7%BB%99%E5%AD%97%E6%AE%B5%E5%8F%96%E5%90%8D%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82/</guid>
        <description>我搞了一个picture_3d的字段，结果在插入数据的时候报错，报的错误是picture3d字段不存在，我使用TableField注解暂时解</description>
      </item>
      
      <item>
        <title>绝望的Win10锁屏与解决方案</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E7%BB%9D%E6%9C%9B%E7%9A%84win10%E9%94%81%E5%B1%8F%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/win/%E7%BB%9D%E6%9C%9B%E7%9A%84win10%E9%94%81%E5%B1%8F%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
        <description>公司电脑锁屏后，重登时都会出现与工作站失去信任关系的问题，解决该问题必须重启机器。运维同事帮我解决了很多次，都没有效果，非常绝望。更绝望的是</description>
      </item>
      
      <item>
        <title>编解码器</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty-in-action/%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8/</guid>
        <description>decode和decodeLast 由于不可能知道远程节点是否会一次性地发送一个完整的消息，所以ByteToMessageDecoder会对入</description>
      </item>
      
      <item>
        <title>缺乏父依赖，导致项目报Redis链接错误</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E7%BC%BA%E4%B9%8F%E7%88%B6%E4%BE%9D%E8%B5%96%E5%AF%BC%E8%87%B4%E9%A1%B9%E7%9B%AE%E6%8A%A5redis%E9%93%BE%E6%8E%A5%E9%94%99%E8%AF%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E7%BC%BA%E4%B9%8F%E7%88%B6%E4%BE%9D%E8%B5%96%E5%AF%BC%E8%87%B4%E9%A1%B9%E7%9B%AE%E6%8A%A5redis%E9%93%BE%E6%8E%A5%E9%94%99%E8%AF%AF/</guid>
        <description>具体报Redis的错误我忘记整理了，但是该错误我曾经遇到过，如下（日志来自另一篇笔记）： java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123) at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190) at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246) at</description>
      </item>
      
      <item>
        <title>自动动手实现一个不可分享的ChannelHandler</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E8%87%AA%E5%8A%A8%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%88%86%E4%BA%AB%E7%9A%84channelhandler/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/netty%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/%E8%87%AA%E5%8A%A8%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%88%86%E4%BA%AB%E7%9A%84channelhandler/</guid>
        <description>第一版 代码如下，非常简单： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class TimeClientHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { ByteBuf m = (ByteBuf) msg; // (1) try { long currentTimeMillis = (m.readUnsignedInt() - 2208988800L) * 1000L; System.out.println(new Date(currentTimeMillis));</description>
      </item>
      
      <item>
        <title>解决Jenkins下载插件慢</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/jenkins/%E8%A7%A3%E5%86%B3jenkins%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6%E6%85%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/jenkins/%E8%A7%A3%E5%86%B3jenkins%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6%E6%85%A2/</guid>
        <description>解决步骤 修改插件源为： https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json 修改updates/default.json文件： updates.jenkins-ci.org/download修改</description>
      </item>
      
      <item>
        <title>解决Kubernetes从国外站点下载镜像慢的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/%E8%A7%A3%E5%86%B3kubernetes%E4%BB%8E%E5%9B%BD%E5%A4%96%E7%AB%99%E7%82%B9%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/%E8%A7%A3%E5%86%B3kubernetes%E4%BB%8E%E5%9B%BD%E5%A4%96%E7%AB%99%E7%82%B9%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>解决步骤 拿到原镜像地址： 1 2 3 kubectl describe po xxx -n xxx # quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0 替换为国内的站点 1 2 3 sudo docker pull quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0 推送到harbor，方便其他虚拟机进行下载 1 2 3 4 sudo docker tag quay.mirrors.ustc.edu.cn/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0 192.168.30.174:80/test/nginx-ingress-controller:0.30.0 sudo docker</description>
      </item>
      
      <item>
        <title>解决Prometheus管理页面的Console下没有任何东西显示</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/prometheus/%E8%A7%A3%E5%86%B3prometheus%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2%E7%9A%84console%E4%B8%8B%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E4%B8%9C%E8%A5%BF%E6%98%BE%E7%A4%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/prometheus/%E8%A7%A3%E5%86%B3prometheus%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2%E7%9A%84console%E4%B8%8B%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E4%B8%9C%E8%A5%BF%E6%98%BE%E7%A4%BA/</guid>
        <description>问题描述 console下会不显示任何东西），在最上面会有一个提示，说客户端事件和服务器实践不一致 解决步骤 调整客户端时间，与服务器一致（分钟级</description>
      </item>
      
      <item>
        <title>解决从不同源拉取同一个镜像多次，始终从断点处执行</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E8%A7%A3%E5%86%B3%E4%BB%8E%E4%B8%8D%E5%90%8C%E6%BA%90%E6%8B%89%E5%8F%96%E5%90%8C%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F%E5%A4%9A%E6%AC%A1%E5%A7%8B%E7%BB%88%E4%BB%8E%E6%96%AD%E7%82%B9%E5%A4%84%E6%89%A7%E8%A1%8C/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E8%A7%A3%E5%86%B3%E4%BB%8E%E4%B8%8D%E5%90%8C%E6%BA%90%E6%8B%89%E5%8F%96%E5%90%8C%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F%E5%A4%9A%E6%AC%A1%E5%A7%8B%E7%BB%88%E4%BB%8E%E6%96%AD%E7%82%B9%E5%A4%84%E6%89%A7%E8%A1%8C/</guid>
        <description>在装kubernetes时，因为部分镜像下载太慢，我强行终止了下载。待我通过别的网速较快的机器将该镜像拉取并上传到内部的镜像服务器后，然后再</description>
      </item>
      
      <item>
        <title>解压.tar格式的文件</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E8%A7%A3%E5%8E%8B.tar%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E8%A7%A3%E5%8E%8B.tar%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
        <description>1 2 3 tar -xvf filename.tar 还有一些指令没有消化，先将参考资料罗列下来。 参考资料 tar文件是什么？怎么解压？</description>
      </item>
      
      <item>
        <title>解压tar.xz文件</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E8%A7%A3%E5%8E%8Btar.xz%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E8%A7%A3%E5%8E%8Btar.xz%E6%96%87%E4%BB%B6/</guid>
        <description>解压tar.xz 1 2 3 tar -xvJf node-v8.11.1-linux-x64.tar.xz</description>
      </item>
      
      <item>
        <title>解压是去掉最外层文件夹</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E8%A7%A3%E5%8E%8B%E6%98%AF%E5%8E%BB%E6%8E%89%E6%9C%80%E5%A4%96%E5%B1%82%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/targzip%E6%8C%87%E4%BB%A4/%E8%A7%A3%E5%8E%8B%E6%98%AF%E5%8E%BB%E6%8E%89%E6%9C%80%E5%A4%96%E5%B1%82%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
        <description>解压时去掉最外层文件夹 主要是使用--strip-components 1 1 2 3 tar -xvJf node-v8.11.1-linux-x64.tar.xz --strip-components 1</description>
      </item>
      
      <item>
        <title>解析yaml文件的时候维持文件中字段的顺序</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%A7%A3%E6%9E%90yaml%E6%96%87%E4%BB%B6%E7%9A%84%E6%97%B6%E5%80%99%E7%BB%B4%E6%8C%81%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AD%97%E6%AE%B5%E7%9A%84%E9%A1%BA%E5%BA%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%A7%A3%E6%9E%90yaml%E6%96%87%E4%BB%B6%E7%9A%84%E6%97%B6%E5%80%99%E7%BB%B4%E6%8C%81%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AD%97%E6%AE%B5%E7%9A%84%E9%A1%BA%E5%BA%8F/</guid>
        <description>之前开发一个功能时需要用到yaml文件记录配置信息，刚开始使用snakeyml，但是snakeyml有个小小的问题，就是它解析后得到的map</description>
      </item>
      
      <item>
        <title>让Shell阻塞一会</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E8%AE%A9shell%E9%98%BB%E5%A1%9E%E4%B8%80%E4%BC%9A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E8%AE%A9shell%E9%98%BB%E5%A1%9E%E4%B8%80%E4%BC%9A/</guid>
        <description>代码如下，单位为秒： 1 2 3 sleep 50 这个指令其实很强大，但是我没有深入研究。</description>
      </item>
      
      <item>
        <title>记录CentOS拨号上网时的一个奇怪的问题</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E8%AE%B0%E5%BD%95centos%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91%E6%97%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/centos/%E8%AE%B0%E5%BD%95centos%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91%E6%97%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>CentOS拨号上网时导致的无法通过192.168.31.217进行ssh的问题。我的解决方案非常的暴力，我拆掉了J4125上的USB网卡，</description>
      </item>
      
      <item>
        <title>记录一个大佬的Blog</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%A4%A7%E4%BD%AC%E7%9A%84blog/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/postgresql/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%A4%A7%E4%BD%AC%E7%9A%84blog/</guid>
        <description>Digoal.Zhou&amp;rsquo;s Blog 我暂时没有条件研究这个技术，环境还没有搭好，最近时间也安排的比较满。</description>
      </item>
      
      <item>
        <title>记录一些解决jar冲突（待完成）</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E8%A7%A3%E5%86%B3jar%E5%86%B2%E7%AA%81%E5%BE%85%E5%AE%8C%E6%88%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E8%A7%A3%E5%86%B3jar%E5%86%B2%E7%AA%81%E5%BE%85%E5%AE%8C%E6%88%90/</guid>
        <description>我想通过SpringBoot Actuator查看正在运行的应用的一些配置信息，当我引入如下依赖后，启动引用报如下错误： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; SLF4J: Class path contains multiple SLF4J bindings.</description>
      </item>
      
      <item>
        <title>记录一次关闭链路自动协商带来的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/rtl8125/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%85%B3%E9%97%AD%E9%93%BE%E8%B7%AF%E8%87%AA%E5%8A%A8%E5%8D%8F%E5%95%86%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/rtl8125/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%85%B3%E9%97%AD%E9%93%BE%E8%B7%AF%E8%87%AA%E5%8A%A8%E5%8D%8F%E5%95%86%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>问题简单的描述是这样的：我发现网线两端的网速并不匹配，一边显示100M，一边显示1000M，显示100M的是我的R8125网卡，我就很不开心</description>
      </item>
      
      <item>
        <title>记录一次超高速解决Istio问题</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%B6%85%E9%AB%98%E9%80%9F%E8%A7%A3%E5%86%B3istio%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes%E6%96%B0/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%B6%85%E9%AB%98%E9%80%9F%E8%A7%A3%E5%86%B3istio%E9%97%AE%E9%A2%98/</guid>
        <description>问题是这样的，我们的项目需要使用到GRpc的9090端口，所以申请运维帮我们暴露一下该端口，等我们自己测试该端口时，发现该端口无法正常使用（</description>
      </item>
      
      <item>
        <title>记录两份配置文件，可用于网络限制的场景中</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E8%AE%B0%E5%BD%95%E4%B8%A4%E4%BB%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%AF%E7%94%A8%E4%BA%8E%E7%BD%91%E7%BB%9C%E9%99%90%E5%88%B6%E7%9A%84%E5%9C%BA%E6%99%AF%E4%B8%AD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E8%AE%B0%E5%BD%95%E4%B8%A4%E4%BB%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%AF%E7%94%A8%E4%BA%8E%E7%BD%91%E7%BB%9C%E9%99%90%E5%88%B6%E7%9A%84%E5%9C%BA%E6%99%AF%E4%B8%AD/</guid>
        <description>Maven配置代理及常用setting.xml文件 阿里源： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;settings</description>
      </item>
      
      <item>
        <title>记录解决Maven问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3maven%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3maven%E9%97%AE%E9%A2%98/</guid>
        <description>还原命案现场，deploy的时候出现了如下错误： [INFO] ------------------------------------------------------------------------ [INFO] Reactor Summary for thirdplatformcenter 1.0.0: [INFO] [INFO] thirdplatformcenter ................................ FAILURE [ 0.667 s] [INFO] thirdplatform-common ............................... SKIPPED [INFO] thirdplatform-client ............................... SKIPPED [INFO] thirdplatform-server ............................... SKIPPED [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.074 s [INFO] Finished at: 2021-04-26T18:25:18+08:00 [INFO] ------------------------------------------------------------------------</description>
      </item>
      
      <item>
        <title>设置Docker容器加速及允许通过http协议拉取镜像</title>
        <link>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E8%AE%BE%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E5%8A%A0%E9%80%9F%E5%8F%8A%E5%85%81%E8%AE%B8%E9%80%9A%E8%BF%87http%E5%8D%8F%E8%AE%AE%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/docker/%E8%AE%BE%E7%BD%AEdocker%E5%AE%B9%E5%99%A8%E5%8A%A0%E9%80%9F%E5%8F%8A%E5%85%81%E8%AE%B8%E9%80%9A%E8%BF%87http%E5%8D%8F%E8%AE%AE%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F/</guid>
        <description>操作步骤 指令如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://cr58lvy7.mirror.aliyuncs.com&amp;#34;], &amp;#34;insecure-registries&amp;#34;:[&amp;#34;192.168.30.174:80&amp;#34;] } EOF sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39; { &amp;#34;insecure-registries&amp;#34;:[&amp;#34;172.16.100.100:80&amp;#34;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker 相关教程 Docker 镜像加速 镜像加速器</description>
      </item>
      
      <item>
        <title>设置VIM缩进为4个空格</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E8%AE%BE%E7%BD%AEvim%E7%BC%A9%E8%BF%9B%E4%B8%BA4%E4%B8%AA%E7%A9%BA%E6%A0%BC/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E8%AE%BE%E7%BD%AEvim%E7%BC%A9%E8%BF%9B%E4%B8%BA4%E4%B8%AA%E7%A9%BA%E6%A0%BC/</guid>
        <description>拷贝配置文件到家目录： 1 2 3 4 5 6 7 # ubuntu cp /etc/vim/vimrc ~/.vimrc # centos cp /etc/vimrc ~/.vimrc 编辑该配置文件，增加如下内容 set tabstop=4 参考资料 Linux下设置vim的缩进为4个空格</description>
      </item>
      
      <item>
        <title>读写文件时wb和rb写错导致的问题</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6wb%E5%92%8Crb%E5%86%99%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6wb%E5%92%8Crb%E5%86%99%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>完成往我OSS推送图片的脚本后，我发现了一个问题，我的本地的图片打不开了。检查代理时发现最有可能导致该问题的就是如下代码： 本应该是读的代码，</description>
      </item>
      
      <item>
        <title>读取application.yml的配置信息到Bean</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%AF%BB%E5%8F%96application.yml%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%88%B0bean/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E8%AF%BB%E5%8F%96application.yml%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E5%88%B0bean/</guid>
        <description>添加依赖： 1 2 3 4 5 6 7 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; 开发application.yml: 1 2 3 4 5 6 7 8 9 project-config:template-di</description>
      </item>
      
      <item>
        <title>谷歌翻译当前的网页</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91%E5%BD%93%E5%89%8D%E7%9A%84%E7%BD%91%E9%A1%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/chrome/%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91%E5%BD%93%E5%89%8D%E7%9A%84%E7%BD%91%E9%A1%B5/</guid>
        <description>用这种方案目前没有翻过车，使用浏览器地址栏的翻译按钮，可能会翻车（翻译的时候，需要关闭代理）： 之前用过Edge的翻译功能，翻译效果并不是太好</description>
      </item>
      
      <item>
        <title>资料整理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/easyexcel/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/easyexcel/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</guid>
        <description>因为短时间可能不会研究这方面的东西了，所以将之前收集的资料整理一下： EasyExcel为单个Cell设置样式 JAVA操作Excel表格部分不</description>
      </item>
      
      <item>
        <title>资料整理</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/python/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</guid>
        <description>好久没有用Python写脚本了，感觉API都不太熟悉了，完成脚本后，舍不得关闭网页，整理一份看看自己都查了哪些资料（我罗列的都是我用到的）：</description>
      </item>
      
      <item>
        <title>通过CoreDNS配置一个DNS服务器</title>
        <link>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E9%80%9A%E8%BF%87coredns%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AAdns%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/%E9%80%9A%E8%BF%87coredns%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AAdns%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>参考资料如下，我已经成功配置出来了，但是我其实不需要这个服务： centos7快速安装coreDns</description>
      </item>
      
      <item>
        <title>通过GitHub Actions实现博客自动化部署的方案</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E9%80%9A%E8%BF%87github-actions%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9A%84%E6%96%B9%E6%A1%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git_github/%E9%80%9A%E8%BF%87github-actions%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
        <description>我核心想实现的是：自动的完成笔记源文件到Gitbook源文件到Gitbook编译后文件推送到github仓库的工作。 该工作如果手动完成，有如</description>
      </item>
      
      <item>
        <title>配置Actuator导致项目无法启动</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/%E9%85%8D%E7%BD%AEactuator%E5%AF%BC%E8%87%B4%E9%A1%B9%E7%9B%AE%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/actuator/%E9%85%8D%E7%BD%AEactuator%E5%AF%BC%E8%87%B4%E9%A1%B9%E7%9B%AE%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</guid>
        <description>我添加了如下配置后，SpringBoot无法正常启动（只针对我们的项目框架）： management: endpoints: web: exposure: include: * 架构师说我们项目已经开启了相关的功能，而且*的用法</description>
      </item>
      
      <item>
        <title>配置Idea初始化SpringBoot项目时使用阿里的源</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E9%85%8D%E7%BD%AEidea%E5%88%9D%E5%A7%8B%E5%8C%96springboot%E9%A1%B9%E7%9B%AE%E6%97%B6%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E7%9A%84%E6%BA%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E9%85%8D%E7%BD%AEidea%E5%88%9D%E5%A7%8B%E5%8C%96springboot%E9%A1%B9%E7%9B%AE%E6%97%B6%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E7%9A%84%E6%BA%90/</guid>
        <description>Idea初始化项目时使用阿里的源： https://start.aliyun.com/ 该怎么用，懂得都懂，:) 默认的是： https://start.spring.io</description>
      </item>
      
      <item>
        <title>配置MVC时SpringBoot为我们配置了什么</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E9%85%8D%E7%BD%AEmvc%E6%97%B6springboot%E4%B8%BA%E6%88%91%E4%BB%AC%E9%85%8D%E7%BD%AE%E4%BA%86%E4%BB%80%E4%B9%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/spring-mvc/%E9%85%8D%E7%BD%AEmvc%E6%97%B6springboot%E4%B8%BA%E6%88%91%E4%BB%AC%E9%85%8D%E7%BD%AE%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
        <description>在加入SpringBoot的Web的starter后，自动配置类做了如下工作： 内容协商解析器和BeanName视图解析器 静态资料（包括web</description>
      </item>
      
      <item>
        <title>配置slf4j&#43;log4j2</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E9%85%8D%E7%BD%AEslf4j&#43;log4j2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/logging/%E9%85%8D%E7%BD%AEslf4j&#43;log4j2/</guid>
        <description>之前使用SpringBoot，都是自动帮我配置好的，难得有机会自己配置一下，资料整理如下： 添加依赖如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
      </item>
      
      <item>
        <title>配置文件中的classpath配置</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84classpath%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/application.yml/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84classpath%E9%85%8D%E7%BD%AE/</guid>
        <description>我注意到MyBatis-Plus的配置文件中有如下配置： 1 2 3 4 mybatis-plus:mapper-locations:classpath:mapper/*Mapper.xml 我觉得在配置文件中使用classpath:表示当前项目的资源文件是一件非常</description>
      </item>
      
      <item>
        <title>配置错误setting.xml文件，导致的一个奇怪的现象</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AFsetting.xml%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E7%8E%B0%E8%B1%A1/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea/%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AFsetting.xml%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E7%8E%B0%E8%B1%A1/</guid>
        <description>我从源码导入了一个Maven项目，因为我默认的Maven配置中使用的是setting.xml文件，但是我没有这份配置文件（我的文件为sett</description>
      </item>
      
      <item>
        <title>针对JSONObject、JSONArray的typeHandler</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%92%88%E5%AF%B9jsonobjectjsonarray%E7%9A%84typehandler/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%92%88%E5%AF%B9jsonobjectjsonarray%E7%9A%84typehandler/</guid>
        <description>实际上我已经有技术实现针对List的TypeHandler了，之所以还开发这个TypeHandler是因为我们的旧代码使用了JSONArra</description>
      </item>
      
      <item>
        <title>错将@RequestParam写成@Param导致Feign无法正常返回数据</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E9%94%99%E5%B0%86requestparam%E5%86%99%E6%88%90param%E5%AF%BC%E8%87%B4feign%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E9%94%99%E5%B0%86requestparam%E5%86%99%E6%88%90param%E5%AF%BC%E8%87%B4feign%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE/</guid>
        <description>问题就如标题描述的一样，错误的将@RequestParam写成了@Param，最终导致Controller拿不到相应的参数，最终导致接口返回</description>
      </item>
      
      <item>
        <title>错将JSONObject写成JsonObject了</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E9%94%99%E5%B0%86jsonobject%E5%86%99%E6%88%90jsonobject%E4%BA%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/springboot/%E9%94%99%E5%B0%86jsonobject%E5%86%99%E6%88%90jsonobject%E4%BA%86/</guid>
        <description>是这样的，我参考之前的写法，在Request对象中用JSONObject去接受了前端请求传递了一个对象（我并不关心这个对象的结构）。结果接口</description>
      </item>
      
      <item>
        <title>雪花算法配置出问题了，导致主键重复</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E9%85%8D%E7%BD%AE%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86%E5%AF%BC%E8%87%B4%E4%B8%BB%E9%94%AE%E9%87%8D%E5%A4%8D/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/mybatis-plus/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E9%85%8D%E7%BD%AE%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86%E5%AF%BC%E8%87%B4%E4%B8%BB%E9%94%AE%E9%87%8D%E5%A4%8D/</guid>
        <description>我们生产中用的雪花算法代码如下： 1 2 3 4 5 6 7 8 9 10 11 @Bean public MybatisPlusPropertiesCustomizer plusPropertiesCustomizer() { //从docker启动参数中获取应用实例WID环境变量 Long workId = (long) Math.random() * 31; Long dataCenterId = (long)</description>
      </item>
      
      <item>
        <title>静态泛型方法</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E9%9D%99%E6%80%81%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/java/%E9%9D%99%E6%80%81%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95/</guid>
        <description>好久不写泛型代码，突然会想不起来怎么写了，所以记录一下。最近开发了一个工具方法，代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
      </item>
      
      <item>
        <title>非线程安全的Room在什么情况下可以存在</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E9%9D%9E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84room%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E5%8F%AF%E4%BB%A5%E5%AD%98%E5%9C%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/netty/%E9%9D%9E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84room%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E5%8F%AF%E4%BB%A5%E5%AD%98%E5%9C%A8/</guid>
        <description>Room可以是非线程安全的，只要将它相关的所有Channel都注册到同一个EventLoop即可。因为在一个EventLoop中永远是单线程</description>
      </item>
      
      <item>
        <title>项目中starter-parent中可以优化的点</title>
        <link>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/%E9%A1%B9%E7%9B%AE%E4%B8%ADstarter-parent%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96%E7%9A%84%E7%82%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://junjie2018.github.io/notes/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/profile/%E9%A1%B9%E7%9B%AE%E4%B8%ADstarter-parent%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96%E7%9A%84%E7%82%B9/</guid>
        <description>我注意到我们的starter-parent配置中有如下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;build&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources/&amp;lt;/directory&amp;gt; &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt; &amp;lt;!-</description>
      </item>
      
    
  </channel>
</rss>